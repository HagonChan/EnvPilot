{
    "primary_language": "Rust",
    "language_guidelines": "Programming Language guidelines for Rust:\n# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\nname: CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  release:\n    types: [published]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n  cancel-in-progress: true\n\nenv:\n  CARGO_TERM_COLOR: always\n  REGISTRY: ghcr.io\n  RUST_VERSION: 1.86.0\n  NIGHTLY_RUST_VERSION: nightly-2025-03-20\n\njobs:\n  verifications-complete:\n    needs:\n      - check-dependency-version-formats\n      - check-forc-manifest-version\n      - build-sway-lib-std\n      - build-sway-examples\n      - build-reference-examples\n      - forc-fmt-check-sway-lib-std\n      - forc-fmt-check-sway-examples\n      - forc-fmt-check-panic\n      - check-sdk-harness-test-suite-compatibility\n      - build-mdbook\n      - build-forc-doc-sway-lib-std\n      - build-forc-test-project\n      - cargo-build-workspace\n      - cargo-clippy\n      - cargo-run-e2e-test-evm\n      - cargo-test-lib-std\n      - forc-run-benchmarks\n      - forc-unit-tests\n      - forc-pkg-fuels-deps-check\n      - cargo-test-sway-lsp\n      - cargo-test-forc\n      - cargo-test-workspace\n      - cargo-unused-deps-check\n      - pre-publish-check\n      - cargo-run-e2e-test\n      - cargo-run-e2e-test-release\n      - cargo-test-forc-debug\n      - cargo-test-forc-client\n      - cargo-test-forc-mcp\n      - cargo-test-forc-node\n      - notify-slack-on-failure\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"pass\"\n\n  check-dependency-version-formats:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n\n      - name: Cache check-dep-versions build\n        uses: Swatinem/rust-cache@v2\n        with:\n          key: check-dep-versions-${{ runner.os }}-${{ hashFiles('.github/scripts/check-dep-versions/Cargo.lock') }}\n\n      - name: Check Workspace Dependency Version Formats\n        run: |\n          cargo run --manifest-path .github/workflows/scripts/check-dep-versions/Cargo.toml --release -- Cargo.toml\n\n  check-forc-manifest-version:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n\n      - name: Cache check-forc-manifest-version build\n        uses: Swatinem/rust-cache@v2\n        with:\n          key: check-forc-manifest-version-${{ runner.os }}-${{ hashFiles('.github/scripts/check-forc-manifest-version/Cargo.lock') }}\n\n      - name: Check Forc Manifest Version\n        run: |\n          cargo run --manifest-path .github/workflows/scripts/check-forc-manifest-version/Cargo.toml --release -- Cargo.toml\n\n  get-fuel-core-version:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    outputs:\n      fuel_core_version: ${{steps.get_fuel_core_ver.outputs.version}}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n\n      - name: get fuel core version\n        id: get_fuel_core_ver\n        run: |\n          cargo install toml-cli\n          version=$(toml get Cargo.toml workspace.dependencies.fuel-core-client.version | tr -d '\"')\n          echo \"version=$version\" >> \"$GITHUB_OUTPUT\"\n\n  build-sway-lib-std:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install Forc\n        run: cargo install --locked --path ./forc\n      - name: Build sway-lib-std\n        run: forc build --path sway-lib-std\n\n  build-sway-examples:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Build Sway examples workspace\n        run: cargo run --locked -p forc -- build --locked --path ./examples/Forc.toml\n\n  build-reference-examples:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Build Sway examples workspace\n        run: cargo run --locked -p forc -- build --locked --path ./docs/reference/src/code/Forc.toml\n\n  forc-fmt-check-sway-lib-std:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Check Sway sway-lib-std formatting\n        run: cargo run --locked -p forc-fmt -- --check --path ./sway-lib-std\n\n  forc-fmt-check-sway-examples:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Check Sway examples formatting\n        run: cargo run --locked -p forc-fmt -- --check --path ./examples\n\n  forc-fmt-check-panic:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install forc-fmt\n        run: cargo install --locked --path ./forc-plugins/forc-fmt\n      - name: Run the formatter against all sway projects and fail if any of them panic\n        run: scripts/formatter/forc-fmt-check-panic.sh\n\n  check-sdk-harness-test-suite-compatibility:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n\n      - name: Install toml-cli\n        run: cargo install toml-cli\n\n      - name: Read and compare versions\n        env:\n          PACKAGE_NAMES: \"fuel-core-client\" # multiple packages can be specified delimeted with `,`.\n        run: |\n          .github/workflows/scripts/check-sdk-harness-version.sh\n\n  build-mdbook:\n    runs-on: buildjet-8vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: buildjet/cache@v3\n        with:\n          path: |\n            ~/.cargo/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n      - name: Install Forc\n        run: cargo install --locked --path ./forc\n      - name: Install Forc plugins\n        run: |\n          for dir in ./forc-plugins/*/; do\n                cargo install --locked --path \"$dir\"\n          done\n      - name: Install mdbook-forc-documenter\n        run: cargo install --locked --path ./scripts/mdbook-forc-documenter\n\n      - name: Run mdbook build\n        uses: peaceiris/actions-mdbook@v1\n        with:\n          mdbook-version: \"0.4.25\"\n      - name: Emit book logs to tmp.txt, fail if build logs contain 'ERROR'\n        run: |\n          MDBOOK_preprocessor__FORC_documenter__STRICT=\"true\" mdbook build docs/book 2>&1 | tee tmp.txt\n          if cat tmp.txt | grep 'ERROR'\n          then\n            cat tmp.txt\n            rm tmp.txt && exit 1\n          else\n            rm tmp.txt && exit 0\n          fi\n\n      - name: Emit reference logs to tmp.txt, fail if build logs contain 'ERROR'\n        run: |\n          mdbook build docs/reference\n          mdbook build docs/reference &> tmp.txt\n          if cat tmp.txt | grep 'ERROR'\n          then\n            cat tmp.txt\n            rm tmp.txt && exit 1\n          else\n            rm tmp.txt && exit 0\n          fi\n\n  build-forc-doc-sway-lib-std:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install Forc\n        run: cargo install --locked --path ./forc\n      - name: Install Forc plugins\n        run: |\n          cargo install --locked --path ./forc-plugins/forc-doc\n      - name: Build sway-lib-std docs\n        run: forc doc --path ./sway-lib-std\n\n  build-forc-test-project:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: wasm32-unknown-unknown\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install Forc\n        run: cargo install --locked --path ./forc\n      - name: Initialize test project\n        run: forc new test-proj\n      - name: Update project forc manifest to use local sway-lib-std\n        run: echo \"std = { path = \\\"../sway-lib-std/\\\" }\" >> test-proj/Forc.toml\n      - name: Build test project\n        run: forc build --path test-proj\n      # TODO: Re-add this upon landing unit test support: #1832\n      # - name: Run test project's test suite\n      #   run: (cd test-proj && forc test)\n      - name: Install cargo-generate\n        run: cargo install --locked cargo-generate\n      - name: Install fuel-core\n        run: cargo install --locked fuel-core-bin\n      - name: Generate Rust Integration Tests\n        run: (cd test-proj && cargo generate --init --path ../templates/sway-test-rs --name test-proj)\n      - name: Update project cargo manifest with workspace\n        run: |\n          echo \"\n\n          [workspace]\" >> test-proj/Cargo.toml\n      - name: Build and Run Default Integration Test\n        run: (cd test-proj && cargo test --release)\n\n  cargo-build-workspace:\n    runs-on: buildjet-8vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: \"Build Workspace\"\n        run: cargo build --locked --workspace --all-features --all-targets\n        env:\n          RUSTFLAGS: \"-D warnings\"\n\n  cargo-clippy:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: clippy\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Check Clippy Linter\n        run: cargo clippy --all-features --all-targets -- -D warnings\n\n  cargo-toml-fmt-check:\n    runs-on: ubuntu-latest # Switching this runner to buildjet causes failure.\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - name: Install Cargo.toml linter\n        uses: baptiste0928/cargo-install@v1\n        with:\n          crate: cargo-toml-lint\n          version: \"0.1\"\n      - name: Run Cargo.toml linter\n        run: git ls-files | grep Cargo.toml$ | grep -v 'templates/' | xargs --verbose -n 1 cargo-toml-lint\n\n  cargo-fmt-check:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt\n      - name: Check Formatting\n        run: cargo fmt --all -- --check\n\n  cargo-run-e2e-test:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    needs: get-fuel-core-version\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install fuel-core for tests\n        run: |\n          curl -sSLf https://github.com/FuelLabs/fuel-core/releases/download/v${{ needs.get-fuel-core-version.outputs.fuel_core_version }}/fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu.tar.gz -L -o fuel-core.tar.gz\n          tar -xvf fuel-core.tar.gz\n          chmod +x fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core\n          mv fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core /usr/local/bin/fuel-core\n      - name: Cargo Run E2E Tests (Fuel VM)\n        run: |\n          fuel-core run --db-type in-memory --debug &\n          sleep 5 &&\n          cargo run --locked --release --bin test -- --locked\n\n  cargo-run-e2e-test-release:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    needs: get-fuel-core-version\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install fuel-core for tests\n        run: |\n          curl -sSLf https://github.com/FuelLabs/fuel-core/releases/download/v${{ needs.get-fuel-core-version.outputs.fuel_core_version }}/fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu.tar.gz -L -o fuel-core.tar.gz\n          tar -xvf fuel-core.tar.gz\n          chmod +x fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core\n          mv fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core /usr/local/bin/fuel-core\n      - name: Cargo Run E2E Tests (Fuel VM)\n        run: |\n          fuel-core run --db-type in-memory --debug &\n          sleep 5 &&\n          cargo run --locked --release --bin test -- --locked --release\n\n  cargo-run-e2e-test-evm:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Cargo Run E2E Tests (EVM)\n        run: cargo run --locked --release --bin test -- --target evm --locked --no-experimental new_encoding\n\n  # TODO: Remove this upon merging std tests with the rest of the E2E tests.\n  cargo-test-lib-std:\n    runs-on: buildjet-8vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: buildjet/cache@v3\n        with:\n          path: |\n            ~/.cargo/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n      - name: Build All Tests\n        run: cargo run --locked --release -p forc -- build --release --locked --path ./test/src/sdk-harness\n      - name: Test All Tests\n        run: cargo run --locked --release -p forc -- test --release --locked --path ./test/src/sdk-harness\n      - name: Cargo Test sway-lib-std\n        run: cargo test --locked --release --manifest-path ./test/src/sdk-harness/Cargo.toml -- --nocapture\n      # TODO: Enable `const_generics` tests once the necessary https://github.com/FuelLabs/sway/issues/6860 TODOs are resolved.\n      # - name: Build All Tests - Experimental Feature 'const_generics'\n      #   run: cargo run --locked --release -p forc -- build --release --locked --path ./test/src/sdk-harness --experimental const_generics\n      # - name: Test All Tests - Experimental Feature 'const_generics'\n      #   run: cargo run --locked --release -p forc -- test --release --locked --path ./test/src/sdk-harness --experimental const_generics\n      # - name: Cargo Test sway-lib-std - Experimental Feature 'const_generics'\n      #   run: cargo test --locked --release --manifest-path ./test/src/sdk-harness/Cargo.toml -- --nocapture\n      - name: Build All Tests - Experimental Feature 'new_hashing'\n        run: cargo run --locked --release -p forc -- build --release --locked --path ./test/src/sdk-harness --experimental new_hashing\n      - name: Test All Tests - Experimental Feature 'new_hashing'\n        run: cargo run --locked --release -p forc -- test --release --locked --path ./test/src/sdk-harness --experimental new_hashing\n      - name: Cargo Test sway-lib-std - Experimental Feature 'new_hashing'\n        run: cargo test --locked --release --manifest-path ./test/src/sdk-harness/Cargo.toml -- --nocapture\n      # TODO: Enable `const_generics,new_hashing` tests once the necessary https://github.com/FuelLabs/sway/issues/6860 TODOs are resolved.\n      # - name: Build All Tests - Experimental Feature 'const_generics,new_hashing'\n      #   run: cargo run --locked --release -p forc -- build --release --locked --path ./test/src/sdk-harness --experimental const_generics,new_hashing\n      # - name: Test All Tests - Experimental Feature 'const_generics,new_hashing'\n      #   run: cargo run --locked --release -p forc -- test --release --locked --path ./test/src/sdk-harness --experimental const_generics,new_hashing\n      # - name: Cargo Test sway-lib-std - Experimental Feature 'const_generics,new_hashing'\n      #   run: cargo test --locked --release --manifest-path ./test/src/sdk-harness/Cargo.toml -- --nocapture\n\n  forc-run-benchmarks:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    environment: fuel-sway-bot\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install Forc\n        run: cargo install --locked --path ./forc\n      - name: Run benchmarks\n        run: ./benchmark.sh\n      - name: Checkout benchmark data\n        if: github.event_name != 'push'\n        uses: actions/checkout@v3\n        with:\n          repository: FuelLabs/sway-performance-data\n          path: performance-data\n      - name: Get GitHub app token\n        if: github.event_name == 'push'\n        uses: actions/create-github-app-token@v1\n        id: app-token\n        with:\n          app-id: ${{ vars.APP_ID }}\n          private-key: ${{ secrets.APP_KEY }}\n          owner: FuelLabs\n      - name: Checkout benchmark data\n        if: github.event_name == 'push'\n        uses: actions/checkout@v3\n        with:\n          repository: FuelLabs/sway-performance-data\n          path: performance-data\n          token: ${{ steps.app-token.outputs.token }}\n      - name: Prepare benchmarks data for commit\n        if: github.event_name == 'push'\n        run: ./benchmark.sh --prepare-for-commit\n      - uses: EndBug/add-and-commit@v9\n        with:\n          cwd: \"./performance-data\"\n          message: \"Updated benchmark data\"\n          default_author: github_actions\n\n  forc-unit-tests:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install Forc\n        run: cargo install --locked --path ./forc\n      - name: Run Std Unit Tests (Debug)\n        run: forc test --path sway-lib-std\n      - name: Run Std Unit Tests (Release)\n        run: forc test --release --path sway-lib-std\n      - name: Run Std Unit Tests - Experimental feature 'const_generics' (Debug)\n        run: forc test --path sway-lib-std --experimental const_generics\n      - name: Run Std Unit Tests - Experimental feature 'const_generics' (Release)\n        run: forc test --release --path sway-lib-std --experimental const_generics\n      - name: Run Std Unit Tests - Experimental feature 'new_hashing' (Debug)\n        run: forc test --path sway-lib-std --experimental new_hashing\n      - name: Run Std Unit Tests - Experimental feature 'new_hashing' (Release)\n        run: forc test --release --path sway-lib-std --experimental new_hashing\n      - name: Run Std Unit Tests - Experimental feature 'const_generics,new_hashing' (Debug)\n        run: forc test --path sway-lib-std --experimental const_generics,new_hashing\n      - name: Run Std Unit Tests - Experimental feature 'const_generics,new_hashing' (Release)\n        run: forc test --release --path sway-lib-std --experimental const_generics,new_hashing\n      - name: Run In Language Unit Tests (Debug)\n        run: forc test --path test/src/in_language_tests\n      - name: Run In Language Unit Tests (Release)\n        run: forc test --release --path test/src/in_language_tests\n      - name: Run In Language Unit Tests - Experimental feature 'const_generics' (Debug)\n        run: forc test --path test/src/in_language_tests --experimental const_generics\n      - name: Run In Language Unit Tests - Experimental feature 'const_generics' (Release)\n        run: forc test --release --path test/src/in_language_tests --experimental const_generics\n      - name: Run In Language Unit Tests - Experimental feature 'new_hashing' (Debug)\n        run: forc test --path test/src/in_language_tests --experimental new_hashing\n      - name: Run In Language Unit Tests - Experimental feature 'new_hashing' (Release)\n        run: forc test --release --path test/src/in_language_tests --experimental new_hashing\n      - name: Run In Language Unit Tests - Experimental feature 'const_generics,new_hashing' (Debug)\n        run: forc test --path test/src/in_language_tests --experimental const_generics,new_hashing\n      - name: Run In Language Unit Tests - Experimental feature 'const_generics,new_hashing' (Release)\n        run: forc test --release --path test/src/in_language_tests --experimental const_generics,new_hashing\n\n  forc-pkg-fuels-deps-check:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n\n      # We require this check to avoid cyclic dependencies between 'fuels' and 'forc-pkg'.\n      # Detailed explanation is found in the echo below.\n      - name: Check 'forc-pkg' dependencies for 'fuels' crates\n        run: |\n          deps=$(cargo tree --manifest-path forc-pkg/Cargo.toml)\n\n          case \"$deps\" in\n            *fuels*)\n              echo -e \"\\nFound dependency on a 'fuels' crate.\n          To avoid cyclic dependencies between 'fuels' and 'forc-pkg',\n          we want to avoid using 'fuels' crates in 'forc-pkg' since 'fuels-rs' depends on 'forc-pkg' for its integration tests.\n\n          To fix this, please remove any 'fuels' dependency from forc-pkg/Cargo.toml.\n\n          Detailed explanation here: https://github.com/FuelLabs/fuels-rs/issues/752#issuecomment-1386242106\"\n              exit 1\n              ;;\n            *)\n              exit 0\n              ;;\n          esac\n  cargo-test-forc-debug:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    needs: get-fuel-core-version\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install fuel-core for tests\n        run: |\n          curl -sSLf https://github.com/FuelLabs/fuel-core/releases/download/v${{ needs.get-fuel-core-version.outputs.fuel_core_version }}/fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu.tar.gz -L -o fuel-core.tar.gz\n          tar -xvf fuel-core.tar.gz\n          chmod +x fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core\n          mv fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core /usr/local/bin/fuel-core\n      - name: Run tests\n        run: cargo test --locked --release -p forc-debug\n  cargo-test-forc-client:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    needs: get-fuel-core-version\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install fuel-core for tests\n        run: |\n          curl -sSLf https://github.com/FuelLabs/fuel-core/releases/download/v${{ needs.get-fuel-core-version.outputs.fuel_core_version }}/fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu.tar.gz -L -o fuel-core.tar.gz\n          tar -xvf fuel-core.tar.gz\n          chmod +x fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core\n          mv fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core /usr/local/bin/fuel-core\n      - name: Run tests\n        run: cargo test --locked --release -p forc-client -- --test-threads 1\n  cargo-test-forc-mcp:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    needs: get-fuel-core-version\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install fuel-core for tests\n        run: |\n          curl -sSLf https://github.com/FuelLabs/fuel-core/releases/download/v${{ needs.get-fuel-core-version.outputs.fuel_core_version }}/fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu.tar.gz -L -o fuel-core.tar.gz\n          tar -xvf fuel-core.tar.gz\n          chmod +x fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core\n          mv fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core /usr/local/bin/fuel-core\n      - name: Run tests\n        run: cargo test --locked --release -p forc-mcp -- --test-threads 1\n  cargo-test-forc-node:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    needs: get-fuel-core-version\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          targets: \"x86_64-unknown-linux-gnu, wasm32-unknown-unknown\"\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install fuel-core for tests\n        run: |\n          curl -sSLf https://github.com/FuelLabs/fuel-core/releases/download/v${{ needs.get-fuel-core-version.outputs.fuel_core_version }}/fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu.tar.gz -L -o fuel-core.tar.gz\n          tar -xvf fuel-core.tar.gz\n          chmod +x fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core\n          mv fuel-core-${{ needs.get-fuel-core-version.outputs.fuel_core_version }}-x86_64-unknown-linux-gnu/fuel-core /usr/local/bin/fuel-core\n      - name: Run tests\n        run: cargo test --locked --release -p forc-node -- --test-threads 1\n  cargo-test-sway-lsp:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Rust and cargo-nextest\n        uses: moonrepo/setup-rust@v0\n        with:\n          channel: stable\n          cache-target: release\n          bins: cargo-nextest\n      - name: Run sway-lsp tests sequentially\n        env:\n          RUST_BACKTRACE: full\n        run: cargo nextest run --locked --release -p sway-lsp --no-capture --profile ci --config-file sway-lsp/tests/nextest.toml\n  cargo-test-forc:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Run forc tests separately \n        env:\n          RUST_BACKTRACE: full\n        run: cargo test --locked --release -p forc -- --nocapture\n  cargo-test-workspace:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Run tests\n        run: cargo test --locked --release --workspace --exclude forc-debug --exclude sway-lsp --exclude forc-client --exclude forc-mcp --exclude forc --exclude forc-node\n  cargo-unused-deps-check:\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          # `cargo-udeps` requires nightly to run\n          toolchain: ${{ env.NIGHTLY_RUST_VERSION }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-provider: \"buildjet\"\n      - name: Install cargo-udeps\n        run: cargo install --locked cargo-udeps\n      - name: Check Unused Deps\n        run: cargo udeps --locked --all-targets\n\n  notify-slack-on-failure:\n    needs:\n      [\n        build-forc-test-project,\n        build-sway-examples,\n        build-sway-lib-std,\n        cargo-build-workspace,\n        cargo-clippy,\n        cargo-fmt-check,\n        cargo-run-e2e-test,\n        cargo-run-e2e-test-evm,\n        cargo-test-lib-std,\n        cargo-test-workspace,\n        cargo-test-sway-lsp,\n        cargo-unused-deps-check,\n      ]\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - name: Notify Slack On Failure\n        uses: ravsamhq/notify-slack-action@v2\n        if: always() && github.ref == 'refs/heads/master'\n        with:\n          status: ${{ job.status }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          notification_title: \"{workflow} has {status_message}\"\n          message_format: \"{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>\"\n          footer: \"\"\n          notify_when: \"failure\"\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}\n\n  # This job carries out some validation steps to prepare for a publish.\n  # This is a separate job because we want this to fail fast if something is invalid here.\n  pre-publish-check:\n    if: github.event_name == 'release' && github.event.action == 'published'\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n\n      - name: Verify tag version\n        run: |\n          cargo install toml-cli\n          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }}\n\n      - name: Notify if Job Fails\n        uses: ravsamhq/notify-slack-action@v2\n        if: always()\n        with:\n          status: ${{ job.status }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          notification_title: \"{workflow} has {status_message}\"\n          message_format: \"{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>\"\n          footer: \"\"\n          notify_when: \"failure\"\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}\n\n  publish:\n    # Only do this job if publishing a release\n    needs:\n      [\n        build-forc-test-project,\n        build-sway-examples,\n        build-sway-lib-std,\n        cargo-build-workspace,\n        cargo-clippy,\n        cargo-fmt-check,\n        cargo-run-e2e-test,\n        cargo-run-e2e-test-evm,\n        cargo-test-lib-std,\n        cargo-test-workspace,\n        cargo-test-sway-lsp,\n        cargo-unused-deps-check,\n        pre-publish-check,\n      ]\n    if: github.event_name == 'release' && github.event.action == 'published'\n    runs-on: buildjet-4vcpu-ubuntu-2204\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n\n      - name: Publish crate\n        uses: FuelLabs/publish-crates@v1\n        with:\n          publish-delay: 30000\n          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n\n      - name: Notify if Job Fails\n        uses: ravsamhq/notify-slack-action@v2\n        if: always()\n        with:\n          status: ${{ job.status }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          notification_title: \"{workflow} has {status_message}\"\n          message_format: \"{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>\"\n          footer: \"\"\n          notify_when: \"failure\"\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}\n\n  publish-sway-lib-std:\n    needs: [publish, build-and-release-forc-binaries]\n    if: github.event_name == 'release' && github.event.action == 'published'\n    runs-on: buildjet-4vcpu-ubuntu-2204\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n\n      - name: Publish sway-lib-std\n        run: |\n          cd sway-lib-std\n          cargo run --locked -p forc-publish\n        env:\n          FORC_PUB_TOKEN: ${{ secrets.FORCPUB_TOKEN }}\n\n      - name: Notify if Job Fails\n        uses: ravsamhq/notify-slack-action@v2\n        if: always()\n        with:\n          status: ${{ job.status }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          notification_title: \"{workflow} has {status_message}\"\n          message_format: \"{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>\"\n          footer: \"\"\n          notify_when: \"failure\"\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}\n\n  build-and-release-forc-binaries:\n    name: Build and upload forc binaries to release\n    runs-on: ${{ matrix.job.os }}\n    if: github.event_name == 'release' && github.event.action == 'published'\n    needs: [publish]\n    strategy:\n      matrix:\n        job:\n          - os: ubuntu-22.04\n            platform: linux\n            target: x86_64-unknown-linux-gnu\n            arch: amd64\n            svm_target_platform: linux-amd64\n          - os: ubuntu-22.04\n            platform: linux\n            target: aarch64-unknown-linux-gnu\n            arch: arm64\n            svm_target_platform: linux-aarch64\n          - os: macos-latest\n            platform: darwin\n            target: x86_64-apple-darwin\n            arch: amd64\n            svm_target_platform: macosx-amd64\n          - os: macos-latest\n            platform: darwin\n            target: aarch64-apple-darwin\n            arch: arm64\n            svm_target_platform: macosx-aarch64\n    steps:\n      - name: Checkout sources\n        uses: actions/checkout@v3\n\n      - name: Install toolchain\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          target: ${{ matrix.job.target }}\n\n      - uses: Swatinem/rust-cache@v2\n        with:\n          cache-on-failure: true\n          key: \"${{ matrix.job.target }}\"\n\n      - name: Use Cross\n        uses: baptiste0928/cargo-install@v1\n        with:\n          crate: cross\n          cache-key: \"${{ matrix.job.target }}\"\n\n      - name: Build forc binaries\n        run: |\n          cross build --profile=release --target ${{ matrix.job.target }} --bins\n\n      - name: Strip release binaries x86_64-linux-gnu\n        if: matrix.job.target == 'x86_64-unknown-linux-gnu'\n        run: |\n          for BINARY in forc forc-fmt forc-lsp forc-debug forc-deploy forc-run forc-doc forc-crypto forc-tx forc-submit forc-mcp forc-migrate forc-node forc-publish forc-call; do\n            strip \"target/${{ matrix.job.target }}/release/$BINARY\"\n          done\n      - name: Strip release binaries aarch64-linux-gnu\n        if: matrix.job.target == 'aarch64-unknown-linux-gnu'\n        run: |\n          for BINARY in forc forc-fmt forc-lsp forc-debug forc-deploy forc-run forc-doc forc-crypto forc-tx forc-submit forc-mcp forc-migrate forc-node forc-publish forc-call; do\n            docker run --rm -v \\\n            \"$PWD/target:/target:Z\" \\\n            ghcr.io/cross-rs/${{ matrix.job.target }}:main \\\n            aarch64-linux-gnu-strip \\\n            /target/${{ matrix.job.target }}/release/$BINARY\n          done\n      - name: Strip release binaries mac\n        if: matrix.job.os == 'macos-latest'\n        run: |\n          for BINARY in forc forc-fmt forc-lsp forc-debug forc-deploy forc-run forc-doc forc-crypto forc-tx forc-submit forc-mcp forc-migrate forc-node forc-publish forc-call; do\n            strip -x \"target/${{ matrix.job.target }}/release/$BINARY\"\n          done\n\n      - name: Prep Assets\n        id: prep_assets\n        env:\n          PLATFORM_NAME: ${{ matrix.job.platform }}\n          TARGET: ${{ matrix.job.target }}\n          ARCH: ${{ matrix.job.arch }}\n        run: |\n          ZIP_FILE_NAME=forc-binaries-${{ env.PLATFORM_NAME }}_${{ env.ARCH }}.tar.gz\n          echo \"ZIP_FILE_NAME=$ZIP_FILE_NAME\" >> $GITHUB_ENV\n          mkdir -pv ./forc-binaries\n          for BINARY in forc forc-fmt forc-lsp forc-debug forc-deploy forc-run forc-doc forc-crypto forc-tx forc-submit forc-mcp forc-migrate forc-node forc-publish forc-call; do\n            cp \"target/${{ matrix.job.target }}/release/$BINARY\" ./forc-binaries\n          done\n          tar -czvf $ZIP_FILE_NAME ./forc-binaries\n\n      - name: Archive forc binaries\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: ./${{ env.ZIP_FILE_NAME }}\n          asset_name: ${{ env.ZIP_FILE_NAME }}\n          asset_content_type: application/gzip\n",
    "readme": "# Sway\n\n[![build](https://github.com/FuelLabs/sway/actions/workflows/ci.yml/badge.svg)](https://github.com/FuelLabs/sway/actions/workflows/ci.yml)\n[![crates.io](https://img.shields.io/crates/v/forc?label=latest)](https://crates.io/crates/forc)\n[![docs](https://docs.rs/forc/badge.svg)](https://docs.rs/forc/)\n[![twitter](https://img.shields.io/twitter/follow/SwayLang)](https://x.com/SwayLang)\n[![discord](https://img.shields.io/badge/chat%20on-discord-orange?&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/xfpK4Pe)\n\nSway is a language developed for the [Fuel](https://docs.fuel.network/docs/intro/what-is-fuel/) blockchain. It is heavily inspired by Rust and aims to bring modern language development and performance to the blockchain ecosystem.\n\n## Documentation\n\nFor user documentation, including installing release builds, see the Sway Book: <https://fuellabs.github.io/sway/latest/>.\n\nFor Sway Standard library documentation, see: <https://fuellabs.github.io/sway/master/std/>\n\nAlso view the technical reference for the Sway programming language: <https://fuellabs.github.io/sway/master/reference/>\n\n## Building from Source\n\nThis section is for developing the Sway compiler and toolchain. For developing contracts and using Sway, see the above documentation section.\n\n### Dependencies\n\nSway is built in Rust. To begin, install the Rust toolchain following instructions at <https://www.rust-lang.org/tools/install>. Then configure your Rust toolchain to use Rust `stable`:\n\n```sh\nrustup default stable\n```\n\nIf not already done, add the Cargo bin directory to your `PATH` by adding the following line to `~/.profile` and restarting the shell session.\n\n```sh\nexport PATH=\"${HOME}/.cargo/bin:${PATH}\"\n```\n\n### Building Forc\n\nClone the repository and build the Sway toolchain:\n\n```sh\ngit clone git@github.com:FuelLabs/sway.git\ncd sway\ncargo build\n```\n\nConfirm the Sway toolchain built successfully:\n\n```sh\ncargo run --bin forc -- --help\n```\n\n## Contributing to Sway\n\nWe welcome contributions to Sway!\n\nPlease see the [Contributing To Sway](https://fuellabs.github.io/sway/master/book/reference/contributing_to_sway.html) section of the Sway book for guidelines and instructions to help you get started.\n",
    "org": "FuelLabs",
    "repo": "sway",
    "number": 7300,
    "commit": "8b29cc39c52cf7a3fd7857290f9741334923d362"
}