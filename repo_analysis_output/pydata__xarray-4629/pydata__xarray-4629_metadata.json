{
    "primary_language": "Python",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Python Projects**\n\n1. **Read the README**  \n   Always start by reading the project's README file on GitHub. It usually contains important instructions for installation, usage, and any project-specific details. Some projects include a `Dockerfile` script, which you can review and reuse as needed.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in a `requirements.txt` file. Ensure you have the required versions of Python and any other libraries/packages.  \n\n3. **Virtual Environment**  \n   It\u2019s a good practice to create a virtual environment for each Python project to avoid conflicts with system-wide packages. Use the command:  \n   ```sh\n   python3.X -m venv .venv  \n   ```  \n\n4. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files) and set them up accordingly.  \n\n5. **Build the Project (rare cases)**  \n   Some projects might require building before usage, especially if they include C extensions or require compiling assets.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Some projects include a `tox.ini` file, which allows you to run tests with `tox`. Install `tox` first using:  \n   ```sh\n   pip install tox  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a script, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is not necessary.  \n\n10. **Shell Compatibility**  \n   In some shells, the `source` command may not work. In such cases, replace `source` with just `.` (a single dot). For example:  \n   ```sh\n   . .venv/bin/activate  \n   ```  \n\n11. **Avoid Using Conda**  \n   Instead of Conda, prefer the following commands to set up your virtual environment:  \n   ```sh\n   python -m venv .venv  \n   . .venv/bin/activate  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: upstream-dev-ci.yaml\nContent:\nname: CI\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: \"0 0 * * *\" # Daily \u201cAt 00:00\u201d UTC\n  workflow_dispatch: # allows you to trigger the workflow run manually\n\njobs:\n  upstream-dev:\n    name: upstream-dev\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash -l {0}\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [\"3.8\"]\n    steps:\n      - name: Cancel previous runs\n        uses: styfle/cancel-workflow-action@0.6.0\n        with:\n          access_token: ${{ github.token }}\n      - uses: actions/checkout@v2\n      - uses: conda-incubator/setup-miniconda@v2\n        with:\n          channels: conda-forge\n          mamba-version: \"*\"\n          activate-environment: xarray-tests\n          auto-update-conda: false\n          python-version: ${{ matrix.python-version }}\n      - name: Set up conda environment\n        run: |\n          mamba env update -f ci/requirements/py38.yml\n          bash ci/install-upstream-wheels.sh\n          conda list\n      - name: Run Tests\n        run: |\n          set -o pipefail\n          python -m pytest -rf | tee output-${{ matrix.python-version }}-log\n\n      - name: Upload artifacts\n        if: \"failure()&&(github.event_name == 'schedule')&&(github.repository == 'pydata/xarray')\" # Check the exit code of previous step\n        uses: actions/upload-artifact@v2\n        with:\n          name: output-${{ matrix.python-version }}-log\n          path: output-${{ matrix.python-version }}-log\n          retention-days: 5\n\n  report:\n    name: report\n    needs: upstream-dev\n    if: \"always()&&(github.event_name == 'schedule')&&(github.repository == 'pydata/xarray')\"\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: \"3.x\"\n      - uses: actions/download-artifact@v2\n        with:\n          path: /tmp/workspace/logs\n      - name: Move all log files into a single directory\n        run: |\n          rsync -a /tmp/workspace/logs/output-*/ ./logs\n          ls -R ./logs\n      - name: Parse logs\n        run: |\n          shopt -s globstar\n          python .github/workflows/parse_logs.py logs/**/*-log\n      - name: Report failures\n        uses: actions/github-script@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const fs = require('fs');\n            const pytest_logs = fs.readFileSync('pytest-logs.txt', 'utf8');\n            const title = \"\u26a0\ufe0f Nightly upstream-dev CI failed \u26a0\ufe0f\"\n            const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`\n            const issue_body = `[Workflow Run URL](${workflow_url})\\n${pytest_logs}`\n            \n            // Run GraphQL query against GitHub API to find the most recent open issue used for reporting failures\n            const query = `query($owner:String!, $name:String!, $creator:String!, $label:String!){\n              repository(owner: $owner, name: $name) {\n                issues(first: 1, states: OPEN, filterBy: {createdBy: $creator, labels: [$label]}, orderBy: {field: CREATED_AT, direction: DESC}) {\n                  edges {\n                    node {\n                      body\n                      id\n                      number\n                    }\n                  }\n                }\n              }\n            }`;\n\n            const variables = {\n                owner: context.repo.owner,\n                name: context.repo.repo,\n                label: 'CI',\n                creator: \"github-actions[bot]\"\n            }\n            const result = await github.graphql(query, variables)\n            const issue_info = result.repository.issues.edges[0].node\n\n            // If no issue is open, create a new issue, else update the \n            // body of the existing issue. \n            if (typeof issue_info.number === 'undefined') {\n                github.issues.create({\n                    owner: variables.owner,\n                    repo: variables.name,\n                    body: issue_body,\n                    title: title,\n                    labels: [variables.label]\n                })\n            } else {\n                github.issues.update({\n                    owner: variables.owner,\n                    repo: variables.name,\n                    issue_number: issue_info.number,\n                    body: issue_body\n                })\n            }\n",
    "readme": "xarray: N-D labeled arrays and datasets\n=======================================\n\n.. image:: https://dev.azure.com/xarray/xarray/_apis/build/status/pydata.xarray?branchName=master\n   :target: https://dev.azure.com/xarray/xarray/_build/latest?definitionId=1&branchName=master\n.. image:: https://codecov.io/gh/pydata/xarray/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/pydata/xarray\n.. image:: https://readthedocs.org/projects/xray/badge/?version=latest\n   :target: https://xarray.pydata.org/\n.. image:: https://img.shields.io/badge/benchmarked%20by-asv-green.svg?style=flat\n  :target: https://pandas.pydata.org/speed/xarray/\n.. image:: https://img.shields.io/pypi/v/xarray.svg\n   :target: https://pypi.python.org/pypi/xarray/\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/python/black\n\n\n**xarray** (formerly **xray**) is an open source project and Python package\nthat makes working with labelled multi-dimensional arrays simple,\nefficient, and fun!\n\nXarray introduces labels in the form of dimensions, coordinates and\nattributes on top of raw NumPy_-like arrays, which allows for a more\nintuitive, more concise, and less error-prone developer experience.\nThe package includes a large and growing library of domain-agnostic functions\nfor advanced analytics and visualization with these data structures.\n\nXarray was inspired by and borrows heavily from pandas_, the popular data\nanalysis package focused on labelled tabular data.\nIt is particularly tailored to working with netCDF_ files, which were the\nsource of xarray's data model, and integrates tightly with dask_ for parallel\ncomputing.\n\n.. _NumPy: https://www.numpy.org\n.. _pandas: https://pandas.pydata.org\n.. _dask: https://dask.org\n.. _netCDF: https://www.unidata.ucar.edu/software/netcdf\n\nWhy xarray?\n-----------\n\nMulti-dimensional (a.k.a. N-dimensional, ND) arrays (sometimes called\n\"tensors\") are an essential part of computational science.\nThey are encountered in a wide range of fields, including physics, astronomy,\ngeoscience, bioinformatics, engineering, finance, and deep learning.\nIn Python, NumPy_ provides the fundamental data structure and API for\nworking with raw ND arrays.\nHowever, real-world datasets are usually more than just raw numbers;\nthey have labels which encode information about how the array values map\nto locations in space, time, etc.\n\nXarray doesn't just keep track of labels on arrays -- it uses them to provide a\npowerful and concise interface. For example:\n\n-  Apply operations over dimensions by name: ``x.sum('time')``.\n-  Select values by label instead of integer location:\n   ``x.loc['2014-01-01']`` or ``x.sel(time='2014-01-01')``.\n-  Mathematical operations (e.g., ``x - y``) vectorize across multiple\n   dimensions (array broadcasting) based on dimension names, not shape.\n-  Flexible split-apply-combine operations with groupby:\n   ``x.groupby('time.dayofyear').mean()``.\n-  Database like alignment based on coordinate labels that smoothly\n   handles missing values: ``x, y = xr.align(x, y, join='outer')``.\n-  Keep track of arbitrary metadata in the form of a Python dictionary:\n   ``x.attrs``.\n\nDocumentation\n-------------\n\nLearn more about xarray in its official documentation at https://xarray.pydata.org/\n\nContributing\n------------\n\nYou can find information about contributing to xarray at our `Contributing page <https://xarray.pydata.org/en/latest/contributing.html#>`_.\n\nGet in touch\n------------\n\n- Ask usage questions (\"How do I?\") on `StackOverflow`_.\n- Report bugs, suggest features or view the source code `on GitHub`_.\n- For less well defined questions or ideas, or to announce other projects of\n  interest to xarray users, use the `mailing list`_.\n\n.. _StackOverFlow: https://stackoverflow.com/questions/tagged/python-xarray\n.. _mailing list: https://groups.google.com/forum/#!forum/xarray\n.. _on GitHub: https://github.com/pydata/xarray\n\nNumFOCUS\n--------\n\n.. image:: https://numfocus.org/wp-content/uploads/2017/07/NumFocus_LRG.png\n   :scale: 25 %\n   :target: https://numfocus.org/\n\nXarray is a fiscally sponsored project of NumFOCUS_, a nonprofit dedicated\nto supporting the open source scientific computing community. If you like\nXarray and want to support our mission, please consider making a donation_\nto support our efforts.\n\n.. _donation: https://numfocus.salsalabs.org/donate-to-xarray/\n\nHistory\n-------\n\nxarray is an evolution of an internal tool developed at `The Climate\nCorporation`__. It was originally written by Climate Corp researchers Stephan\nHoyer, Alex Kleeman and Eugene Brevdo and was released as open source in\nMay 2014. The project was renamed from \"xray\" in January 2016. Xarray became a\nfiscally sponsored project of NumFOCUS_ in August 2018.\n\n__ http://climate.com/\n.. _NumFOCUS: https://numfocus.org\n\nLicense\n-------\n\nCopyright 2014-2019, xarray Developers\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nxarray bundles portions of pandas, NumPy and Seaborn, all of which are available\nunder a \"3-clause BSD\" license:\n- pandas: setup.py, xarray/util/print_versions.py\n- NumPy: xarray/core/npcompat.py\n- Seaborn: _determine_cmap_params in xarray/core/plot/utils.py\n\nxarray also bundles portions of CPython, which is available under the \"Python\nSoftware Foundation License\" in xarray/core/pycompat.py.\n\nxarray uses icons from the icomoon package (free version), which is\navailable under the \"CC BY 4.0\" license.\n\nThe full text of these licenses are included in the licenses directory.\n",
    "org": "pydata",
    "repo": "xarray",
    "number": 4629,
    "commit": "a41edc7bf5302f2ea327943c0c48c532b12009bc"
}