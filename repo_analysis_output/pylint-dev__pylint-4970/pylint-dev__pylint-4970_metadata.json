{
    "primary_language": "Python",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Python Projects**\n\n1. **Read the README**  \n   Always start by reading the project's README file on GitHub. It usually contains important instructions for installation, usage, and any project-specific details. Some projects include a `Dockerfile` script, which you can review and reuse as needed.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in a `requirements.txt` file. Ensure you have the required versions of Python and any other libraries/packages.  \n\n3. **Virtual Environment**  \n   It\u2019s a good practice to create a virtual environment for each Python project to avoid conflicts with system-wide packages. Use the command:  \n   ```sh\n   python3.X -m venv .venv  \n   ```  \n\n4. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files) and set them up accordingly.  \n\n5. **Build the Project (rare cases)**  \n   Some projects might require building before usage, especially if they include C extensions or require compiling assets.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Some projects include a `tox.ini` file, which allows you to run tests with `tox`. Install `tox` first using:  \n   ```sh\n   pip install tox  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a script, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is not necessary.  \n\n10. **Shell Compatibility**  \n   In some shells, the `source` command may not work. In such cases, replace `source` with just `.` (a single dot). For example:  \n   ```sh\n   . .venv/bin/activate  \n   ```  \n\n11. **Avoid Using Conda**  \n   Instead of Conda, prefer the following commands to set up your virtual environment:  \n   ```sh\n   python -m venv .venv  \n   . .venv/bin/activate  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yaml\nContent:\nname: CI\n\non:\n  push:\n    branches:\n      - main\n      - 2.*\n  pull_request: ~\n\nenv:\n  CACHE_VERSION: 3\n  DEFAULT_PYTHON: 3.6\n  PRE_COMMIT_CACHE: ~/.cache/pre-commit\n\njobs:\n  prepare-base:\n    name: Prepare base dependencies\n    runs-on: ubuntu-latest\n    outputs:\n      python-key: ${{ steps.generate-python-key.outputs.key }}\n      pre-commit-key: ${{ steps.generate-pre-commit-key.outputs.key }}\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n        with:\n          fetch-depth: 0\n      - name: Set up Python ${{ env.DEFAULT_PYTHON }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ env.DEFAULT_PYTHON }}\n      - name: Generate partial Python venv restore key\n        id: generate-python-key\n        run: >-\n          echo \"::set-output name=key::base-venv-${{ env.CACHE_VERSION }}-${{\n            hashFiles('setup.cfg', 'requirements_test.txt', 'requirements_test_min.txt')\n          }}\"\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key: >-\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            steps.generate-python-key.outputs.key }}\n          restore-keys: |\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-base-venv-${{ env.CACHE_VERSION }}-\n      - name: Create Python virtual environment\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          python -m venv venv\n          . venv/bin/activate\n          python -m pip install -U pip setuptools wheel\n          pip install -U -r requirements_test.txt\n      - name: Generate pre-commit restore key\n        id: generate-pre-commit-key\n        run: >-\n          echo \"::set-output name=key::pre-commit-${{ env.CACHE_VERSION }}-${{\n            hashFiles('.pre-commit-config.yaml') }}\"\n      - name: Restore pre-commit environment\n        id: cache-precommit\n        uses: actions/cache@v2.1.6\n        with:\n          path: ${{ env.PRE_COMMIT_CACHE }}\n          key: >-\n            ${{ runner.os }}-${{ steps.generate-pre-commit-key.outputs.key }}\n          restore-keys: |\n            ${{ runner.os }}-pre-commit-${{ env.CACHE_VERSION }}-\n      - name: Install pre-commit dependencies\n        if: steps.cache-precommit.outputs.cache-hit != 'true'\n        run: |\n          . venv/bin/activate\n          pre-commit install --install-hooks\n\n  formatting:\n    name: Run pre-commit checks\n    runs-on: ubuntu-latest\n    needs: prepare-base\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n      - name: Set up Python ${{ env.DEFAULT_PYTHON }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ env.DEFAULT_PYTHON }}\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key:\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            needs.prepare-base.outputs.python-key }}\n      - name: Fail job if Python cache restore failed\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore Python venv from cache\"\n          exit 1\n      - name: Restore pre-commit environment\n        id: cache-precommit\n        uses: actions/cache@v2.1.6\n        with:\n          path: ${{ env.PRE_COMMIT_CACHE }}\n          key: ${{ runner.os }}-${{ needs.prepare-base.outputs.pre-commit-key }}\n      - name: Fail job if pre-commit cache restore failed\n        if: steps.cache-precommit.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore pre-commit environment from cache\"\n          exit 1\n      - name: Run formatting check\n        run: |\n          . venv/bin/activate\n          pip install -e .\n          pre-commit run pylint --all-files\n\n  spelling:\n    name: Run spelling checks\n    runs-on: ubuntu-latest\n    needs: prepare-base\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n      - name: Set up Python ${{ env.DEFAULT_PYTHON }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ env.DEFAULT_PYTHON }}\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key:\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            needs.prepare-base.outputs.python-key }}\n      - name: Fail job if Python cache restore failed\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore Python venv from cache\"\n          exit 1\n      - name: Run spelling checks\n        run: |\n          . venv/bin/activate\n          pytest tests/ -k unittest_spelling\n\n  prepare-tests-linux:\n    name: Prepare tests for Python ${{ matrix.python-version }} (Linux)\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9, 3.10-dev]\n    outputs:\n      python-key: ${{ steps.generate-python-key.outputs.key }}\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n        with:\n          fetch-depth: 0\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Generate partial Python venv restore key\n        id: generate-python-key\n        run: >-\n          echo \"::set-output name=key::venv-${{ env.CACHE_VERSION }}-${{\n            hashFiles('setup.cfg', 'requirements_test.txt', 'requirements_test_min.txt')\n          }}\"\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key: >-\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            steps.generate-python-key.outputs.key }}\n          restore-keys: |\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{ env.CACHE_VERSION }}-\n      - name: Create Python virtual environment\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          python -m venv venv\n          . venv/bin/activate\n          python -m pip install -U pip setuptools wheel\n          pip install -U -r requirements_test.txt\n\n  pytest-linux:\n    name: Run tests Python ${{ matrix.python-version }} (Linux)\n    runs-on: ubuntu-latest\n    needs: prepare-tests-linux\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9, 3.10-dev]\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key:\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            needs.prepare-tests-linux.outputs.python-key }}\n      - name: Fail job if Python cache restore failed\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore Python venv from cache\"\n          exit 1\n      - name: Run pytest\n        run: |\n          . venv/bin/activate\n          pytest --benchmark-disable --cov --cov-report= tests/\n      - name: Upload coverage artifact\n        uses: actions/upload-artifact@v2.2.4\n        with:\n          name: coverage-${{ matrix.python-version }}\n          path: .coverage\n\n  coverage:\n    name: Process test coverage\n    runs-on: ubuntu-latest\n    needs: [\"prepare-tests-linux\", \"pytest-linux\"]\n    strategy:\n      matrix:\n        python-version: [3.8]\n    env:\n      COVERAGERC_FILE: .coveragerc\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key:\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            needs.prepare-tests-linux.outputs.python-key }}\n      - name: Fail job if Python cache restore failed\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore Python venv from cache\"\n          exit 1\n      - name: Download all coverage artifacts\n        uses: actions/download-artifact@v2.0.10\n      - name: Combine coverage results\n        run: |\n          . venv/bin/activate\n          coverage combine coverage*/.coverage\n          coverage report --rcfile=${{ env.COVERAGERC_FILE }}\n      - name: Upload coverage to Coveralls\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          . venv/bin/activate\n          coveralls --rcfile=${{ env.COVERAGERC_FILE }} --service=github\n\n  benchmark-linux:\n    name: Run benchmark tests Python ${{ matrix.python-version }} (Linux)\n    runs-on: ubuntu-latest\n    needs: prepare-tests-linux\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [3.8, 3.9]\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key:\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            needs.prepare-tests-linux.outputs.python-key }}\n      - name: Fail job if Python cache restore failed\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore Python venv from cache\"\n          exit 1\n      - name: Run pytest\n        run: |\n          . venv/bin/activate\n          pip install pygal\n          pip install -e .\n          pytest --exitfirst \\\n            --benchmark-only \\\n            --benchmark-autosave \\\n            --benchmark-save-data \\\n            --benchmark-group-by=\"group\"\n      - name: Create partial artifact name suffix\n        id: artifact-name-suffix\n        run: >-\n          echo \"::set-output name=datetime::\"$(date \"+%Y%m%d_%H%M\")\n      - name: Upload benchmark artifact\n        uses: actions/upload-artifact@v2.2.4\n        with:\n          name:\n            benchmark-${{ runner.os }}-${{ matrix.python-version }}_${{\n            steps.artifact-name-suffix.outputs.datetime }}\n          path: .benchmarks/\n\n  prepare-tests-windows:\n    name: Prepare tests for Python ${{ matrix.python-version }} (Windows)\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9, 3.10-dev]\n    outputs:\n      python-key: ${{ steps.generate-python-key.outputs.key }}\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n        with:\n          fetch-depth: 0\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Generate partial Python venv restore key\n        id: generate-python-key\n        run: >-\n          echo \"::set-output name=key::venv-${{ env.CACHE_VERSION }}-${{\n            hashFiles('setup.cfg', 'requirements_test_min.txt')\n          }}\"\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key: >-\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            steps.generate-python-key.outputs.key }}\n          restore-keys: |\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{ env.CACHE_VERSION }}-\n      - name: Create Python virtual environment\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          python -m venv venv\n          . venv\\\\Scripts\\\\activate\n          python -m pip install -U pip setuptools wheel\n          pip install -U -r requirements_test_min.txt\n\n  pytest-windows:\n    name: Run tests Python ${{ matrix.python-version }} (Windows)\n    runs-on: windows-latest\n    needs: prepare-tests-windows\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9, 3.10-dev]\n    steps:\n      - name: Set temp directory\n        run: echo \"TEMP=$env:USERPROFILE\\AppData\\Local\\Temp\" >> $env:GITHUB_ENV\n        # Workaround to set correct temp directory on Windows\n        # https://github.com/actions/virtual-environments/issues/712\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key:\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            needs.prepare-tests-windows.outputs.python-key }}\n      - name: Fail job if Python cache restore failed\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore Python venv from cache\"\n          exit 1\n      - name: Run pytest\n        run: |\n          . venv\\\\Scripts\\\\activate\n          pytest --benchmark-disable tests/\n\n  prepare-tests-pypy:\n    name: Prepare tests for Python ${{ matrix.python-version }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"pypy3\"]\n    outputs:\n      python-key: ${{ steps.generate-python-key.outputs.key }}\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n        with:\n          fetch-depth: 0\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Generate partial Python venv restore key\n        id: generate-python-key\n        run: >-\n          echo \"::set-output name=key::venv-${{ env.CACHE_VERSION }}-${{\n            hashFiles('setup.cfg', 'requirements_test_min.txt')\n          }}\"\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key: >-\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            steps.generate-python-key.outputs.key }}\n          restore-keys: |\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{ env.CACHE_VERSION }}-\n      - name: Create Python virtual environment\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          python -m venv venv\n          . venv/bin/activate\n          python -m pip install -U pip setuptools wheel\n          pip install -U -r requirements_test_min.txt\n\n  pytest-pypy:\n    name: Run tests Python ${{ matrix.python-version }}\n    runs-on: ubuntu-latest\n    needs: prepare-tests-pypy\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [\"pypy3\"]\n    steps:\n      - name: Check out code from GitHub\n        uses: actions/checkout@v2.3.4\n      - name: Set up Python ${{ matrix.python-version }}\n        id: python\n        uses: actions/setup-python@v2.2.2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Restore Python virtual environment\n        id: cache-venv\n        uses: actions/cache@v2.1.6\n        with:\n          path: venv\n          key:\n            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{\n            needs.prepare-tests-pypy.outputs.python-key }}\n      - name: Fail job if Python cache restore failed\n        if: steps.cache-venv.outputs.cache-hit != 'true'\n        run: |\n          echo \"Failed to restore Python venv from cache\"\n          exit 1\n      - name: Run pytest\n        run: |\n          . venv/bin/activate\n          pytest --benchmark-disable tests/\n",
    "readme": "\nREADME for Pylint - https://pylint.pycqa.org/\n=============================================\n\n.. image:: https://github.com/PyCQA/pylint/actions/workflows/ci.yaml/badge.svg?branch=main\n    :target: https://github.com/PyCQA/pylint/actions\n\n.. image:: https://coveralls.io/repos/github/PyCQA/pylint/badge.svg?branch=main\n    :target: https://coveralls.io/github/PyCQA/pylint?branch=main\n\n\n.. image:: https://img.shields.io/pypi/v/pylint.svg\n    :alt: Pypi Package version\n    :target: https://pypi.python.org/pypi/pylint\n\n.. image:: https://readthedocs.org/projects/pylint/badge/?version=latest\n    :target: https://pylint.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n.. image:: https://results.pre-commit.ci/badge/github/PyCQA/pylint/main.svg\n   :target: https://results.pre-commit.ci/latest/github/PyCQA/pylint/main\n   :alt: pre-commit.ci status\n\n.. |tideliftlogo| image:: https://raw.githubusercontent.com/PyCQA/pylint/main/doc/media/Tidelift_Logos_RGB_Tidelift_Shorthand_On-White.png\n   :width: 75\n   :height: 60\n   :alt: Tidelift\n\n.. list-table::\n   :widths: 10 100\n\n   * - |tideliftlogo|\n     - Professional support for pylint is available as part of the `Tidelift\n       Subscription`_.  Tidelift gives software development teams a single source for\n       purchasing and maintaining their software, with professional grade assurances\n       from the experts who know it best, while seamlessly integrating with existing\n       tools.\n\n.. _Tidelift Subscription: https://tidelift.com/subscription/pkg/pypi-pylint?utm_source=pypi-pylint&utm_medium=referral&utm_campaign=readme\n\n\n======\nPylint\n======\n\n**It's not just a linter that annoys you!**\n\nPylint is a Python static code analysis tool which looks for programming errors,\nhelps enforcing a coding standard, sniffs for code smells and offers simple refactoring\nsuggestions.\n\nIt's highly configurable, having special pragmas to control its errors and warnings\nfrom within your code, as well as from an extensive configuration file.\nIt is also possible to write your own plugins for adding your own checks or for\nextending pylint in one way or another.\n\nIt's a free software distributed under the GNU General Public Licence unless\notherwise specified.\n\nDevelopment is hosted on GitHub: https://github.com/PyCQA/pylint/\n\nYou can use the code-quality@python.org mailing list to discuss about\nPylint. Subscribe at https://mail.python.org/mailman/listinfo/code-quality/\nor read the archives at https://mail.python.org/pipermail/code-quality/\n\nPull requests are amazing and most welcome.\n\nInstall\n-------\n\nPylint can be simply installed by running::\n\n    pip install pylint\n\nIf you are using Python 3.6+, upgrade to get full support for your version::\n\n    pip install pylint --upgrade\n\nIf you want to install from a source distribution, extract the tarball and run\nthe following command ::\n\n    python setup.py install\n\n\nDo make sure to do the same for astroid, which is used internally by pylint.\n\nFor debian and rpm packages, use your usual tools according to your Linux distribution.\n\nMore information about installation and available distribution format\ncan be found here_.\n\nDocumentation\n-------------\n\nThe documentation lives at https://pylint.pycqa.org/.\n\nPylint is shipped with following additional commands:\n\n* pyreverse: an UML diagram generator\n* symilar: an independent similarities checker\n* epylint: Emacs and Flymake compatible Pylint\n\n\nTesting\n-------\n\nWe use tox_ and pytest-benchmark_ for running the test suite. You should be able to install it with::\n\n    pip install tox pytest pytest-benchmark\n\n\nTo run the test suite for a particular Python version, you can do::\n\n    tox -e py37\n\n\nTo run individual tests with ``tox``, you can do::\n\n    tox -e py37 -- -k name_of_the_test\n\n\nWe use pytest_ for testing ``pylint``, which you can use without using ``tox`` for a faster development cycle.\n\nIf you want to run tests on a specific portion of the code with pytest_, (pytest-cov_) and your local python version::\n\n    # ( pip install pytest-cov )\n    # Everything:\n    python3 -m pytest tests/\n    # Everything in tests/message with coverage for the relevant code:\n    python3 -m pytest tests/message/ --cov=pylint.message\n    coverage html\n    # Only the functional test \"missing_kwoa_py3\":\n    python3 -m pytest \"tests/test_functional.py::test_functional[missing_kwoa_py3]\"\n\n\nDo not forget to clone astroid_ and install the last version::\n\n\n    git clone https://github.com/PyCQA/astroid.git\n\n    # From source\n    python3 astroid/setup.py build sdist\n    pip3 install astroid/dist/astroid*.tar.gz\n\n    # Using an editable installation\n    cd astroid\n    python3 -m pip install -e .\n\n\nFor more detailed information, check the documentation.\n\n.. _here: https://pylint.pycqa.org/en/latest/user_guide/installation.html\n.. _tox: https://tox.readthedocs.io/en/latest/\n.. _pytest: https://docs.pytest.org/en/latest/\n.. _pytest-benchmark: https://pytest-benchmark.readthedocs.io/en/latest/index.html\n.. _pytest-cov: https://pypi.org/project/pytest-cov/\n.. _astroid: https://github.com/PyCQA/astroid\n\nLicense\n-------\n\npylint is, with a few exceptions listed below, `GPLv2 <https://github.com/PyCQA/pylint/blob/main/LICENSE>`_.\n\nThe icon files are licensed under the `CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0/>`_ license:\n\n- `doc/logo.png <https://raw.githubusercontent.com/PyCQA/pylint/main/doc/logo.png>`_\n- `doc/logo.svg <https://raw.githubusercontent.com/PyCQA/pylint/main/doc/logo.svg>`_\n"
}