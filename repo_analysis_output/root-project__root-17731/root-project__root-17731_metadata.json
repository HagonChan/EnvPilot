{
    "primary_language": "C++",
    "language_guidelines": "# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: root-docs-ci.yml\nContent:\nname: 'ROOT Docs CI'\n\non:\n\n  # Allows nightly builds to trigger one run for each branch easily, by\n  # providing the relevant branch as \"default\" value here:\n  workflow_call:\n    inputs:\n      incremental:\n        type: boolean\n        default: true\n\njobs:\n  build-docs:\n    if: github.repository_owner == 'root-project'\n\n    runs-on:\n      - self-hosted\n      - linux\n      - x64\n\n    env:\n      PLATFORM: alma9\n      DOC_DIR: master\n      DOC_LOCATION: /github/home\n      BASE_REF: master\n      WEB_DIR_NAME: master\n      TAR_NAME: htmlmaster.tar\n\n    permissions:\n      contents: read\n\n    container:\n      image: registry.cern.ch/root-ci/alma9:buildready # ALSO UPDATE BELOW!\n      options: '--security-opt label=disable --rm --name rootdoc' # ALSO UPDATE BELOW!\n      env:\n        OS_APPLICATION_CREDENTIAL_ID: '7f5b64a265244623a3a933308569bdba'\n        OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}\n        OS_AUTH_TYPE: 'v3applicationcredential'\n        OS_AUTH_URL: 'https://keystone.cern.ch/v3'\n        OS_IDENTITY_API_VERSION: 3\n        OS_INTERFACE: 'public'\n        OS_REGION_NAME: 'cern'\n        PYTHONUNBUFFERED: true\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v4\n      with:\n        fetch-depth: 0\n\n    - name: Set up Python Virtual Env\n      # if the `if` expr is false, `if` still has exit code 0.\n      # if the `if` block is entered, the block's exit code becomes the exit\n      # code of the `if`.\n      run: 'if [ -d /py-venv/ROOT-CI/bin/ ]; then . /py-venv/ROOT-CI/bin/activate && echo PATH=$PATH >> $GITHUB_ENV; fi'\n\n    - name: Set up directory name and tar filenames\n      run: |\n        echo TAR_NAME=html${BASE_REF}.tar >> $GITHUB_ENV\n        echo DOCDIR_NAME=${BASE_REF} >> $GITHUB_ENV\n\n    # TODO: install latest versions in image on root-ci-images\n    - name: Install Doxygen 1.10.0\n      run : |\n        mkdir -p ${{ github.workspace }}/doxygen\n        curl -L https://github.com/doxygen/doxygen/releases/download/Release_1_10_0/doxygen-1.10.0.linux.bin.tar.gz | tar -xz -C ${{ github.workspace }}/doxygen/ --strip-components=1\n        echo PATH=$PATH:${{ github.workspace }}/doxygen/bin >> $GITHUB_ENV\n#         git clone --branch Release_1_12_0 https://github.com/doxygen/doxygen.git\n#         cd doxygen\n#         mkdir build\n#         cd build\n#         cmake ..\n#         make -j$(nproc)\n#         echo PATH=$PATH:${{ github.workspace }}/doxygen/build/bin >> $GITHUB_ENV\n#         cd ${{ github.workspace }}\n#         doxygen --version\n\n    - name: Install qhelpgenerator-qt5\n      run: |\n        dnf upgrade -y\n        dnf install -y qt5-doctools\n        which qhelpgenerator-qt5\n\n    - name: Apply option overrides\n      env:\n        OVERRIDES: \"testing=Off roottest=Off\"\n        CONFIGFILE: '.github/workflows/root-ci-config/buildconfig/alma9.txt'\n      shell: bash\n      run: |\n        set -x\n        echo '' >> \"$CONFIGFILE\"\n        for ENTRY in $OVERRIDES; do\n            KEY=$( echo \"$ENTRY\" | cut -d '=' -f 1 )\n            # Add entry to file if not exists, otherwise replace\n            if grep -q \"$KEY=\" \"$CONFIGFILE\"; then\n                sed -i \"s/$KEY=.*\\$/$ENTRY/\" \"$CONFIGFILE\"\n            else\n                echo \"$ENTRY\" >> \"$CONFIGFILE\"\n            fi\n        done\n        cat \"$CONFIGFILE\" || true\n\n    - name: Build ROOT - Workflow Dispatch\n      if:   github.event_name == 'workflow_dispatch'\n      run: \".github/workflows/root-ci-config/build_root.py\n                  --buildtype      Release\n                  --platform       ${{ env.PLATFORM }}\n                  --incremental    ${{ inputs.incremental }}\n                  --base_ref       ${BASE_REF}\n                  --head_ref       ${BASE_REF}\n                  --binaries       false\n                  --repository     ${{ github.server_url }}/${{ github.repository }}\"\n\n    - name: Build ROOT - Schedule\n      if:   github.event_name == 'schedule'\n      run: \".github/workflows/root-ci-config/build_root.py\n                  --buildtype      Release\n                  --platform       ${{ env.PLATFORM }}\n                  --incremental    ${{ inputs.incremental }}\n                  --base_ref       ${BASE_REF}\n                  --head_ref       ${BASE_REF}\n                  --binaries       false\n                  --repository     ${{ github.server_url }}/${{ github.repository }}\"\n\n    - name: Run Doxygen\n      working-directory: ${{ env.DOC_LOCATION }}\n      shell: bash\n      run: |\n        source ROOT-CI/build/bin/thisroot.sh\n        export DOXYGEN_OUTPUT_DIRECTORY=/github/home/${DOC_DIR}\n        cd ROOT-CI/src/documentation/doxygen\n        make -j `nproc --all`\n\n    - name: Create documentation archives\n      working-directory: ${{ env.DOC_LOCATION }}\n      shell: bash\n      run: |\n        pwd\n        ls -l\n        echo ${DOC_DIR}\n        echo ${TAR_NAME}\n        ls -l ${DOC_DIR}\n        tar cf ${TAR_NAME} ${DOC_DIR}\n        gzip ${TAR_NAME}\n        ls -l\n\n    #Upload to GitHub as an artifact\n    - name: Upload tar file for GH\n      if:   ${{ !cancelled() }}\n      uses: actions/upload-artifact@v4\n      with:\n        name: ${{env.TAR_NAME}}.gz\n        path: ${{env.DOC_LOCATION}}/${{env.TAR_NAME}}.gz\n        if-no-files-found: error\n\n    - name: Install AWS CLI\n      run: |\n        python -m pip install --upgrade pip\n        pip install awscli==1.36.40\n        aws configure set default.s3.max_concurrent_requests 128\n\n    - name: Sync documentation to S3\n      working-directory: ${{ env.DOC_LOCATION }}\n      env:\n        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        AWS_ENDPOINT_URL: https://s3.cern.ch/\n\n      run: |\n        pwd\n        ls -l\n        aws s3 sync ${DOC_DIR}/html/ s3://root/doc/${WEB_DIR_NAME}/\n        rm -rf ${DOC_DIR}/html\n        aws s3 sync ${DOC_DIR}/ s3://root/doc/${WEB_DIR_NAME}/\n        aws s3 cp ${TAR_NAME}.gz s3://root/download/\n\nfile: root-ci.yml\nContent:\nname: 'ROOT CI'\n\non:\n  # https://github.com/root-project/root/pull/12112#issuecomment-1411004278\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - 'doc/**'\n      - 'documentation/**'\n\n  push:\n    branches:\n      - 'master'\n      - 'v*-*-*-patches'\n\n  # Allows nightly builds to trigger one run for each branch easily, by\n  # providing the relevant branch as \"default\" value here:\n  workflow_call:\n    inputs:\n      head_ref:\n        type: string\n        default: master\n      base_ref:\n        type: string\n        default: master\n      ref_name:\n        type: string\n        default: master\n\n  # Enables manual start of workflow\n  workflow_dispatch:\n    inputs:\n      head_ref:\n        description: rebase from ...\n        type: string\n        required: true\n        default: master\n      base_ref:\n        description: ... to ... (can have same value)\n        type: string\n        required: true\n        default: master\n      incremental:\n        description: 'Do incremental build'\n        type: boolean\n        required: true\n        default: true\n      binaries:\n        description: Create binary packages and upload them as artifacts\n        type: boolean\n        required: true\n        default: false\n      buildtype:\n        description: The CMAKE_BUILD_TYPE to use for non-Windows.\n        type: choice\n        options:\n        - Debug\n        - RelWithDebInfo\n        - Release\n        - MinSizeRel\n        default: Debug\n        required: true\n\nenv:\n  PYTHONUNBUFFERED: true\n  OS_APPLICATION_CREDENTIAL_ID: '7f5b64a265244623a3a933308569bdba'\n  OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}\n  OS_AUTH_TYPE: 'v3applicationcredential'\n  OS_AUTH_URL: 'https://keystone.cern.ch/v3'\n  OS_IDENTITY_API_VERSION: 3\n  OS_INTERFACE: 'public'\n  OS_REGION_NAME: 'cern'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  build-macos:\n    # For any event that is not a PR, the CI will always run. In PRs, the CI\n    # can be skipped if the tag [skip-ci] or [skip ci] is written in the title.\n    if: |\n        (github.repository_owner == 'root-project' && github.event_name != 'pull_request') ||\n        (github.event_name == 'pull_request' && !(contains(github.event.pull_request.title, '[skip-ci]') || contains(github.event.pull_request.title, '[skip ci]')))\n\n    permissions:\n      contents: read\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Specify platform + arch + (optional) build option overrides\n        #\n        # Common configs: {Release,Debug,RelWithDebInfo)\n        # Build options: https://root.cern/install/build_from_source/#all-build-options\n        include:\n          - platform: mac13   \n            arch: ARM64\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"builtin_zlib=ON\"]\n          - platform: mac14\n            arch: X64\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_CXX_STANDARD=20\"]\n          - platform: mac15\n            arch: ARM64\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_CXX_STANDARD=20\"]\n          - platform: mac-beta\n            arch: ARM64\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_CXX_STANDARD=20\"]\n\n    runs-on: # Using '[self-hosted, ..., ...]' does not work for some reason :)\n      - self-hosted\n      - macOS\n      - ${{ matrix.arch }}\n      - ${{ matrix.platform }}\n\n    name: |\n      ${{ matrix.platform }} ${{ matrix.arch }} \n      ${{ (github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' && join( matrix.overrides, ', ' )) || '' }}\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ inputs.ref_name }}\n\n      - name: Apply option overrides from matrix for this job for non-release builds\n        if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' && matrix.overrides != NaN }}\n        env:\n          OVERRIDES: ${{ join( matrix.overrides, ' ') }}\n          CONFIGFILE: '.github/workflows/root-ci-config/buildconfig/${{ matrix.platform }}.txt'\n        shell: bash\n        run: |\n          set -x\n\n          echo '' >> \"$CONFIGFILE\"\n\n          for ENTRY in $OVERRIDES; do\n              KEY=$( echo \"$ENTRY\" | cut -d '=' -f 1 )\n\n              # Add entry to file if not exists, otherwise replace\n\n              if grep -q \"$KEY=\" \"$CONFIGFILE\"; then\n                  sed -i \"s/$KEY=.*\\$/$ENTRY/\" \"$CONFIGFILE\"\n              else\n                  echo \"$ENTRY\" >> \"$CONFIGFILE\"\n              fi\n          done\n\n          cat \"$CONFIGFILE\" || true\n\n      - uses: root-project/gcc-problem-matcher-improved@main\n        with:\n          build-directory: /Users/sftnight/ROOT-CI/src/\n\n      - name: Pull Request Build\n        if: github.event_name == 'pull_request'\n        env:\n          INCREMENTAL: ${{ !contains(github.event.pull_request.labels.*.name, 'clean build') }}\n          GITHUB_PR_ORIGIN: ${{ github.event.pull_request.head.repo.clone_url }}\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype       RelWithDebInfo\n                    --incremental     $INCREMENTAL\n                    --base_ref        ${{ github.base_ref }}\n                    --sha             ${{ github.sha }}\n                    --pull_repository ${{ github.event.pull_request.head.repo.clone_url }}\n                    --head_ref        refs/pull/${{ github.event.pull_request.number }}/head:${{ github.event.pull_request.head.ref }}\n                    --head_sha        ${{ github.event.pull_request.head.sha }}\n                    --repository      ${{ github.server_url }}/${{ github.repository }}\n                    --platform        ${{ matrix.platform }}\"\n\n      - name: Workflow dispatch\n        if:   github.event_name == 'workflow_dispatch'\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      ${{ inputs.buildtype }}\n                    --platform       ${{ matrix.platform }}\n                    --incremental    ${{ inputs.incremental }}\n                    --base_ref       ${{ inputs.base_ref }}\n                    --head_ref       ${{ inputs.head_ref }}\n                    --binaries       ${{ inputs.binaries }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\"\n\n      - name: Nightly build\n        if:   github.event_name == 'schedule'\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      Release\n                    --platform       ${{ matrix.platform }}\n                    --incremental    false\n                    --binaries       true\n                    --base_ref       ${{ inputs.ref_name }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\"\n\n      - name: Update build cache after push to release branch\n        if:   github.event_name == 'push'\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      RelWithDebInfo\n                    --platform       ${{ matrix.platform }}\n                    --incremental    false\n                    --base_ref       ${{ github.ref_name }}\n                    --binaries       ${{ startsWith(github.ref, 'refs/tags/') }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\"\n\n      - name: Upload test results\n        if:   ${{ !cancelled() }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: Test Results ${{ matrix.platform }} ${{ matrix.arch }}\n          path: /Users/sftnight/ROOT-CI/build/TestResults.xml\n\n      - name: Upload binaries\n        if:   ${{ !cancelled() && (inputs.binaries || github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')) }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: Binaries ${{ matrix.platform }} ${{ matrix.arch }}\n          path: /Users/sftnight/ROOT-CI/packages/root_v*\n          if-no-files-found: error\n\n\n  build-windows:\n    # For any event that is not a PR, the CI will always run. In PRs, the CI\n    # can be skipped if the tag [skip-ci] or [skip ci] is written in the title.\n    if: |\n        (github.repository_owner == 'root-project' && github.event_name != 'pull_request') ||\n        (github.event_name == 'pull_request' && !(contains(github.event.pull_request.title, '[skip-ci]') || contains(github.event.pull_request.title, '[skip ci]')))\n\n    permissions:\n      contents: read\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # We have to get a bit creative here: GitHub actions only allows to\n        # exclude partial matches, so we artificially add the event_name as\n        # a \"constant variable\" that we can use to remove the Debug entries\n        # for pull requests and on branch pushes. This is further complicated\n        # by the fact that event_name is a string, but we need an array. So\n        # we construct a JSON string that we can then convert into an array.\n        event_name: ${{ fromJSON(format('[\"{0}\"]', github.event_name)) }}\n        config: [\"RelWithDebInfo\", \"Release\"]\n        target_arch: [x64, x86]\n        exclude:\n          - event_name: pull_request\n            config: RelWithDebInfo\n          - event_name: push\n            config: RelWithDebInfo\n          # This is this platform is subject to timeouts when building from\n          # scratch.\n          #- target_arch: x86\n          #  config: RelWithDebInfo\n\n    name: Windows 10 ${{ matrix.target_arch }} ${{ matrix.config }}\n\n    runs-on: # Using '[self-hosted, windows, ${{ matrix.arch }}]' does not work for some reason :)\n      - self-hosted\n      - windows\n      - x64 # machine host, not build target\n      - target${{ matrix.target_arch }}\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ inputs.ref_name }}\n\n      - name: Pull Request Build\n        if: github.event_name == 'pull_request'\n        env:\n          INCREMENTAL: ${{ !contains(github.event.pull_request.labels.*.name, 'clean build') }}\n          GITHUB_PR_ORIGIN: ${{ github.event.pull_request.head.repo.clone_url }}\n        shell: cmd\n        run: \"C:\\\\setenv.bat ${{ matrix.target_arch }} &&\n              python .github/workflows/root-ci-config/build_root.py\n                    --buildtype       ${{ matrix.config }}\n                    --platform        windows10\n                    --incremental     $INCREMENTAL\n                    --base_ref        ${{ github.base_ref }}\n                    --sha             ${{ github.sha }}\n                    --pull_repository ${{ github.event.pull_request.head.repo.clone_url }}\n                    --head_ref        refs/pull/${{ github.event.pull_request.number }}/head:${{ github.event.pull_request.head.ref }}\n                    --head_sha        ${{ github.event.pull_request.head.sha }}\n                    --repository      ${{ github.server_url }}/${{ github.repository }}\n                    --architecture    ${{ matrix.target_arch }}\"\n\n      - name: Workflow dispatch/call\n        if:   github.event_name == 'workflow_dispatch'\n        shell: cmd\n        run: \"C:\\\\setenv.bat ${{ matrix.target_arch }} &&\n              python .github/workflows/root-ci-config/build_root.py\n                    --buildtype    ${{ matrix.config }}\n                    --platform     windows10\n                    --incremental  ${{ inputs.incremental }}\n                    --base_ref     ${{ inputs.base_ref }}\n                    --head_ref     ${{ inputs.head_ref }}\n                    --binaries     ${{ inputs.binaries }}\n                    --repository   ${{ github.server_url }}/${{ github.repository }}\n                    --architecture ${{ matrix.target_arch }}\"\n\n      - name: Nightly build\n        if:   github.event_name == 'schedule'\n        shell: cmd\n        run: \"C:\\\\setenv.bat ${{ matrix.target_arch }} &&\n              python .github/workflows/root-ci-config/build_root.py\n                    --buildtype    ${{ matrix.config }}\n                    --platform     windows10\n                    --incremental  false\n                    --binaries     true\n                    --base_ref     ${{ inputs.ref_name }}\n                    --repository   ${{ github.server_url }}/${{ github.repository }}\n                    --architecture ${{ matrix.target_arch }}\"\n\n      - name: Update build cache after push to release branch\n        if:   github.event_name == 'push'\n        shell: cmd\n        run: \"C:\\\\setenv.bat ${{ matrix.target_arch }} &&\n              python .github/workflows/root-ci-config/build_root.py\n                    --buildtype    ${{ matrix.config }}\n                    --platform     windows10\n                    --incremental  false\n                    --base_ref     ${{ github.ref_name }}\n                    --binaries     ${{ startsWith(github.ref, 'refs/tags/') }}\n                    --repository   ${{ github.server_url }}/${{ github.repository }}\n                    --architecture ${{ matrix.target_arch }}\"\n\n      - name: Upload test results\n        if:   ${{ !cancelled() }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: Test Results Windows ${{ matrix.target_arch }} ${{ matrix.config }}\n          path: C:/ROOT-CI/build/TestResults.xml\n\n      - name: Upload binaries\n        if:   ${{ !cancelled() && (inputs.binaries || github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')) }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: Binaries ${{ matrix.target_arch }} ${{ matrix.config }}\n          path: C:/ROOT-CI/packages/root_v*\n          if-no-files-found: error\n\n\n  build-linux:\n    # For any event that is not a PR, the CI will always run. In PRs, the CI\n    # can be skipped if the tag [skip-ci] or [skip ci] is written in the title.\n    if: |\n        (github.repository_owner == 'root-project' && github.event_name != 'pull_request') ||\n        (github.event_name == 'pull_request' && !(contains(github.event.pull_request.title, '[skip-ci]') || contains(github.event.pull_request.title, '[skip ci]')))\n\n    permissions:\n      contents: read\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Specify image + (optional) build option overrides\n        #\n        # Available images: https://github.com/root-project/root-ci-images\n        # Common configs: {Release,Debug,RelWithDebInfo)\n        # Build options: https://root.cern/install/build_from_source/#all-build-options\n        include:\n          - image: fedora40\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_CXX_STANDARD=20\"]\n          - image: fedora41\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\"]\n          - image: alma8\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\"]\n          - image: alma9\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_BUILD_TYPE=Debug\"]\n          - image: ubuntu22\n            overrides: [\"imt=Off\", \"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_BUILD_TYPE=Debug\"]\n          - image: ubuntu2404\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_BUILD_TYPE=Debug\"]\n          - image: ubuntu2410\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_BUILD_TYPE=Debug\"]\n          - image: debian125\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_CXX_STANDARD=20\"]\n          # Special builds\n          - image: alma9\n            is_special: true\n            property: modules_off\n            overrides: [\"runtime_cxxmodules=Off\"]\n          - image: alma9\n            is_special: true\n            property: march_native\n            overrides: [\"CMAKE_BUILD_TYPE=RelWithDebInfo\", \"CMAKE_CXX_FLAGS=-march=native\", \"CMAKE_C_FLAGS=-march=native\", \"fortran=OFF\"]\n          - image: alma9\n            is_special: true\n            property: arm64\n            overrides: [\"CMAKE_BUILD_TYPE=RelWithDebInfo\"]\n            architecture: ARM64\n          - image: alma9-clang\n            is_special: true\n            property: clang\n            overrides: [\"LLVM_ENABLE_ASSERTIONS=On\", \"CMAKE_C_COMPILER=clang\", \"CMAKE_CXX_COMPILER=clang++\"]\n          # Disable GPU builds until the DNS problem is solved  \n          # - image: ubuntu2404-cuda\n          #   is_special: true\n          #   property: gpu\n          #   extra-runs-on: gpu\n\n    runs-on:\n      - self-hosted\n      - linux\n      - ${{ matrix.architecture == null && 'x64' || matrix.architecture }}\n      - ${{ matrix.extra-runs-on == null && 'cpu' || matrix.extra-runs-on }}\n\n    name: |\n      ${{ matrix.image }} ${{ matrix.property }}\n      ${{ (github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' && join( matrix.overrides, ', ' )) || '' }}\n\n    container:\n      image: registry.cern.ch/root-ci/${{ matrix.image }}:buildready # KEEP IN SYNC WITH env key below\n      options: --security-opt label=disable --rm ${{ matrix.property == 'gpu' && '--device nvidia.com/gpu=all' || '' }} # KEEP IN SYNC WITH env key below\n      volumes:\n        - ${{ matrix.image }}_ccache_volume:/github/home/.cache/ccache\n      env:\n        OS_APPLICATION_CREDENTIAL_ID: '7f5b64a265244623a3a933308569bdba'\n        OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}\n        OS_AUTH_TYPE: 'v3applicationcredential'\n        OS_AUTH_URL: 'https://keystone.cern.ch/v3'\n        OS_IDENTITY_API_VERSION: 3\n        OS_INTERFACE: 'public'\n        OS_REGION_NAME: 'cern'\n        PYTHONUNBUFFERED: true\n        CONTAINER_IMAGE: \"registry.cern.ch/root-ci/${{ matrix.image }}:buildready\" #KEEP IN SYNC WITH ABOVE\n        CONTAINER_OPTIONS: \"--security-opt label=disable --rm ${{ matrix.property == 'gpu' && '--device nvidia.com/gpu=all' || '' }}\" #KEEP IN SYNC WITH ABOVE\n\n    steps:\n      - name: Configure large ccache\n        if: ${{ matrix.is_special }}\n        run: |\n          ccache -o max_size=5G\n          ccache -p || true\n          ccache -s || true\n\n      - name: Configure small ccache\n        if: ${{ !matrix.is_special }}\n        run: |\n          ccache -o max_size=1.5G\n          ccache -p || true\n          ccache -s || true\n\n      - name: Set up Python Virtual Env\n        # if the `if` expr is false, `if` still has exit code 0.\n        # if the `if` block is entered, the block's exit code becomes the exit\n        # code of the `if`.\n        run: 'if [ -d /py-venv/ROOT-CI/bin/ ]; then . /py-venv/ROOT-CI/bin/activate && echo PATH=$PATH >> $GITHUB_ENV; fi'\n\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ inputs.ref_name }}\n\n      - name: Dump GitHub context\n        env:\n          GITHUB_CONTEXT: ${{ toJSON(github) }}\n          JOB_CONTEXT: ${{ toJSON(job) }}\n          ENV_CONTEXT: ${{ toJSON(env) }}\n        run: |\n          echo \"$GITHUB_CONTEXT\"\n          echo \"--------------------------\"\n          echo \"$JOB_CONTEXT\"\n          echo \"--------------------------\"\n          echo \"$ENV_CONTEXT\"\n\n      - name: Print debug info\n        run:  'printf \"%s@%s\\\\n\" \"$(whoami)\" \"$(hostname)\";\n               ls -la\n              '\n\n      - name: Apply option overrides from matrix for this job for all builds except non-special nightlies and releases\n        if: ${{ ( github.event_name != 'schedule' || matrix.is_special) && github.event_name != 'workflow_dispatch' && matrix.overrides != NaN }}\n        env:\n          OVERRIDES: ${{ join( matrix.overrides, ' ') }}\n          CONFIGFILE: '.github/workflows/root-ci-config/buildconfig/${{ matrix.image }}.txt'\n        shell: bash\n        run: |\n          set -x\n\n          echo '' >> \"$CONFIGFILE\"\n\n          for ENTRY in $OVERRIDES; do\n              KEY=$( echo \"$ENTRY\" | cut -d '=' -f 1 )\n\n              # Add entry to file if not exists, otherwise replace\n\n              if grep -q \"$KEY=\" \"$CONFIGFILE\"; then\n                  sed -i \"s/$KEY=.*\\$/$ENTRY/\" \"$CONFIGFILE\"\n              else\n                  echo \"$ENTRY\" >> \"$CONFIGFILE\"\n              fi\n          done\n\n          cat \"$CONFIGFILE\" || true\n\n      - uses: root-project/gcc-problem-matcher-improved@main\n        with:\n          build-directory: /github/home/ROOT-CI/src/\n\n      - name: Pull Request Build\n        if:   ${{ github.event_name == 'pull_request' }}\n        env:\n          INCREMENTAL: ${{ !contains(github.event.pull_request.labels.*.name, 'clean build') }}\n          GITHUB_PR_ORIGIN: ${{ github.event.pull_request.head.repo.clone_url }}\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype       RelWithDebInfo\n                    --platform        ${{ matrix.image }}\n                    --dockeropts      \\\"$CONTAINER_OPTIONS\\\"\n                    --incremental     $INCREMENTAL\n                    --base_ref        ${{ github.base_ref }}\n                    --sha             ${{ github.sha }}\n                    --pull_repository ${{ github.event.pull_request.head.repo.clone_url }}\n                    --head_ref        refs/pull/${{ github.event.pull_request.number }}/head:${{ github.event.pull_request.head.ref }}\n                    --head_sha        ${{ github.event.pull_request.head.sha }}\n                    --repository      ${{ github.server_url }}/${{ github.repository }}\n              \"\n\n      - name: Workflow dispatch\n        if:   ${{ github.event_name == 'workflow_dispatch' && !matrix.is_special }}\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      ${{ inputs.buildtype }}\n                    --platform       ${{ matrix.image }}\n                    --incremental    ${{ inputs.incremental }}\n                    --base_ref       ${{ inputs.base_ref }}\n                    --head_ref       ${{ inputs.head_ref }}\n                    --binaries       ${{ inputs.binaries }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\n              \"\n\n      - name: Nightly build\n        if:   github.event_name == 'schedule'\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      Release\n                    --platform       ${{ matrix.image }}\n                    --incremental    false\n                    --binaries       true\n                    --base_ref       ${{ inputs.ref_name }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\n              \"\n\n      - name: Update build cache after push to release branch\n        if:   github.event_name == 'push'\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      RelWithDebInfo\n                    --platform       ${{ matrix.image }}\n                    --incremental    false\n                    --base_ref       ${{ github.ref_name }}\n                    --binaries       ${{ startsWith(github.ref, 'refs/tags/') }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\n              \"\n\n      - name: Upload test results\n        if:   ${{ !cancelled() }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: Test Results ${{ matrix.image }} ${{ matrix.property }}\n          path: /github/home/ROOT-CI/build/TestResults.xml\n\n      - name: Upload binaries\n        if:   ${{ !cancelled() && (inputs.binaries || github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')) }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: Binaries ${{ matrix.image }} ${{ matrix.property }}\n          path: /github/home/ROOT-CI/packages/root_v*\n          if-no-files-found: error\n\n      - name: ccache info (post)\n        run: |\n          ccache -s || true\n\n  event_file:\n    # For any event that is not a PR, the CI will always run. In PRs, the CI\n    # can be skipped if the tag [skip-ci] or [skip ci] is written in the title.\n    if: |\n        (github.repository_owner == 'root-project' && github.event_name != 'pull_request') ||\n        (github.event_name == 'pull_request' && !(contains(github.event.pull_request.title, '[skip-ci]') || contains(github.event.pull_request.title, '[skip ci]')))\n\n    name: \"Upload Event Payload\"\n    runs-on: ubuntu-latest\n    steps:\n    - name: Upload\n      uses: actions/upload-artifact@v4\n      with:\n        name: Event File\n        path: ${{ github.event_path }}\n\nfile: test-coverage.yml\nContent:\n\nname: 'Test Coverage'\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\n  # https://github.com/root-project/root/pull/12112#issuecomment-1411004278\n  # DISABLED: takes 4 hours! Might clang-coverage be a solution?\n  #pull_request:\n  #  branches:\n  #    - 'master'\n  #  paths-ignore:\n  #    - 'doc/**'\n  #    - 'documentation/**'\n\n  workflow_call:\n    inputs:\n      head_ref:\n        type: string\n        required: true\n        default: master\n      base_ref:\n        type: string\n        required: true\n        default: master\n\n  # Enables manual start of workflow\n  workflow_dispatch:\n    inputs:\n      head_ref:\n        description: rebase from ...\n        type: string\n        required: true\n        default: master\n      base_ref:\n        description: ... to ... (can have same value)\n        type: string\n        required: true\n        default: master\n\nenv:\n  PYTHONUNBUFFERED: true\n\njobs:\n\n  build-linux:\n    if: github.repository_owner == 'root-project' || github.event_name == 'pull_request'\n\n    permissions:\n      contents: read\n\n    runs-on:\n      - self-hosted\n      - linux\n      - x64\n      - cpu\n\n    name: Build and test to determine coverage\n\n    container:\n      image: registry.cern.ch/root-ci/fedora38:buildready\n      options: '--security-opt label=disable --rm'\n      env:\n        OS_APPLICATION_CREDENTIAL_ID: '7f5b64a265244623a3a933308569bdba'\n        PYTHONUNBUFFERED: true\n\n    steps:\n      - name: Install cov packages\n        run: |\n          sudo dnf -y update\n          sudo dnf -y install lcov\n          pip3 install gcovr\n\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Dump GitHub context\n        env:\n          GITHUB_CONTEXT: ${{ toJSON(github) }}\n        run: echo \"$GITHUB_CONTEXT\"\n\n      - name: Print debug info\n        run:  'printf \"%s@%s\\\\n\" \"$(whoami)\" \"$(hostname)\";\n               ls -la\n              '\n\n      - name: Apply option override from matrix for this job\n        env:\n          OVERRIDE: \"coverage=On\"\n          FILE: .github/workflows/root-ci-config/buildconfig/fedora38.txt\n        shell: bash\n        run: |\n          set -x\n\n          echo '' >> \"$FILE\"\n          echo $OVERRIDE >> \"$FILE\"\n          cat \"$FILE\" || true\n\n      - name: Pull Request Build\n        if: github.event_name == 'pull_request'\n        env:\n          GITHUB_PR_ORIGIN: ${{ github.event.pull_request.head.repo.clone_url }}\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      Debug\n                    --platform       fedora38\n                    --incremental    false\n                    --coverage       true\n                    --base_ref       ${{ github.base_ref }}\n                    --head_ref       refs/pull/${{ github.event.pull_request.number }}/head:${{ github.event.pull_request.head.ref }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\n              \"\n\n      - name: Workflow dispatch\n        if:   github.event_name == 'workflow_dispatch'\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      Debug\n                    --platform       fedora38\n                    --incremental    false\n                    --coverage       true\n                    --base_ref       ${{ inputs.base_ref }}\n                    --head_ref       ${{ inputs.head_ref }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\n              \"\n\n      - name: Nightly build\n        if:   github.event_name == 'schedule'\n        run: \".github/workflows/root-ci-config/build_root.py\n                    --buildtype      Debug\n                    --platform       fedora38\n                    --incremental    false\n                    --coverage       true\n                    --base_ref       ${{ github.ref_name }}\n                    --repository     ${{ github.server_url }}/${{ github.repository }}\n              \"\n\n      - name: Upload coverage to Codecov\n        if: ${{ !cancelled() }}\n        uses: codecov/codecov-action@v3\n        with:\n          env_vars: OS,PYTHON\n          fail_ci_if_error: true\n          files: /github/home/ROOT-CI/build/cobertura-cov.xml\n          flags: unittests\n          name: codecov-umbrella\n          verbose: true\n\nfile: root-rn-ci.yml\nContent:\nname: 'ROOT Release Notes'\n\non:\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: 'The branch for which the RN have to be generated, e.g. \"master\" or \"v6-34-00-patches\"'\n        type: string\n        required: true\n        default: \"master\"\n\njobs:\n  create_release_notes:\n    runs-on: ubuntu-latest\n    env:\n      WORKDIR: /home/runner/work/root\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ inputs.branch }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n\n      - name: Download Release Notes creation script\n        working-directory: ${{ env.WORKDIR }}\n        run: wget https://raw.githubusercontent.com/root-project/rootspi/refs/heads/master/rdoc/relnotes_gh.py\n\n      - name: Setup Pandoc\n        run: sudo apt-get -y install pandoc\n\n      - name: Create Release Notes\n        working-directory: ${{ env.WORKDIR }}\n        run: |\n          echo +++ Directory\n          pwd\n          echo +++ Content\n          ls\n          echo +++ Running the command\n          python relnotes_gh.py root ${{ inputs.branch }}\n          echo +++ New Content\n          ls\n\n      - name: Install AWS CLI\n        run: |\n          python -m pip install --upgrade pip\n          pip install awscli==1.36.40\n          aws configure set default.s3.max_concurrent_requests 128\n  \n      - name: Sync documentation to S3\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_ENDPOINT_URL: https://s3.cern.ch/\n        working-directory: ${{ env.WORKDIR }}\n        run: |\n          echo +++ Directory\n          pwd\n          echo +++ Content\n          ls\n          echo +++ Running the command\n          export DIRNAME=`ls -1|grep -v relnotes|grep -v root`\n          aws s3 sync ${DIRNAME}/ s3://root/doc/${DIRNAME}\n          \nfile: testsecurity.yml\nContent:\n\nname: 'Self-hosted runner security test'\n\non: \n  workflow_dispatch:\n\njobs:\n  no-container:\n    runs-on: [self-hosted, linux, x64, cpu]\n    steps:\n      - name: Print debug info\n        run:  'printf \"%s@%s\\\\n\" $(whoami) $(hostname); pwd; ls -la; ls -la /'\n        if:   always()\n\n      - name: Attempt illegal write operation\n        run:  'if touch /a; then false; fi'\n        if:   always()\n\n      - name: Attempt illegal read operation\n        run:  'if cd /root; then false; fi'\n        if:   always()\n\n  in-container:\n    needs: no-container\n    strategy:\n      fail-fast: false\n      matrix:\n        image: [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]\n\n    runs-on: [self-hosted, linux, x64, cpu]\n\n    container:\n      image: ubuntu\n      options: '-v /:/mnt/test --security-opt label=disable'\n\n    steps:\n      - name: Print debug info\n        run:  'printf \"%s@%s\\\\n\" $(whoami) $(hostname); pwd; ls -Zla; ls -Zla /'\n        if:   always()\n\n      - name: Attempt illegal write operation\n        run:  'if touch /mnt/test/a > /dev/null; then false; fi'\n        if:   always()\n\n      - name: Attempt illegal read operation\n        run:  'if cd /mnt/test/root > /dev/null; then false; fi'\n        if:   always()\n\nfile: test-result-comment.yml\nContent:\n\nname: Test Summary PR comment\n\non:\n  workflow_run:\n    # do NOT use quotes: https://stackoverflow.com/a/72551795/17876693\n    workflows: [ROOT CI]\n    types:\n      - completed\npermissions: {}\n\njobs:\n  comment-test-results:\n    name: Publish Test Results\n\n    if: (github.event.workflow_run.event == 'pull_request' || github.event.workflow_run.event == 'schedule') && github.event.workflow_run.conclusion != 'skipped'\n\n    runs-on: ubuntu-latest\n\n    permissions:\n      checks: write\n      pull-requests: write\n      actions: read\n\n    steps:\n      - name: Download and Extract Artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n           mkdir -p artifacts && cd artifacts\n\n           artifacts_url=${{ github.event.workflow_run.artifacts_url }}\n\n           gh api --paginate \"$artifacts_url\" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact\n           do\n             IFS=$'\\t' read name url <<< \"$artifact\"\n             gh api $url > \"$name.zip\"\n             unzip -d \"$name\" -o \"$name.zip\"\n           done\n\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        with:\n          commit: ${{ github.event.workflow_run.head_sha }}\n          event_file: artifacts/Event File/event.json\n          event_name: ${{ github.event.workflow_run.event }}\n          files: \"artifacts/**/*.xml\"\n",
    "readme": "<img src=\"https://root-forum.cern.ch/uploads/default/original/2X/3/3fb82b650635bc6d61461f3c47f41786afad4548.png\" align=\"right\"  height=\"50\"/>\n\n## About\n\nROOT is a unified software package for the storage, processing, and analysis of \nscientific data: from its acquisition to the final visualization in form of highly \ncustomizable, publication-ready plots. It is reliable, performant and well supported,\neasy to use and obtain, and strives to maximize the quantity and impact of scientific \nresults obtained per unit cost, both of human effort and computing resources.\n\nROOT provides a very efficient storage system for data models, \nthat demonstrated to scale at the Large Hadron Collider experiments: Exabytes \nof scientific data are written in columnar ROOT format.\nROOT comes with histogramming capabilities in an arbitrary number of \ndimensions, curve fitting, statistical modelling, minimization, to allow\nthe easy setup of a data analysis system that can query and process the data\ninteractively or in batch mode, as well as a general parallel processing\nframework, RDataFrame, that can considerably speed up an analysis, taking \nfull advantage of multi-core and distributed systems.\n\nROOT is performance critical software written in C++ and enables rapid prototyping \npowered by a unique C++ compliant interpreter called Cling. \nCling also enables performant C++ type introspection which is a building block of automatic \ninteroperability with Python. Thanks to PyROOT, leveraging the cppyy technology, \nROOT offers efficient, on-demand C++/Python interoperability in a uniform cross-language \nexecution environment.\n\nROOT fully embraces open-source, it's made with passion by its community,\nfor the benefit of its community.\n\n[![License: LGPL v2.1+](https://img.shields.io/badge/License-LGPL%20v2.1+-blue.svg)](https://www.gnu.org/licenses/lgpl.html)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5060/badge)](https://bestpractices.coreinfrastructure.org/projects/5060)\n\n## Contribution Guidelines\n- [How to contribute](https://github.com/root-project/root/blob/master/CONTRIBUTING.md)\n- [Coding conventions](https://root.cern/coding-conventions)\n- [Meetings](https://root.cern/meetings)\n\n## Cite\nWhen citing ROOT, please use both the reference reported below and the DOI specific to your ROOT version available [on Zenodo](https://zenodo.org/badge/latestdoi/10994345) [![DOI](https://zenodo.org/badge/10994345.svg)](https://zenodo.org/badge/latestdoi/10994345). For example, you can copy-paste and fill in the following citation:\n\n    Rene Brun and Fons Rademakers, ROOT - An Object Oriented Data Analysis Framework,\n    Proceedings AIHENP'96 Workshop, Lausanne, Sep. 1996,\n    Nucl. Inst. & Meth. in Phys. Res. A 389 (1997) 81-86.\n    See also \"ROOT\" [software], Release vX.YY/ZZ, dd/mm/yyyy\n\n## Live Demo for CERN Users\n[![](https://img.shields.io/badge/Launch-SWAN-orange)](http://cern.ch/swanserver/cgi-bin/go?projurl=https://github.com/cernphsft/rootbinder.git)\n\nSee more screenshots on our [gallery](https://root.cern/gallery).\n\n## Installation and Getting Started\nSee https://root.cern/install for installation instructions.\nFor instructions on how to build ROOT from these source files, see https://root.cern/install/build_from_source.\n\nOur [\"Getting started with ROOT\"](https://root.cern/learn) page is then the perfect place to get familiar with ROOT.\n\n## Help and Support\n- [Forum](https://root.cern/forum/)\n- [Issue tracker](https://github.com/root-project/root/issues)\n  * [Previous now read-only Jira issue tracker](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-5820?filter=allopenissues)\n- [Documentation](https://root.cern/guides/reference-guide)\n- [Tutorials](https://root.cern/doc/master/group__Tutorials.html)"
}