{
    "primary_language": "Python",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Python Projects**\n\n1. **Read the README**  \n   Always start by reading the project's README file on GitHub. It usually contains important instructions for installation, usage, and any project-specific details. Some projects include a `Dockerfile` script, which you can review and reuse as needed.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in a `requirements.txt` file. Ensure you have the required versions of Python and any other libraries/packages.  \n\n3. **Virtual Environment**  \n   It\u2019s a good practice to create a virtual environment for each Python project to avoid conflicts with system-wide packages. Use the command:  \n   ```sh\n   python3.X -m venv .venv  \n   ```  \n\n4. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files) and set them up accordingly.  \n\n5. **Build the Project (rare cases)**  \n   Some projects might require building before usage, especially if they include C extensions or require compiling assets.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Some projects include a `tox.ini` file, which allows you to run tests with `tox`. Install `tox` first using:  \n   ```sh\n   pip install tox  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a script, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is not necessary.  \n\n10. **Shell Compatibility**  \n   In some shells, the `source` command may not work. In such cases, replace `source` with just `.` (a single dot). For example:  \n   ```sh\n   . .venv/bin/activate  \n   ```  \n\n11. **Avoid Using Conda**  \n   Instead of Conda, prefer the following commands to set up your virtual environment:  \n   ```sh\n   python -m venv .venv  \n   . .venv/bin/activate  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: tests.yaml\nContent:\nname: Tests\non:\n  push:\n    branches:\n      - main\n      - '*.x'\n    paths-ignore:\n      - 'docs/**'\n      - '*.md'\n      - '*.rst'\n  pull_request:\n    branches:\n      - main\n      - '*.x'\n    paths-ignore:\n      - 'docs/**'\n      - '*.md'\n      - '*.rst'\njobs:\n  tests:\n    name: ${{ matrix.name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - {name: Linux, python: '3.11', os: ubuntu-latest, tox: py311}\n          - {name: Windows, python: '3.11', os: windows-latest, tox: py311}\n          - {name: Mac, python: '3.11', os: macos-latest, tox: py311}\n          - {name: '3.12-dev', python: '3.12-dev', os: ubuntu-latest, tox: py312}\n          - {name: '3.10', python: '3.10', os: ubuntu-latest, tox: py310}\n          - {name: '3.9', python: '3.9', os: ubuntu-latest, tox: py39}\n          - {name: '3.8', python: '3.8', os: ubuntu-latest, tox: py38}\n          - {name: '3.7', python: '3.7', os: ubuntu-latest, tox: py37}\n          - {name: 'PyPy', python: 'pypy-3.9', os: ubuntu-latest, tox: pypy39}\n          - {name: 'Pallets Minimum Versions', python: '3.11', os: ubuntu-latest, tox: py311-min}\n          - {name: 'Pallets Development Versions', python: '3.7', os: ubuntu-latest, tox: py37-dev}\n          - {name: Typing, python: '3.11', os: ubuntu-latest, tox: typing}\n    steps:\n      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c\n      - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435\n        with:\n          python-version: ${{ matrix.python }}\n          cache: 'pip'\n          cache-dependency-path: 'requirements/*.txt'\n      - name: update pip\n        run: |\n          pip install -U wheel\n          pip install -U setuptools\n          python -m pip install -U pip\n      - name: cache mypy\n        uses: actions/cache@69d9d449aced6a2ede0bc19182fadc3a0a42d2b0\n        with:\n          path: ./.mypy_cache\n          key: mypy|${{ matrix.python }}|${{ hashFiles('pyproject.toml') }}\n        if: matrix.tox == 'typing'\n      - run: pip install tox\n      - run: tox run -e ${{ matrix.tox }}\n",
    "readme": "Flask\n=====\n\nFlask is a lightweight `WSGI`_ web application framework. It is designed\nto make getting started quick and easy, with the ability to scale up to\ncomplex applications. It began as a simple wrapper around `Werkzeug`_\nand `Jinja`_ and has become one of the most popular Python web\napplication frameworks.\n\nFlask offers suggestions, but doesn't enforce any dependencies or\nproject layout. It is up to the developer to choose the tools and\nlibraries they want to use. There are many extensions provided by the\ncommunity that make adding new functionality easy.\n\n.. _WSGI: https://wsgi.readthedocs.io/\n.. _Werkzeug: https://werkzeug.palletsprojects.com/\n.. _Jinja: https://jinja.palletsprojects.com/\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    $ pip install -U Flask\n\n.. _pip: https://pip.pypa.io/en/stable/getting-started/\n\n\nA Simple Example\n----------------\n\n.. code-block:: python\n\n    # save this as app.py\n    from flask import Flask\n\n    app = Flask(__name__)\n\n    @app.route(\"/\")\n    def hello():\n        return \"Hello, World!\"\n\n.. code-block:: text\n\n    $ flask run\n      * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n\n\nContributing\n------------\n\nFor guidance on setting up a development environment and how to make a\ncontribution to Flask, see the `contributing guidelines`_.\n\n.. _contributing guidelines: https://github.com/pallets/flask/blob/main/CONTRIBUTING.rst\n\n\nDonate\n------\n\nThe Pallets organization develops and supports Flask and the libraries\nit uses. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, `please\ndonate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://flask.palletsprojects.com/\n-   Changes: https://flask.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/Flask/\n-   Source Code: https://github.com/pallets/flask/\n-   Issue Tracker: https://github.com/pallets/flask/issues/\n-   Website: https://palletsprojects.com/p/flask/\n-   Twitter: https://twitter.com/PalletsTeam\n-   Chat: https://discord.gg/pallets\n"
}