{
    "primary_language": "PHP",
    "language_guidelines": "Programming Language guidelines for PHP:\n# General Guidelines:\n**General Guidelines for PHP Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, PHP version requirements, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `composer.json` file. Ensure you have the required PHP version and any extensions installed. Check for system requirements and PHP modules needed.  \n\n3. **PHP Installation**  \n   Ensure you have PHP installed with the required version. Verify installation:  \n   ```sh\n   php --version  \n   ```  \n   For Ubuntu/Debian systems, you can install PHP:  \n   ```sh\n   sudo apt update  \n   sudo apt install php php-cli php-common  \n   ```  \n\n4. **Composer Installation**  \n   Most modern PHP projects use Composer for dependency management. Install Composer if not already available:  \n   ```sh\n   curl -sS https://getcomposer.org/installer | php  \n   sudo mv composer.phar /usr/local/bin/composer  \n   ```  \n   Verify installation:  \n   ```sh\n   composer --version  \n   ```  \n\n5. **Install Dependencies**  \n   Use Composer to install project dependencies:  \n   ```sh\n   composer install  \n   ```  \n   For production environment:  \n   ```sh\n   composer install --no-dev --optimize-autoloader  \n   ```  \n\n6. **Autoloading**  \n   Ensure the autoloader is properly set up. Most projects using Composer will have:  \n   ```php\n   require_once 'vendor/autoload.php';  \n   ```  \n\n7. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.php`, database configuration) and set them up accordingly. Look for example configuration files like `.env.example`.  \n\n8. **Database Setup**  \n   If the project uses a database, set up the database connection and run any migrations:  \n   ```sh\n   php artisan migrate  # For Laravel projects  \n   ```  \n   Or check for SQL files in the project that need to be imported.  \n\n9. **Web Server Setup**  \n   For web applications, you can use PHP's built-in server for development:  \n   ```sh\n   php -S localhost:8000  \n   ```  \n   Or for specific document root:  \n   ```sh\n   php -S localhost:8000 -t public/  \n   ```  \n   For production, configure Apache/Nginx as described in the project documentation.  \n\n10. **Run Tests (if available)**  \n    If the project provides tests, run them to ensure everything is working correctly. Common test commands include:  \n    ```sh\n    ./vendor/bin/phpunit  \n    ```  \n    Or if using Composer scripts:  \n    ```sh\n    composer test  \n    ```  \n\n11. **Code Quality Tools**  \n    Use code quality tools if available in the project:  \n    - PHP CodeSniffer for coding standards:  \n      ```sh\n      ./vendor/bin/phpcs  \n      ```  \n    - PHP Stan for static analysis:  \n      ```sh\n      ./vendor/bin/phpstan analyse  \n      ```  \n    - PHP CS Fixer for code formatting:  \n      ```sh\n      ./vendor/bin/php-cs-fixer fix  \n      ```  \n\n12. **Run the Project**  \n    Follow the instructions in the README to run the project. This could involve:  \n    - Starting a web server  \n    - Running specific PHP scripts  \n    - Using framework-specific commands (e.g., `php artisan serve` for Laravel)  \n\n13. **Common PHP Extensions**  \n    Install commonly required PHP extensions if missing:  \n    ```sh\n    sudo apt install php-mysql php-pgsql php-sqlite3 php-curl php-json php-mbstring php-xml php-zip  \n    ```  \n\n14. **Memory and Execution Limits**  \n    Some projects may require adjusting PHP settings. Check `php.ini` for:  \n    - `memory_limit`  \n    - `max_execution_time`  \n    - `upload_max_filesize`  \n\n15. **Troubleshooting**  \n    If you encounter issues during installation or while running the project:  \n    - Check PHP error logs  \n    - Verify all required PHP extensions are installed  \n    - Ensure proper file permissions  \n    - Refer to the project's issue tracker on GitHub  \n\n16. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  \n\n17. **Framework-Specific Commands**  \n    Be aware of framework-specific tools and commands:  \n    - Laravel: `php artisan`  \n    - Symfony: `php bin/console`  \n    - CakePHP: `bin/cake`  \n    - CodeIgniter: framework-specific setup instructions  \n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: test-phpunit.yml\nContent:\nname: PHPUnit\n\non: [push, pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    runs-on: ubuntu-22.04\n    if: \"!contains(github.event.head_commit.message, '[ci skip]')\"\n    env:\n      PHP_INI_VALUES: assert.exception=1, zend.assertions=1\n\n    strategy:\n      fail-fast: false\n      matrix:\n        php: [ '8.1', '8.0', '7.4', '7.3', '7.2', '7.1', '7.0', '5.6', '5.5', '5.4']\n        DB: [ 'pdo/mysql', 'pdo/pgsql', 'pdo/sqlite', 'mysqli', 'pgsql', 'sqlite' ]\n        compiler: [ default ]\n        include:\n          - php: '8.1'\n            DB: 'pdo/mysql'\n            compiler: jit\n          - php: '8.1'\n            DB: 'pdo/pgsql'\n            compiler: jit\n          - php: '8.1'\n            DB: 'pdo/sqlite'\n            compiler: jit\n          - php: '8.1'\n            DB: 'mysqli'\n            compiler: jit\n          - php: '8.1'\n            DB: 'pgsql'\n            compiler: jit\n          - php: '8.1'\n            DB: 'sqlite'\n            compiler: jit\n          - php: '8.0'\n            DB: 'pdo/mysql'\n            compiler: jit\n          - php: '8.0'\n            DB: 'pdo/pgsql'\n            compiler: jit\n          - php: '8.0'\n            DB: 'pdo/sqlite'\n            compiler: jit\n          - php: '8.0'\n            DB: 'mysqli'\n            compiler: jit\n          - php: '8.0'\n            DB: 'pgsql'\n            compiler: jit\n          - php: '8.0'\n            DB: 'sqlite'\n            compiler: jit\n          - php: '5.6'\n            DB: 'mysql'\n            compiler: default\n          - php: '5.5'\n            DB: 'mysql'\n            compiler: default\n          - php: '5.4'\n            DB: 'mysql'\n            compiler: default\n\n    services:\n      postgres:\n        image: postgres:12\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: ci_test\n        ports:\n          - 5432:5432\n        options: --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3\n\n      mysql:\n        image: mysql:5.7\n        env:\n          MYSQL_ALLOW_EMPTY_PASSWORD: true\n          MYSQL_USER: travis\n          MYSQL_PASSWORD: travis\n          MYSQL_DATABASE: ci_test\n        ports:\n          - 3306:3306\n        options: --health-cmd=\"mysqladmin ping\" --health-interval=10s --health-timeout=5s --health-retries=3\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Override PHP ini values for JIT compiler\n        if: matrix.compiler == 'jit'\n        run: echo \"PHP_INI_VALUES::assert.exception=1, zend.assertions=1, opcache.enable=1, opcache.enable_cli=1, opcache.optimization_level=-1, opcache.jit=1255, opcache.jit_buffer_size=64M\" >> $GITHUB_ENV \n\n      - name: Install PHP${{ matrix.php }} - DB ${{ matrix.DB }}\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          tools: composer, pecl\n          extensions: imagick, sqlite3, pgsql, mysqli, pdo, pdo_mysql, pdo_pgsql, pdo_sqlite, mbstring\n          ini-values: ${{ env.PHP_INI_VALUES }}\n          coverage: xdebug\n\n      - name: Get composer cache directory\n        id: composer-cache\n        run: echo \"::set-output name=dir::$(composer config cache-files-dir)\"\n      - name: Cache composer dependencies\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.composer-cache.outputs.dir }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: ${{ runner.os }}-composer-   \n      - name: Install composer dependencies\n        run: composer install --no-progress --prefer-dist --optimize-autoloader\n\n      - name: PHPUnit Test\n        run: |\n          php -d error_reporting=E_ALL -d zend.enable_gc=0 -d date.timezone=UTC -d mbstring.func_overload=7 -d mbstring.internal_encoding=UTF-8 vendor/bin/phpunit --coverage-text --configuration tests/travis/${{ matrix.DB }}.phpunit.xml\n        env:\n          XDEBUG_MODE: coverage\n",
    "readme": "###################\nWhat is CodeIgniter\n###################\n\nCodeIgniter is an Application Development Framework - a toolkit - for people\nwho build web sites using PHP. Its goal is to enable you to develop projects\nmuch faster than you could if you were writing code from scratch, by providing\na rich set of libraries for commonly needed tasks, as well as a simple\ninterface and logical structure to access these libraries. CodeIgniter lets\nyou creatively focus on your project by minimizing the amount of code needed\nfor a given task.\n\n*******************\nRelease Information\n*******************\n\nThis repo contains in-development code for future releases. To download the\nlatest stable release please visit the `CodeIgniter Downloads\n<https://codeigniter.com/download>`_ page.\n\n**************************\nChangelog and New Features\n**************************\n\nYou can find a list of all changes for each release in the `user\nguide change log <https://github.com/bcit-ci/CodeIgniter/blob/develop/user_guide_src/source/changelog.rst>`_.\n\n*******************\nServer Requirements\n*******************\n\nPHP version 5.6 or newer is recommended.\n\nIt should work on 5.4.8 as well, but we strongly advise you NOT to run\nsuch old versions of PHP, because of potential security and performance\nissues, as well as missing features.\n\n************\nInstallation\n************\n\nPlease see the `installation section <https://codeigniter.com/userguide3/installation/index.html>`_\nof the CodeIgniter User Guide.\n\n*******\nLicense\n*******\n\nPlease see the `license\nagreement <https://github.com/bcit-ci/CodeIgniter/blob/develop/user_guide_src/source/license.rst>`_.\n\n*********\nResources\n*********\n\n-  `User Guide <https://codeigniter.com/userguide3/>`_\n-  `Contributing Guide <https://github.com/bcit-ci/CodeIgniter/blob/develop/contributing.md>`_\n-  `Language File Translations <https://github.com/bcit-ci/codeigniter3-translations>`_\n-  `Community Forums <https://forum.codeigniter.com/>`_\n-  `Community Wiki <https://github.com/bcit-ci/CodeIgniter/wiki>`_\n-  `Community Slack Channel <https://codeigniterchat.slack.com>`_\n\nReport security issues to our `Security Panel <mailto:security@codeigniter.com>`_\nor via our `page on HackerOne <https://hackerone.com/codeigniter>`_, thank you.\n\n***************\nAcknowledgement\n***************\n\nThe CodeIgniter team would like to thank EllisLab, all the\ncontributors to the CodeIgniter project and you, the CodeIgniter user.\n",
    "org": "bcit-ci",
    "repo": "CodeIgniter",
    "number": 6261,
    "commit": "ae7b30f9cbaf462a3cc039de6d1e7738c6bea2d4"
}