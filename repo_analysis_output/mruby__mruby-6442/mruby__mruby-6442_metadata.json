{
    "primary_language": "C",
    "language_guidelines": "# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\n# https://github.com/actions/runner-images#available-images\nname: Build & Test\n\non: [push, pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  GCC-CLANG:\n    name: \"${{ matrix.os }}-${{ matrix.altname || matrix.cc }}\"\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 10\n    strategy:\n      fail-fast: false\n      max-parallel: 8\n      matrix:\n        include:\n          - {os: ubuntu-24.04, cc: gcc, cxx: g++}\n          - {os: ubuntu-24.04, cc: clang, cxx: clang++}\n          - {os: ubuntu-22.04, cc: gcc, cxx: g++}\n          - {os: ubuntu-22.04, cc: clang, cxx: clang++}\n          - {os: macos-15, cc: clang, cxx: clang++}\n          - {os: macos-14, cc: clang, cxx: clang++}\n          - {os: windows-latest, cc: gcc, cxx: g++, altname: \"mingw-gcc\"}\n    env:\n      MRUBY_CONFIG: ci/gcc-clang\n      CC: ${{ matrix.cc }}\n      CXX: ${{ matrix.cxx }}\n      LD: ${{ matrix.cc }}\n    steps:\n      - name: \"Checkout ${{ github.ref }} ( ${{ github.sha }} )\"\n        uses: actions/checkout@v4\n      - name: Ruby version\n        run: ruby -v\n      - name: Compiler version\n        run: ${{ env.CC }} --version\n      - name: Build and test\n        run: rake -m test:run:serial\n\n  Windows-VC:\n    runs-on: windows-2022\n    timeout-minutes: 10\n    env:\n      MRUBY_CONFIG: ci/msvc\n    steps:\n      - name: \"Checkout ${{ github.ref }} ( ${{ github.sha }} )\"\n        uses: actions/checkout@v4\n      - name: Ruby version\n        run: ruby -v\n      - name: Build and test\n        shell: cmd\n        run: |\n          call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n          rake -m test:run:serial\n",
    "readme": "<div align=\"center\">\n  <p>\n    <a href=\"https://mruby.org/\">\n      <img src=\"https://avatars.githubusercontent.com/u/1796512?s=200&v=4\"\n        alt=\"The mruby programming language\" title=\"mruby\">\n    </a>\n  </p>\n  <h1>mruby</h1>\n  <a href=\"https://github.com/marketplace/actions/super-linter\">\n    <img src=\"https://github.com/mruby/mruby/actions/workflows/super-linter.yml/badge.svg\"\n      alt=\"GitHub Super-Linter\">\n  </a>\n</div>\n\n## What is mruby\n\nmruby is the lightweight implementation of the Ruby language complying to (part\nof) the [ISO standard][ISO-standard] with more recent features provided by Ruby 3.x.\nAlso, its syntax is Ruby 3.x compatible except for pattern matching.\n\nYou can link and embed mruby within your application. The \"mruby\" interpreter\nprogram and the interactive \"mirb\" shell are provided as examples. You can also\ncompile Ruby programs into compiled byte code using the \"mrbc\" compiler. All\nthese tools are located in the \"bin\" directory. \"mrbc\" can also generate\ncompiled byte code in a C source file. See the \"mrbtest\" program under the\n\"test\" directory for an example.\n\nThis achievement was sponsored by the Regional Innovation Creation R&D Programs\nof the Ministry of Economy, Trade and Industry of Japan.\n\n## How to get mruby\n\nTo get mruby, you can download the stable version 3.3.0 from the official mruby\nGitHub repository or clone the trunk of the mruby source tree with the \"git\nclone\" command. You can also install and compile mruby using [ruby-install](https://github.com/postmodern/ruby-install), [ruby-build](https://github.com/rbenv/ruby-build) or [rvm](https://github.com/rvm/rvm).\n\nThe latest development version of mruby can be downloaded via the following URL: [https://github.com/mruby/mruby/zipball/master](https://github.com/mruby/mruby/zipball/master)\n\nThe trunk of the mruby source tree can be checked out with the\nfollowing command:\n\n```console\n$ git clone https://github.com/mruby/mruby.git\n```\n\n## mruby homepage\n\nThe URL of the mruby homepage is: <https://mruby.org>.\n\n## Mailing list\n\nWe don't have a mailing list, but you can use [GitHub issues](https://github.com/mruby/mruby/issues).\n\n## How to compile, test, and install (mruby and gems)\n\nFor the simplest case, type\n\n```console\nrake all test\n```\n\nSee the [compile.md](doc/guides/compile.md) file for the detail.\n\n## Building documentation\n\nThere are two sets of documentation in mruby: the mruby API (generated by YARD) and C API (Doxygen and Graphviz)\n\nTo build both of them, simply go\n\n```console\nrake doc\n```\n\nYou can also view them in your browser\n\n```console\nrake view_api\nrake view_capi\n```\n\n## How to customize mruby (mrbgems)\n\nmruby contains a package manager called \"mrbgems\" that you can use to create\nextensions in C and/or Ruby. For a guide on how to use mrbgems, consult the\n[mrbgems.md](doc/guides/mrbgems.md) file, and for example code, refer to the\n[examples/mrbgems/](examples/mrbgems) folder.\n\n## Index of Document\n\n<!--\n    This section is generated by `rake doc:update-index`.\n    All manual changes will get lost.\n-->\n\n<!-- BEGIN OF MRUBY DOCUMENT INDEX -->\n\n- [About the Limitations of mruby](doc/limitations.md)\n- [About the Compile](doc/guides/compile.md)\n- [About the Debugger with the `mrdb` Command](doc/guides/debugger.md)\n- [About GC Arena](doc/guides/gc-arena-howto.md)\n- [About the mruby directory structure](doc/guides/hier.md)\n- [About Linking with `libmruby`](doc/guides/link.md)\n- [About Memory Allocator Customization](doc/guides/memory.md)\n- [About Build-time Configurations](doc/guides/mrbconf.md)\n- [About the Build-time Library Manager](doc/guides/mrbgems.md)\n- [About the Symbols](doc/guides/symbol.md)\n- [Internal Implementation / About Value Boxing](doc/internal/boxing.md)\n- [Internal Implementation / About mruby Virtual Machine Instructions](doc/internal/opcode.md)\n\n<!-- END OF MRUBY DOCUMENT INDEX -->\n\n## License\n\nmruby is released under the [MIT License](LICENSE).\n\n## Note for License\n\nmruby has chosen a MIT License due to its permissive license allowing\ndevelopers to target various environments such as embedded systems.\nHowever, the license requires the display of the copyright notice and license\ninformation in manuals for instance. Doing so for big projects can be\ncomplicated or troublesome. This is why mruby has decided to display \"mruby\ndevelopers\" as the copyright name to make it simple conventionally.\nIn the future, mruby might ask you to distribute your new code\n(that you will commit,) under the MIT License as a member of\n\"mruby developers\" but contributors will keep their copyright.\n(We did not intend for contributors to transfer or waive their copyrights,\nactual copyright holder name (contributors) will be listed in the [AUTHORS](AUTHORS)\nfile.)\n\nPlease ask us if you want to distribute your code under another license.\n\n## How to Contribute\n\nTo contribute to mruby, please refer to the [contribution guidelines][contribution-guidelines] and send a pull request to the [mruby GitHub repository](https://github.com/mruby/mruby).\nBy contributing, you grant non-exclusive rights to your code under the MIT License.\n\n[ISO-standard]: https://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59579\n[contribution-guidelines]: CONTRIBUTING.md\n"
}