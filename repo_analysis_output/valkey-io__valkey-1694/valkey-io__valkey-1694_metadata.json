{
    "primary_language": "C",
    "language_guidelines": "# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: call-build-linux-arm-packages.yml\nContent:\nname: Builds Linux arm binary packages into S3 bucket.\n\non:\n  workflow_call:\n    inputs:\n      version:\n        description: The version of Valkey to create.\n        type: string\n        required: true\n      ref:\n        description: The commit, tag or branch of Valkey to checkout for building that creates the version above.\n        type: string\n        required: true\n      build_matrix:\n        description: The build targets to produce as a JSON matrix.\n        type: string\n        required: true\n      region:\n        description: The AWS region to push packages into.\n        type: string\n        required: true\n    secrets:\n      bucket_name:\n        description: The S3 bucket to push packages into.\n        required: true\n      role_to_assume:\n        description: The role to assume for the S3 bucket.\n        required: true\n\npermissions:\n  id-token: write\n  contents: read\n\njobs:\n  build-valkey:\n    # Capture source tarball and generate checksum for it\n    name: Build package ${{ matrix.distro.target }} ${{ matrix.distro.arch }}\n    runs-on: \"ubuntu-latest\"\n    strategy:\n      fail-fast: false\n      matrix: ${{ fromJSON(inputs.build_matrix) }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ inputs.version }}\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-region: ${{ inputs.region }}\n          role-to-assume: ${{ secrets.role_to_assume }}\n\n      - name: Make Valkey\n        uses: uraimo/run-on-arch-action@v2\n        with:\n          arch: aarch64\n          distro: ${{matrix.distro.target}}\n          install: apt-get update && apt-get install -y build-essential libssl-dev libsystemd-dev\n          run: make -C src all BUILD_TLS=yes USE_SYSTEMD=yes\n\n      - name: Create Tarball and SHA256sums\n        run: |\n          TAR_FILE_NAME=valkey-${{inputs.version}}-${{matrix.distro.platform}}-${{ matrix.distro.arch}}\n          mkdir -p \"$TAR_FILE_NAME/bin\" \"$TAR_FILE_NAME/share\"\n          rsync -av --exclude='*.c' --exclude='*.d' --exclude='*.o' src/valkey-* \"$TAR_FILE_NAME/bin/\"\n          cp -v /home/runner/work/valkey/valkey/COPYING \"$TAR_FILE_NAME/share/LICENSE\"\n          tar -czvf $TAR_FILE_NAME.tar.gz $TAR_FILE_NAME\n          sha256sum $TAR_FILE_NAME.tar.gz > $TAR_FILE_NAME.tar.gz.sha256\n          mkdir -p packages-files\n          cp -rfv $TAR_FILE_NAME.tar* packages-files/\n\n      - name: Sync to S3\n        run: aws s3 sync packages-files s3://${{ secrets.bucket_name }}/releases/\n\nfile: build-release-packages.yml\nContent:\nname: Build Release Packages\n\non:\n  release:\n    types: [published]\n  push:\n    paths:\n      - '.github/workflows/build-release-packages.yml'\n      - '.github/workflows/call-build-linux-arm-packages.yml'\n      - '.github/workflows/call-build-linux-x86-packages.yml'\n      - '.github/actions/generate-package-build-matrix/build-config.json'\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version of Valkey to build\n        required: true\n\npermissions:\n  id-token: write\n  contents: read\n\njobs:\n  # This job provides the version metadata from the tag for the other jobs to use.\n  release-build-get-meta:\n    name: Get metadata to build\n    if: github.event_name == 'workflow_dispatch' || github.repository == 'valkey-io/valkey'\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{ steps.get_version.outputs.VERSION }}\n      is_test: ${{ steps.check-if-testing.outputs.IS_TEST }}\n    steps:\n      - run: |\n          echo \"Version: ${{ inputs.version || github.ref_name }}\"\n        shell: bash\n\n      # This step is to consolidate the three different triggers into a single \"version\"\n      # 1. If manual dispatch - use the version provided.\n      # 3. If tag trigger, use that tag.\n      - name: Get the version\n        id: get_version\n        run: |\n          if [[ \"${{ github.event_name }}\" == \"push\" ]]; then\n            VERSION=${{ github.ref_name }}\n          else\n            VERSION=\"${INPUT_VERSION}\"\n          fi\n          if [ -z \"${VERSION}\" ]; then\n            echo \"Error: No version specified\"\n            exit 1\n          fi\n          echo \"VERSION=$VERSION\" >> $GITHUB_OUTPUT\n        shell: bash\n        env:\n          # Use the dispatch variable in preference, if empty use the context ref_name which should\n          # only ever be a tag\n          INPUT_VERSION: ${{ inputs.version || github.ref_name }}\n\n      - name: Check if we are testing\n        id: check-if-testing\n        run: |\n          if [[ \"${{ github.event_name }}\" == \"push\" ]]; then\n            echo \"This is a test workflow -> We will upload to the Test S3 Bucket\"\n            echo \"IS_TEST=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"This is a Release workflow -> We will upload to the Release S3 Bucket\"\n            echo \"IS_TEST=false\" >> $GITHUB_OUTPUT\n          fi\n        shell: bash\n\n  generate-build-matrix:\n    name: Generating build matrix\n    if: github.event_name == 'workflow_dispatch' || github.repository == 'valkey-io/valkey'\n    runs-on: ubuntu-latest\n    outputs:\n      x86_64-build-matrix: ${{ steps.set-matrix.outputs.x86_64-build-matrix }}\n      arm64-build-matrix: ${{ steps.set-matrix.outputs.arm64-build-matrix }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      # Set up the list of target to build so we can pass the JSON to the reusable job\n      - uses: ./.github/actions/generate-package-build-matrix\n        id: set-matrix\n        with:\n          ref: ${{ needs.release-build-get-meta.outputs.version }}\n\n  release-build-linux-x86-packages:\n    needs:\n      - release-build-get-meta\n      - generate-build-matrix\n    uses: ./.github/workflows/call-build-linux-x86-packages.yml\n    with:\n      version: ${{ needs.release-build-get-meta.outputs.version }}\n      ref: ${{ inputs.version || github.ref_name }}\n      build_matrix: ${{ needs.generate-build-matrix.outputs.x86_64-build-matrix }}\n      region: us-west-2\n    secrets:\n      bucket_name: ${{ needs.release-build-get-meta.outputs.is_test == 'true' && secrets.AWS_S3_TEST_BUCKET || secrets.AWS_S3_BUCKET }}\n      role_to_assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}\n\n  release-build-linux-arm-packages:\n    needs:\n      - release-build-get-meta\n      - generate-build-matrix\n    uses: ./.github/workflows/call-build-linux-arm-packages.yml\n    with:\n      version: ${{ needs.release-build-get-meta.outputs.version }}\n      ref: ${{ inputs.version || github.ref_name }}\n      build_matrix: ${{ needs.generate-build-matrix.outputs.arm64-build-matrix }}\n      region: us-west-2\n    secrets:\n      bucket_name: ${{ needs.release-build-get-meta.outputs.is_test == 'true' && secrets.AWS_S3_TEST_BUCKET || secrets.AWS_S3_BUCKET }}\n      role_to_assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}\n\nfile: call-build-linux-x86-packages.yml\nContent:\nname: Builds Linux X86 binary packages into S3 bucket.\n\non:\n  workflow_call:\n    inputs:\n      version:\n        description: The version of Valkey to create.\n        type: string\n        required: true\n      ref:\n        description: The commit, tag or branch of Valkey to checkout for building that creates the version above.\n        type: string\n        required: true\n      build_matrix:\n        description: The build targets to produce as a JSON matrix.\n        type: string\n        required: true\n      region:\n        description: The AWS region to upload the packages to.\n        type: string\n        required: true\n    secrets:\n      bucket_name:\n        description: The name of the S3 bucket to upload the packages to.\n        required: true\n      role_to_assume:\n        description: The role to assume for the S3 bucket.\n        required: true\n\npermissions:\n  id-token: write\n  contents: read\n\njobs:\n  build-valkey:\n    # Capture source tarball and generate checksum for it\n    name: Build package ${{ matrix.distro.target }} ${{ matrix.distro.arch }}\n    runs-on: ${{matrix.distro.target}}\n    strategy:\n      fail-fast: false\n      matrix: ${{ fromJSON(inputs.build_matrix) }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ inputs.version }}\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-region: ${{ inputs.region }}\n          role-to-assume: ${{ secrets.role_to_assume }}\n\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install -y build-essential libssl-dev libsystemd-dev\n\n      - name: Make Valkey\n        run: make -C src all BUILD_TLS=yes USE_SYSTEMD=yes\n\n      - name: Create Tarball and SHA256sums\n        run: |\n          TAR_FILE_NAME=valkey-${{inputs.version}}-${{matrix.distro.platform}}-${{ matrix.distro.arch}}\n          mkdir -p \"$TAR_FILE_NAME/bin\" \"$TAR_FILE_NAME/share\"\n          rsync -av --exclude='*.c' --exclude='*.d' --exclude='*.o' src/valkey-* \"$TAR_FILE_NAME/bin/\"\n          cp -v /home/runner/work/valkey/valkey/COPYING \"$TAR_FILE_NAME/share/LICENSE\"\n          tar -czvf $TAR_FILE_NAME.tar.gz $TAR_FILE_NAME\n          sha256sum $TAR_FILE_NAME.tar.gz > $TAR_FILE_NAME.tar.gz.sha256\n          mkdir -p packages-files\n          cp -rfv $TAR_FILE_NAME.tar* packages-files/\n\n      - name: Sync to S3\n        run: aws s3 sync packages-files s3://${{ secrets.bucket_name }}/releases/\n",
    "readme": "[![codecov](https://codecov.io/gh/valkey-io/valkey/graph/badge.svg?token=KYYSJAYC5F)](https://codecov.io/gh/valkey-io/valkey)\n\nThis project was forked from the open source Redis project right before the transition to their new source available licenses.\n\nThis README is just a fast *quick start* document. More details can be found under [valkey.io](https://valkey.io/)\n\n# What is Valkey?\n\nValkey is a high-performance data structure server that primarily serves key/value workloads.\nIt supports a wide range of native structures and an extensible plugin system for adding new data structures and access patterns.\n\n# Building Valkey using `Makefile`\n\nValkey can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD.\nWe support big endian and little endian architectures, and both 32 bit\nand 64 bit systems.\n\nIt may compile on Solaris derived systems (for instance SmartOS) but our\nsupport for this platform is *best effort* and Valkey is not guaranteed to\nwork as well as in Linux, OSX, and \\*BSD.\n\nIt is as simple as:\n\n    % make\n\nTo build with TLS support, you'll need OpenSSL development libraries (e.g.\nlibssl-dev on Debian/Ubuntu).\n\nTo build TLS support as Valkey built-in:\n\n    % make BUILD_TLS=yes\n\nTo build TLS as Valkey module:\n\n    % make BUILD_TLS=module\n\nNote that sentinel mode does not support TLS module.\n\nTo build with experimental RDMA support you'll need RDMA development libraries\n(e.g. librdmacm-dev and libibverbs-dev on Debian/Ubuntu).\n\nTo build RDMA support as Valkey built-in:\n\n    % make BUILD_RDMA=yes\n\nTo build RDMA as Valkey module:\n\n    % make BUILD_RDMA=module\n\nTo build with systemd support, you'll need systemd development libraries (such\nas libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:\n\n    % make USE_SYSTEMD=yes\n\nTo append a suffix to Valkey program names, use:\n\n    % make PROG_SUFFIX=\"-alt\"\n\nYou can build a 32 bit Valkey binary using:\n\n    % make 32bit\n\nAfter building Valkey, it is a good idea to test it using:\n\n    % make test\n\nThe above runs the main integration tests. Additional tests are started using:\n\n    % make test-unit     # Unit tests\n    % make test-modules  # Tests of the module API\n    % make test-sentinel # Valkey Sentinel integration tests\n    % make test-cluster  # Valkey Cluster integration tests\n\nMore about running the integration tests can be found in\n[tests/README.md](tests/README.md) and for unit tests, see\n[src/unit/README.md](src/unit/README.md).\n\n## Fixing build problems with dependencies or cached build options\n\nValkey has some dependencies which are included in the `deps` directory.\n`make` does not automatically rebuild dependencies even if something in\nthe source code of dependencies changes.\n\nWhen you update the source code with `git pull` or when code inside the\ndependencies tree is modified in any other way, make sure to use the following\ncommand in order to really clean everything and rebuild from scratch:\n\n    % make distclean\n\nThis will clean: jemalloc, lua, hiredis, linenoise and other dependencies.\n\nAlso if you force certain build options like 32bit target, no C compiler\noptimizations (for debugging purposes), and other similar build time options,\nthose options are cached indefinitely until you issue a `make distclean`\ncommand.\n\n## Fixing problems building 32 bit binaries\n\nIf after building Valkey with a 32 bit target you need to rebuild it\nwith a 64 bit target, or the other way around, you need to perform a\n`make distclean` in the root directory of the Valkey distribution.\n\nIn case of build errors when trying to build a 32 bit binary of Valkey, try\nthe following steps:\n\n* Install the package libc6-dev-i386 (also try g++-multilib).\n* Try using the following command line instead of `make 32bit`:\n  `make CFLAGS=\"-m32 -march=native\" LDFLAGS=\"-m32\"`\n\n## Allocator\n\nSelecting a non-default memory allocator when building Valkey is done by setting\nthe `MALLOC` environment variable. Valkey is compiled and linked against libc\nmalloc by default, with the exception of jemalloc being the default on Linux\nsystems. This default was picked because jemalloc has proven to have fewer\nfragmentation problems than libc malloc.\n\nTo force compiling against libc malloc, use:\n\n    % make MALLOC=libc\n\nTo compile against jemalloc on Mac OS X systems, use:\n\n    % make MALLOC=jemalloc\n\n## Monotonic clock\n\nBy default, Valkey will build using the POSIX clock_gettime function as the\nmonotonic clock source.  On most modern systems, the internal processor clock\ncan be used to improve performance.  Cautions can be found here:\n    http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/\n\nTo build with support for the processor's internal instruction clock, use:\n\n    % make CFLAGS=\"-DUSE_PROCESSOR_CLOCK\"\n\n## Verbose build\n\nValkey will build with a user-friendly colorized output by default.\nIf you want to see a more verbose output, use the following:\n\n    % make V=1\n\n# Running Valkey\n\nTo run Valkey with the default configuration, just type:\n\n    % cd src\n    % ./valkey-server\n\nIf you want to provide your valkey.conf, you have to run it using an additional\nparameter (the path of the configuration file):\n\n    % cd src\n    % ./valkey-server /path/to/valkey.conf\n\nIt is possible to alter the Valkey configuration by passing parameters directly\nas options using the command line. Examples:\n\n    % ./valkey-server --port 9999 --replicaof 127.0.0.1 6379\n    % ./valkey-server /etc/valkey/6379.conf --loglevel debug\n\nAll the options in valkey.conf are also supported as options using the command\nline, with exactly the same name.\n\n# Running Valkey with TLS:\n\n## Running manually\n\nTo manually run a Valkey server with TLS mode (assuming `./gen-test-certs.sh` was invoked so sample certificates/keys are available):\n\n* TLS built-in mode:\n    ```\n    ./src/valkey-server --tls-port 6379 --port 0 \\\n        --tls-cert-file ./tests/tls/valkey.crt \\\n        --tls-key-file ./tests/tls/valkey.key \\\n        --tls-ca-cert-file ./tests/tls/ca.crt\n    ```\n\n* TLS module mode:\n    ```\n    ./src/valkey-server --tls-port 6379 --port 0 \\\n        --tls-cert-file ./tests/tls/valkey.crt \\\n        --tls-key-file ./tests/tls/valkey.key \\\n        --tls-ca-cert-file ./tests/tls/ca.crt \\\n        --loadmodule src/valkey-tls.so\n    ```\n\nNote that you can disable TCP by specifying `--port 0` explicitly.\nIt's also possible to have both TCP and TLS available at the same time,\nbut you'll have to assign different ports.\n\nUse `valkey-cli` to connect to the Valkey server:\n```\n./src/valkey-cli --tls \\\n    --cert ./tests/tls/valkey.crt \\\n    --key ./tests/tls/valkey.key \\\n    --cacert ./tests/tls/ca.crt\n```\n\nSpecifying `--tls-replication yes` makes a replica connect to the primary.\n\nUsing `--tls-cluster yes` makes Valkey Cluster use TLS across nodes.\n\n# Running Valkey with RDMA:\n\nNote that Valkey Over RDMA is an experimental feature.\nIt may be changed or removed in any minor or major version.\nCurrently, it is only supported on Linux.\n\n* RDMA built-in mode:\n    ```\n    ./src/valkey-server --protected-mode no \\\n         --rdma-bind 192.168.122.100 --rdma-port 6379\n    ```\n\n* RDMA module mode:\n    ```\n    ./src/valkey-server --protected-mode no \\\n         --loadmodule src/valkey-rdma.so --rdma-bind 192.168.122.100 --rdma-port 6379\n    ```\n\nIt's possible to change bind address/port of RDMA by runtime command:\n\n    192.168.122.100:6379> CONFIG SET rdma-port 6380\n\nIt's also possible to have both RDMA and TCP available, and there is no\nconflict of TCP(6379) and RDMA(6379), Ex:\n\n    % ./src/valkey-server --protected-mode no \\\n         --loadmodule src/valkey-rdma.so --rdma-bind 192.168.122.100 --rdma-port 6379 \\\n         --port 6379\n\nNote that the network card (192.168.122.100 of this example) should support\nRDMA. To test a server supports RDMA or not:\n\n    % rdma res show (a new version iproute2 package)\nOr:\n\n    % ibv_devices\n\n\n# Playing with Valkey\n\nYou can use valkey-cli to play with Valkey. Start a valkey-server instance,\nthen in another terminal try the following:\n\n    % cd src\n    % ./valkey-cli\n    valkey> ping\n    PONG\n    valkey> set foo bar\n    OK\n    valkey> get foo\n    \"bar\"\n    valkey> incr mycounter\n    (integer) 1\n    valkey> incr mycounter\n    (integer) 2\n    valkey>\n\n# Installing Valkey\n\nIn order to install Valkey binaries into /usr/local/bin, just use:\n\n    % make install\n\nYou can use `make PREFIX=/some/other/directory install` if you wish to use a\ndifferent destination.\n\n_Note_: For compatibility with Redis, we create symlinks from the Redis names (`redis-server`, `redis-cli`, etc.) to the Valkey binaries installed by `make install`.\nThe symlinks are created in same directory as the Valkey binaries.\nThe symlinks are removed when using `make uninstall`.\nThe creation of the symlinks can be skipped by setting the makefile variable `USE_REDIS_SYMLINKS=no`.\n\n`make install` will just install binaries in your system, but will not configure\ninit scripts and configuration files in the appropriate place. This is not\nneeded if you just want to play a bit with Valkey, but if you are installing\nit the proper way for a production system, we have a script that does this\nfor Ubuntu and Debian systems:\n\n    % cd utils\n    % ./install_server.sh\n\n_Note_: `install_server.sh` will not work on Mac OSX; it is built for Linux only.\n\nThe script will ask you a few questions and will setup everything you need\nto run Valkey properly as a background daemon that will start again on\nsystem reboots.\n\nYou'll be able to stop and start Valkey using the script named\n`/etc/init.d/valkey_<portnumber>`, for instance `/etc/init.d/valkey_6379`.\n\n# Building using `CMake`\n\nIn addition to the traditional `Makefile` build, Valkey supports an alternative, **experimental**, build system using `CMake`.\n\nTo build and install `Valkey`, in `Release` mode (an optimized build), type this into your terminal:\n\n```bash\nmkdir build-release\ncd $_\ncmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/valkey\nsudo make install\n# Valkey is now installed under /opt/valkey\n```\n\nOther options supported by Valkey's `CMake` build system:\n\n## Special build flags\n\n- `-DBUILD_TLS=<yes|no>` enable TLS build for Valkey. Default: `no`\n- `-DBUILD_RDMA=<no|module>` enable RDMA module build (only module mode supported). Default: `no`\n- `-DBUILD_MALLOC=<libc|jemalloc|tcmalloc|tcmalloc_minimal>` choose the allocator to use. Default on Linux: `jemalloc`, for other OS: `libc`\n- `-DBUILD_SANITIZER=<address|thread|undefined>` build with address sanitizer enabled. Default: disabled (no sanitizer)\n- `-DBUILD_UNIT_TESTS=[yes|no]`  when set, the build will produce the executable `valkey-unit-tests`. Default: `no`\n- `-DBUILD_TEST_MODULES=[yes|no]`  when set, the build will include the modules located under the `tests/modules` folder. Default: `no`\n- `-DBUILD_EXAMPLE_MODULES=[yes|no]`  when set, the build will include the example modules located under the `src/modules` folder. Default: `no`\n\n## Common flags\n\n- `-DCMAKE_BUILD_TYPE=<Debug|Release...>` define the build type, see CMake manual for more details\n- `-DCMAKE_INSTALL_PREFIX=/installation/path` override this value to define a custom install prefix. Default: `/usr/local`\n- `-G\"<Generator Name>\"` generate build files for \"Generator Name\". By default, CMake will generate `Makefile`s.\n\n## Verbose build\n\n`CMake` generates a user-friendly colorized output by default.\nIf you want to see a more verbose output, use the following:\n\n```bash\nmake VERBOSE=1\n```\n\n## Troubleshooting\n\nDuring the `CMake` stage, `CMake` caches variables in a local file named `CMakeCache.txt`. All variables generated by Valkey\nare removed from the cache once consumed (this is done by calling to `unset(VAR-NAME CACHE)`). However, some variables,\nlike the compiler path, are kept in cache. To start a fresh build either remove the cache file `CMakeCache.txt` from the\nbuild folder, or delete the build folder completely.\n\n**It is important to re-run `CMake` when adding new source files.**\n\n## Integration with IDE\n\nDuring the `CMake` stage of the build, `CMake` generates a JSON file named `compile_commands.json` and places it under the\nbuild folder. This file is used by many IDEs and text editors for providing code completion (via `clangd`).\n\nA small caveat is that these tools will look for `compile_commands.json` under the Valkey's top folder.\nA common workaround is to create a symbolic link to it:\n\n```bash\ncd /path/to/valkey/\n# We assume here that your build folder is `build-release`\nln -sf $(pwd)/build-release/compile_commands.json $(pwd)/compile_commands.json\n```\n\nRestart your IDE and voila\n\n# Code contributions\n\nPlease see the [CONTRIBUTING.md][2]. For security bugs and vulnerabilities, please see [SECURITY.md][3].\n\n# Valkey is an open community project under LF Projects\n\nValkey a Series of LF Projects, LLC\n2810 N Church St, PMB 57274\nWilmington, Delaware 19802-4447\n\n[1]: https://github.com/valkey-io/valkey/blob/unstable/COPYING\n[2]: https://github.com/valkey-io/valkey/blob/unstable/CONTRIBUTING.md\n[3]: https://github.com/valkey-io/valkey/blob/unstable/SECURITY.md\n"
}