{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: tests.yml\nContent:\nname: tests\n\non:\n  push:\n    branches-ignore:\n      - 'gh-pages'\n  pull_request:\n    branches-ignore:\n      - 'gh-pages'\n\npermissions:\n  contents: read\n\njobs:\n  # Label of the container job\n  sqlite:\n    strategy:\n      matrix:\n        go: ['1.19', '1.18']\n        platform: [ubuntu-latest] # can not run in windows OS\n    runs-on: ${{ matrix.platform }}\n\n    steps:\n    - name: Set up Go 1.x\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Check out code into the Go module directory\n      uses: actions/checkout@v3\n\n    - name: go mod package cache\n      uses: actions/cache@v3\n      with:\n        path: ~/go/pkg/mod\n        key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('tests/go.mod') }}\n\n    - name: Tests\n      run: GITHUB_ACTION=true GORM_DIALECT=sqlite ./tests/tests_all.sh\n\n  mysql:\n    strategy:\n      matrix:\n        dbversion: ['mysql:latest', 'mysql:5.7', 'mariadb:latest']\n        go: ['1.19', '1.18']\n        platform: [ubuntu-latest]\n    runs-on: ${{ matrix.platform }}\n\n    services:\n      mysql:\n        image: ${{ matrix.dbversion }}\n        env:\n          MYSQL_DATABASE: gorm\n          MYSQL_USER: gorm\n          MYSQL_PASSWORD: gorm\n          MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n        ports:\n          - 9910:3306\n        options: >-\n          --health-cmd \"mysqladmin ping -ugorm -pgorm\"\n          --health-interval 10s\n          --health-start-period 10s\n          --health-timeout 5s\n          --health-retries 10\n\n    steps:\n    - name: Set up Go 1.x\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Check out code into the Go module directory\n      uses: actions/checkout@v3\n\n\n    - name: go mod package cache\n      uses: actions/cache@v3\n      with:\n        path: ~/go/pkg/mod\n        key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('tests/go.mod') }}\n\n    - name: Tests\n      run: GITHUB_ACTION=true GORM_DIALECT=mysql GORM_DSN=\"gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&parseTime=True\" ./tests/tests_all.sh\n\n  postgres:\n    strategy:\n      matrix:\n        dbversion: ['postgres:latest', 'postgres:13', 'postgres:12', 'postgres:11', 'postgres:10']\n        go: ['1.19', '1.18']\n        platform: [ubuntu-latest] # can not run in macOS and Windows\n    runs-on: ${{ matrix.platform }}\n\n    services:\n      postgres:\n        image: ${{ matrix.dbversion }}\n        env:\n          POSTGRES_PASSWORD: gorm\n          POSTGRES_USER: gorm\n          POSTGRES_DB: gorm\n          TZ: Asia/Shanghai\n        ports:\n          - 9920:5432\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n    - name: Set up Go 1.x\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Check out code into the Go module directory\n      uses: actions/checkout@v3\n\n    - name: go mod package cache\n      uses: actions/cache@v3\n      with:\n        path: ~/go/pkg/mod\n        key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('tests/go.mod') }}\n\n    - name: Tests\n      run: GITHUB_ACTION=true GORM_DIALECT=postgres GORM_DSN=\"user=gorm password=gorm dbname=gorm host=localhost port=9920 sslmode=disable TimeZone=Asia/Shanghai\" ./tests/tests_all.sh\n\n  sqlserver:\n    strategy:\n      matrix:\n        go: ['1.19', '1.18']\n        platform: [ubuntu-latest] # can not run test in macOS and windows\n    runs-on: ${{ matrix.platform }}\n\n    services:\n      mssql:\n        image: mcmoe/mssqldocker:latest\n        env:\n          ACCEPT_EULA: Y\n          SA_PASSWORD: LoremIpsum86\n          MSSQL_DB: gorm\n          MSSQL_USER: gorm\n          MSSQL_PASSWORD: LoremIpsum86\n        ports:\n          - 9930:1433\n        options: >-\n          --health-cmd=\"/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P LoremIpsum86 -l 30 -Q \\\"SELECT 1\\\" || exit 1\"\n          --health-start-period 10s\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 10\n\n    steps:\n    - name: Set up Go 1.x\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Check out code into the Go module directory\n      uses: actions/checkout@v3\n\n    - name: go mod package cache\n      uses: actions/cache@v3\n      with:\n        path: ~/go/pkg/mod\n        key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('tests/go.mod') }}\n\n    - name: Tests\n      run: GITHUB_ACTION=true GORM_DIALECT=sqlserver GORM_DSN=\"sqlserver://gorm:LoremIpsum86@localhost:9930?database=gorm\" ./tests/tests_all.sh\n",
    "readme": "# GORM\n\nThe fantastic ORM library for Golang, aims to be developer friendly.\n\n[![go report card](https://goreportcard.com/badge/github.com/go-gorm/gorm \"go report card\")](https://goreportcard.com/report/github.com/go-gorm/gorm)\n[![test status](https://github.com/go-gorm/gorm/workflows/tests/badge.svg?branch=master \"test status\")](https://github.com/go-gorm/gorm/actions)\n[![Join the chat at https://gitter.im/jinzhu/gorm](https://img.shields.io/gitter/room/jinzhu/gorm.svg)](https://gitter.im/jinzhu/gorm?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Open Collective Backer](https://opencollective.com/gorm/tiers/backer/badge.svg?label=backer&color=brightgreen \"Open Collective Backer\")](https://opencollective.com/gorm)\n[![Open Collective Sponsor](https://opencollective.com/gorm/tiers/sponsor/badge.svg?label=sponsor&color=brightgreen \"Open Collective Sponsor\")](https://opencollective.com/gorm)\n[![MIT license](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![Go.Dev reference](https://img.shields.io/badge/go.dev-reference-blue?logo=go&logoColor=white)](https://pkg.go.dev/gorm.io/gorm?tab=doc)\n\n## Overview\n\n* Full-Featured ORM\n* Associations (Has One, Has Many, Belongs To, Many To Many, Polymorphism, Single-table inheritance)\n* Hooks (Before/After Create/Save/Update/Delete/Find)\n* Eager loading with `Preload`, `Joins`\n* Transactions, Nested Transactions, Save Point, RollbackTo to Saved Point\n* Context, Prepared Statement Mode, DryRun Mode\n* Batch Insert, FindInBatches, Find To Map\n* SQL Builder, Upsert, Locking, Optimizer/Index/Comment Hints, NamedArg, Search/Update/Create with SQL Expr\n* Composite Primary Key\n* Auto Migrations\n* Logger\n* Extendable, flexible plugin API: Database Resolver (Multiple Databases, Read/Write Splitting) / Prometheus\u2026\n* Every feature comes with tests\n* Developer Friendly\n\n## Getting Started\n\n* GORM Guides [https://gorm.io](https://gorm.io)\n* Gen Guides [https://gorm.io/gen/index.html](https://gorm.io/gen/index.html)\n\n## Contributing\n\n[You can help to deliver a better GORM, check out things you can do](https://gorm.io/contribute.html)\n\n## Contributors\n\nThank you for contributing to the GORM framework!\n\n[![Contributors](https://contrib.rocks/image?repo=go-gorm/gorm)](https://github.com/go-gorm/gorm/graphs/contributors)\n\n## License\n\n\u00a9 Jinzhu, 2013~time.Now\n\nReleased under the [MIT License](https://github.com/go-gorm/gorm/blob/master/License)\n"
}