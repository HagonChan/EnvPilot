{
    "primary_language": "Java",
    "language_guidelines": "Programming Language guidelines for Java:\n# General Guidelines:\n**General Guidelines for Java Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for any dependencies listed in the README or in configuration files like `pom.xml` (for Maven) or `build.gradle` (for Gradle). Ensure you have the required JDK version installed.  \n\n3. **Build Tool**  \n   Identify which build tool the project is using: Maven or Gradle. This information should be available in the README or through project configuration files (`pom.xml` for Maven, `build.gradle` for Gradle).  \n\n4. **Build the Project**  \n   Use the appropriate commands based on the build tool:  \n   - For Maven:  \n     ```  \n     mvn clean install  \n     ```  \n   - For Gradle:  \n     ```  \n     gradle build  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., property files, YAML files) and set them up accordingly.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly.  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific class, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci-4.x.yml\nContent:\nname: vertx-core (4.x)\non:\n  schedule:\n    - cron: '0 4 * * *'\njobs:\n  CI:\n    strategy:\n      matrix:\n        include:\n          - os: ubuntu-latest\n            jdk: 8\n          - os: ubuntu-latest\n            jdk: 8\n            profile: '-PtestNativeTransport'\n          - os: ubuntu-latest\n            jdk: 8\n            profile: '-PtestDomainSockets'\n          - os: ubuntu-latest\n            jdk: 21\n          - os: windows-latest\n            jdk: 8\n    uses: ./.github/workflows/ci.yml\n    with:\n      branch: 4.x\n      jdk: ${{ matrix.jdk }}\n      os: ${{ matrix.os }}\n      profile: ${{ matrix.profile }}\n    secrets: inherit\n  Deploy:\n    if: ${{ github.repository_owner == 'eclipse-vertx' && (github.event_name == 'push' || github.event_name == 'schedule') }}\n    needs: CI\n    uses: ./.github/workflows/deploy.yml\n    with:\n      branch: 4.x\n      jdk: 8\n    secrets: inherit\n\nfile: ci-5.x-stable.yml\nContent:\nname: vert.x (5.x-stable)\non:\n  push:\n    branches:\n      - '5.[0-9]+'\n  pull_request:\n    branches:\n      - '5.[0-9]+'\n  schedule:\n    - cron: '0 6 * * *'\njobs:\n  CI-CD:\n    uses: ./.github/workflows/ci-matrix-5.x.yml\n    secrets: inherit\n    with:\n      branch: ${{ github.event_name == 'schedule' && vars.VERTX_5_STABLE_BRANCH || github.event.pull_request.head.sha || github.ref_name }}\n\nfile: ci-5.x.yml\nContent:\nname: vert.x (5.x)\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 5 * * *'\njobs:\n  CI-CD:\n    uses: ./.github/workflows/ci-matrix-5.x.yml\n    secrets: inherit\n    with:\n      branch: ${{ github.event.pull_request.head.sha || github.ref_name }}\n\nfile: ci-matrix-5.x.yml\nContent:\nname: CI matrix (5.x)\non:\n  workflow_call:\n    inputs:\n      branch:\n        required: true\n        type: string\njobs:\n  CI:\n    strategy:\n      matrix:\n        include:\n          - os: ubuntu-latest\n            jdk: 11\n          - os: ubuntu-latest\n            jdk: 11\n            profile: '-PNativeEpoll'\n#          - os: ubuntu-latest\n#            jdk: 11\n#            profile: '-PNativeIoUring'\n          - os: ubuntu-latest\n            jdk: 11\n            profile: '-PNativeEpoll+DomainSockets'\n          - os: ubuntu-latest\n            jdk: 21\n          - os: windows-latest\n            jdk: 11\n            stable: true\n#          - os: macos-latest\n#            jdk: 11\n#            profile: '-PNativeKQueue'\n    uses: ./.github/workflows/ci.yml\n    with:\n      branch: ${{ inputs.branch }}\n      jdk: ${{ matrix.jdk }}\n      os: ${{ matrix.os }}\n      profile: ${{ matrix.profile }}\n    secrets: inherit\n  Deploy:\n    if: ${{ github.repository_owner == 'eclipse-vertx' && (github.event_name == 'push' || github.event_name == 'schedule') }}\n    needs: CI\n    uses: ./.github/workflows/deploy.yml\n    with:\n      branch: ${{ inputs.branch }}\n      jdk: 11\n    secrets: inherit\n\nfile: ci.yml\nContent:\nname: CI\non:\n  workflow_call:\n    inputs:\n      branch:\n        required: true\n        type: 'string'\n      jdk:\n        default: 8\n        type: 'string'\n      os:\n        default: ubuntu-latest\n        type: 'string'\n      profile:\n        default: ''\n        type: 'string'\njobs:\n  Test:\n    name: Run tests\n    runs-on: ${{ inputs.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ inputs.branch }}\n      - name: Install JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: ${{ inputs.jdk }}\n          distribution: temurin\n      - name: Run tests\n        run: mvn -s .github/maven-ci-settings.xml -q clean verify -B ${{ inputs.profile }}\n",
    "readme": "[![Build Status (5.x)](https://github.com/eclipse-vertx/vert.x/actions/workflows/ci-5.x.yml/badge.svg)](https://github.com/eclipse-vertx/vert.x/actions/workflows/ci-5.x.yml)\n[![Build Status (4.x)](https://github.com/eclipse-vertx/vert.x/actions/workflows/ci-4.x.yml/badge.svg)](https://github.com/eclipse-vertx/vert.x/actions/workflows/ci-4.x.yml)\n\n## Vert.x Core\n\nThis is the repository for Vert.x core.\n\nVert.x core contains fairly low-level functionality, including support for HTTP, TCP, file system access, and various other features. You can use this directly in your own applications, and it's used by many of the other components of Vert.x.\n\nFor more information on Vert.x and where Vert.x core fits into the big picture please see the [website](http://vertx.io).\n\n## Building Vert.x artifacts\n\n```\n> mvn package\n```\n\n## Running tests\n\nRuns the tests\n\n```\n> mvn test\n```\n\nTests can be run with specified HTTP port and/or HTTPS port.\n\n```\n> mvn test -Dvertx.httpPort=8888 -Dvertx.httpsPort=4044\n```\n\nVert.x supports native transport on BSD and Linux, to run the tests with native transport\n\n```\n> mvn test -PNativeEpoll\n> mvn test -PNativeIoUring\n> mvn test -PNativeKQueue\n```\n\nVert.x supports domain sockets on Linux exclusively, to run the tests with domain sockets\n\n```\n> mvn test -PNativeEpoll+DomainSockets\n```\n\nVert.x has integrations tests that run a differently configured JVM (classpath, system properties, etc....)\n\n```\n> vertx verify -Dtest=FooTest # FooTest does not exists, its only purpose is to execute no tests during the test phase\n```\n\n## Building documentation\n\n```\n> mvn package -Pdocs -DskipTests\n```\n\nOpen _target/docs/vertx-core/java/index.html_ with your browser\n\n\n",
    "org": "eclipse-vertx",
    "repo": "vert.x",
    "number": 5650,
    "commit": "12a0fd3a4dff0613c88bafafed632b8b19515d58"
}