{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "",
    "readme": "# Concourse: the continuous thing-doer.\n\n[![Discord](https://img.shields.io/discord/219899946617274369.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)][discord]\n[![Build](https://ci.concourse-ci.org/api/v1/teams/main/pipelines/concourse/badge)](https://ci.concourse-ci.org/teams/main/pipelines/concourse)\n[![Contributors](https://img.shields.io/github/contributors/concourse/concourse)](https://github.com/concourse/concourse/graphs/contributors)\n[![Help Wanted](https://img.shields.io/github/labels/concourse/concourse/help%20wanted)](https://github.com/concourse/concourse/labels/help%20wanted)\n\nConcourse is an automation system written in Go. It is most commonly used for\nCI/CD, and is built to scale to any kind of automation pipeline, from simple to\ncomplex.\n\n![booklit pipeline](screenshots/booklit-pipeline.png)\n\nConcourse is very opinionated about a few things: idempotency, immutability,\ndeclarative config, stateless workers, and reproducible builds.\n\n## The road to Concourse v10\n\n[Concourse v10][v10] is the code name for a set of features which, when used\nin combination, will have a massive impact on Concourse's capabilities as a\ngeneric continuous thing-doer. These features, and how they interact, are\ndescribed in detail in the [Core roadmap: towards v10][v10] and [Re-inventing\nresource types][prototypes] blog posts. (These posts are *slightly* out of\ndate, but they get the idea across.)\n\nNotably, **v10 will make Concourse not suck for multi-branch and/or\npull-request driven workflows** - examples of *spatial* change, where the set\nof things to automate grows and shrinks over time.\n\nBecause v10 is really an alias for a ton of separate features, there's a lot\nto keep track of - here's an overview:\n\n| Feature                  | RFC              | Status |\n| ------------------------ | ---------------- | ------ |\n| `set_pipeline` step      | \u2714 [#31][rfc-31]  | \u2714 v5.8.0 (experimental) |\n| Var sources for creds    | \u2714 [#39][rfc-39]  | \u2714 v5.8.0 (experimental), TODO: [#5813][issue-5813] |\n| Archiving pipelines      | \u2714 [#33][rfc-33]  | \u2714 v6.5.0 |\n| Instanced pipelines      | \u2714 [#34][rfc-34]  | \u2714 v7.0.0 (experimental) |\n| Static `across` step     | \ud83d\udea7 [#29][rfc-29] | \u2714 v6.5.0 (experimental) |\n| Dynamic `across` step    | \ud83d\udea7 [#29][rfc-29] | \u2714 v7.4.0 (experimental, not released yet) |\n| Projects                 | \ud83d\udea7 [#32][rfc-32] | \ud83d\ude4f RFC needs feedback! |\n| `load_var` step          | \u2714 [#27][rfc-27]  | \u2714 v6.0.0 (experimental) |\n| `get_var` step           | \u2714 [#27][rfc-27]  | \ud83d\udea7 [#5815][issue-5815] in progress! |\n| [Prototypes][prototypes] | \u2714 [#37][rfc-37]  | \u26a0 Pending first use of protocol (any of the below) |\n| `run` step               | \ud83d\udea7 [#37][rfc-37]  | \u26a0 Pending its own RFC, but feel free to experiment |\n| Resource prototypes      | \u2714 [#38][rfc-38]  | \ud83d\ude4f [#5870][issue-5870] looking for volunteers! |\n| Var source prototypes    |                  | \ud83d\udea7 [#6275][issue-6275] planned, may lead to RFC |\n| Notifier prototypes      | \ud83d\udea7 [#28][rfc-28] | \u26a0 RFC not ready |\n\nThe Concourse team at VMware will be working on these features, however in the\ninterest of growing a healthy community of contributors we would really\nappreciate any volunteers. This roadmap is very easy to parallelize, as it is\ncomprised of many orthogonal features, so the faster we can power through it,\nthe faster we can all benefit. We want these for our own pipelines too! \ud83d\ude06\n\nIf you'd like to get involved, hop in [Discord][discord] or leave a comment on\nany of the issues linked above so we can coordinate. We're more than happy to\nhelp figure things out or pick up any work that you don't feel comfortable\ndoing (e.g. UI, unfamiliar parts, etc.).\n\nThanks to everyone who has contributed so far, whether in code or in the\ncommunity, and thanks to everyone for their patience while we figure out how to\nsupport such common functionality the \"Concoursey way!\" \ud83d\ude4f\n\n[issue-5813]: https://github.com/concourse/concourse/issues/5813\n[issue-5814]: https://github.com/concourse/concourse/issues/5814\n[issue-5815]: https://github.com/concourse/concourse/issues/5815\n[issue-5870]: https://github.com/concourse/concourse/issues/5870\n[issue-5921]: https://github.com/concourse/concourse/issues/5921\n[issue-6275]: https://github.com/concourse/concourse/issues/6275\n[pr-5896]: https://github.com/concourse/concourse/pull/5896\n[rfc-27]: https://github.com/concourse/rfcs/blob/master/027-var-steps/proposal.md\n[rfc-28]: https://github.com/concourse/rfcs/pull/28\n[rfc-29]: https://github.com/concourse/rfcs/pull/29\n[rfc-31]: https://github.com/concourse/rfcs/blob/master/031-set-pipeline-step/proposal.md\n[rfc-32]: https://github.com/concourse/rfcs/pull/32\n[rfc-33]: https://github.com/concourse/rfcs/blob/master/033-archiving-pipelines/proposal.md\n[rfc-34]: https://github.com/concourse/rfcs/blob/master/034-instanced-pipelines/proposal.md\n[rfc-37]: https://github.com/concourse/rfcs/blob/master/037-prototypes/proposal.md\n[rfc-38]: https://github.com/concourse/rfcs/blob/master/038-resource-prototypes/proposal.md\n[rfc-39]: https://github.com/concourse/rfcs/blob/master/039-var-sources/proposal.md\n\n[v10]: https://blog.concourse-ci.org/2019/07/17/core-roadmap-towards-v10.html\n[prototypes]: https://blog.concourse-ci.org/2019/10/15/reinventing-resource-types.html\n\n## Installation\n\nConcourse is distributed as a single `concourse` binary, available on the [Releases page](https://github.com/concourse/concourse/releases/latest).\n\nIf you want to just kick the tires, jump ahead to the [Quick Start](#quick-start).\n\nIn addition to the `concourse` binary, there are a few other supported formats.\nConsult their GitHub repos for more information:\n\n* [Docker image](https://github.com/concourse/concourse-docker)\n* [BOSH release](https://github.com/concourse/concourse-bosh-release)\n* [Kubernetes Helm chart](https://github.com/concourse/concourse-chart)\n\n\n## Quick Start\n\n```sh\n$ wget https://concourse-ci.org/docker-compose.yml\n$ docker-compose up\nCreating docs_concourse-db_1 ... done\nCreating docs_concourse_1    ... done\n```\n\nConcourse will be running at [127.0.0.1:8080](http://127.0.0.1:8080). You can\nlog in with the username/password as `test`/`test`.\n\n> :warning: **If you are using an M1 mac**: M1 macs are incompatible with the `containerd` runtime. After downloading the docker-compose file, change `CONCOURSE_WORKER_RUNTIME: \"containerd\"` to `CONCOURSE_WORKER_RUNTIME: \"houdini\"`.\n**This feature is experimental**\n\nNext, install `fly` by downloading it from the web UI and target your local\nConcourse as the `test` user:\n\n```sh\n$ fly -t ci login -c http://127.0.0.1:8080 -u test -p test\nlogging in to team 'main'\n\ntarget saved\n```\n\n### Configuring a Pipeline\n\nThere is no GUI for configuring Concourse. Instead, pipelines are configured as\ndeclarative YAML files:\n\n```yaml\nresources:\n- name: booklit\n  type: git\n  source: {uri: \"https://github.com/vito/booklit\"}\n\njobs:\n- name: unit\n  plan:\n  - get: booklit\n    trigger: true\n  - task: test\n    file: booklit/ci/test.yml\n```\n\nMost operations are done via the accompanying `fly` CLI. If you've got Concourse\n[installed](https://concourse-ci.org/install.html), try saving the above example\nas `booklit.yml`, [target your Concourse\ninstance](https://concourse-ci.org/fly.html#fly-login), and then run:\n\n```sh\nfly -t ci set-pipeline -p booklit -c booklit.yml\n```\n\nThese pipeline files are self-contained, maximizing portability from one\nConcourse instance to the next.\n\n\n### Learn More\n\n* The [Official Site](https://concourse-ci.org) for documentation,\n  reference material, and example pipelines (which no longer live in this repository).\n* The [Concourse Tutorial](https://concoursetutorial.com) by Stark & Wayne is\n  great for a guided introduction to all the core concepts.\n* See Concourse in action with our [production pipelines](https://ci.concourse-ci.org/)\n* Hang around in the [GitHub discussions](https://github.com/concourse/concourse/discussions) or in\n  [Discord](https://discord.gg/MeRxXKW).\n* See what we're working on the [project board](https://github.com/orgs/concourse/projects). \n\n\n## Contributing\n\nOur user base is basically everyone that develops software (and wants it to\nwork).\n\nIt's a lot of work, and we need your help! If you're interested, check out our\n[contributing docs](CONTRIBUTING.md).\n\n[discord]: https://discord.gg/MeRxXKW\n",
    "org": "concourse",
    "repo": "concourse",
    "number": 9103,
    "commit": "55ff4b2410cb67746c14438a0af658151deb20b0"
}