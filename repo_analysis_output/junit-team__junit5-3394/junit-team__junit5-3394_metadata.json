{
    "primary_language": "Java",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Java Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for any dependencies listed in the README or in configuration files like `pom.xml` (for Maven) or `build.gradle` (for Gradle). Ensure you have the required JDK version installed.  \n\n3. **Build Tool**  \n   Identify which build tool the project is using: Maven or Gradle. This information should be available in the README or through project configuration files (`pom.xml` for Maven, `build.gradle` for Gradle).  \n\n4. **Build the Project**  \n   Use the appropriate commands based on the build tool:  \n   - For Maven:  \n     ```  \n     mvn clean install  \n     ```  \n   - For Gradle:  \n     ```  \n     gradle build  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., property files, YAML files) and set them up accordingly.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly.  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific class, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: reproducible-build.yml\nContent:\nname: Reproducible build\n\non:\n  push:\n    branches:\n      - main\n      - 'releases/**'\n  pull_request:\n    branches:\n      - '*'\n\nenv:\n  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n\njobs:\n  check_build_reproducibility:\n    name: 'Check build reproducibility'\n    runs-on: ubuntu-latest\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: Restore Gradle cache and display toolchains\n      uses: ./.github/actions/run-gradle\n      with:\n        arguments: --quiet\n    - name: Build and compare checksums\n      shell: bash\n      run: |\n        ./gradle/scripts/checkBuildReproducibility.sh\n\nfile: main.yml\nContent:\nname: CI\n\non:\n  push:\n    branches:\n      - main\n      - 'releases/**'\n  pull_request:\n    branches:\n      - '*'\n\nenv:\n  ENTERPRISE_TESTDISTRIBUTION_ENABLED: true\n  BUILDCACHE_USERNAME: ${{ secrets.BUILD_CACHE_USERNAME }}\n  BUILDCACHE_PASSWORD: ${{ secrets.BUILD_CACHE_PASSWORD }}\n  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n\njobs:\n  Linux:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: Install Graphviz\n      run: |\n        sudo apt-get update\n        sudo apt-get install graphviz\n    - name: Install GraalVM\n      uses: graalvm/setup-graalvm@v1\n      with:\n        version: 'latest'\n        java-version: '17'\n        components: 'native-image'\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n    - name: Build\n      uses: ./.github/actions/main-build\n      with:\n        arguments: |\n          -Ptesting.enableJaCoCo\n          build\n          jacocoRootReport\n          prepareDocsForUploadToGhPages\n    - name: Upload to Codecov.io\n      uses: codecov/codecov-action@v3\n\n  Windows:\n    runs-on: windows-latest\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: Build\n      uses: ./.github/actions/main-build\n\n  macOS:\n    runs-on: macos-latest\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: Build\n      uses: ./.github/actions/main-build\n\n  publish_artifacts:\n    name: Publish Snapshot Artifacts\n    needs: linux\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' && github.repository == 'junit-team/junit5' && (startsWith(github.ref, 'refs/heads/releases/') || github.ref == 'refs/heads/main')\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: Publish\n      uses: ./.github/actions/run-gradle\n      env:\n        ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}\n        ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}\n      with:\n        arguments: publish -x check\n\n  update_documentation:\n    name: Update Snapshot Documentation\n    concurrency:\n      group: github-pages\n      cancel-in-progress: true\n    needs: Linux\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' && github.repository == 'junit-team/junit5' && github.ref == 'refs/heads/main'\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: Install Graphviz\n      run: |\n        sudo apt-get update\n        sudo apt-get install graphviz\n    - name: Restore Gradle cache and display toolchains\n      uses: ./.github/actions/run-gradle\n      with:\n        arguments: --quiet\n    - name: Upload Documentation\n      env:\n        GRGIT_USER: ${{ secrets.GH_TOKEN }}\n      run: ./gradle/scripts/publishDocumentationSnapshotOnlyIfNecessary.sh\n",
    "readme": "# <img src=\"https://junit.org/junit5/assets/img/junit5-logo.png\" align=\"right\" width=\"100\">JUnit 5\n\nThis repository is the home of _JUnit 5_.\n\n[![Support JUnit](https://img.shields.io/badge/%F0%9F%92%9A-Support%20JUnit-brightgreen.svg)](https://junit.org/sponsoring)\n\n## Latest Releases\n\n- General Availability (GA): [JUnit 5.9.3](https://github.com/junit-team/junit5/releases/tag/r5.9.3) (April 26, 2023)\n- Preview (Milestone/Release Candidate): [JUnit 5.10.0-RC1](https://github.com/junit-team/junit5/releases/tag/r5.10.0-RC1) (July 6, 2023)\n\n## Documentation\n\n- [User Guide]\n- [Javadoc]\n- [Release Notes]\n- [Samples]\n\n## Contributing\n\nContributions to JUnit 5 are both welcomed and appreciated. For specific guidelines\nregarding contributions, please see [CONTRIBUTING.md] in the root directory of the\nproject. Those willing to use milestone or SNAPSHOT releases are encouraged\nto file feature requests and bug reports using the project's\n[issue tracker](https://github.com/junit-team/junit5/issues). Issues marked with an\n<a href=\"https://github.com/junit-team/junit5/issues?q=is%3Aissue+is%3Aopen+label%3Aup-for-grabs\">`up-for-grabs`</a>\nlabel are specifically targeted for community contributions.\n\n## Getting Help\n\nAsk JUnit 5 related questions on [StackOverflow] or chat with the community on [Gitter].\n\n## Continuous Integration Builds\n\n[![CI Status](https://github.com/junit-team/junit5/workflows/CI/badge.svg)](https://github.com/junit-team/junit5/actions) [![Cross-Version Status](https://github.com/junit-team/junit5/workflows/Cross-Version/badge.svg)](https://github.com/junit-team/junit5/actions)\n\nOfficial CI build server for JUnit 5. Used to perform quick checks on submitted pull\nrequests and for build matrices including the latest released OpenJDK and early access\nbuilds of the next OpenJDK.\n\n## Code Coverage\n\nCode coverage using [JaCoCo] for the latest build is available on [Codecov].\n\nA code coverage report can also be generated locally via the [Gradle Wrapper] by\nexecuting `./gradlew -Ptesting.enableJaCoCo clean jacocoRootReport`. The results will be available\nin `build/reports/jacoco/jacocoRootReport/html/index.html`.\n\n## Gradle Enterprise\n\n[![Revved up by Gradle Enterprise](https://img.shields.io/badge/Revved%20up%20by-Gradle%20Enterprise-06A0CE?logo=Gradle&labelColor=02303A)](https://ge.junit.org/scans)\n\nJUnit 5 utilizes [Gradle Enterprise](https://gradle.com/) for _Build Scans_, _Build Cache_, and _Test Distribution_.\n\nThe latest Build Scans are available on [ge.junit.org](https://ge.junit.org/). Currently,\nonly core team members can publish Build Scans and use Test Distribution on that server.\nYou can, however, publish a Build Scan to [scans.gradle.com](https://scans.gradle.com/) by\nusing the `--scan` parameter explicitly.\n\nThe remote Build Cache is enabled by default for everyone so that local builds can reuse\ntask outputs from previous CI builds.\n\n## Building from Source\n\nYou need [JDK 17] to build JUnit 5. [Gradle toolchains] are used to detect and\npotentially download additional JDKs for compilation and test execution.\n\nAll modules can be _built_ and _tested_ with the [Gradle Wrapper] using the following command.\n\n`./gradlew build`\n\n## Installing in Local Maven Repository\n\nAll modules can be _installed_ with the [Gradle Wrapper] in a local Maven repository for\nconsumption in other projects via the following command.\n\n`./gradlew publishToMavenLocal`\n\n## Dependency Metadata\n\n[![JUnit Jupiter version](https://img.shields.io/maven-central/v/org.junit.jupiter/junit-jupiter/5..svg?color=25a162&label=Jupiter)](https://central.sonatype.com/search?namespace=org.junit.jupiter)\n[![JUnit Vintage version](https://img.shields.io/maven-central/v/org.junit.vintage/junit-vintage-engine/5..svg?color=25a162&label=Vintage)](https://central.sonatype.com/search?namespace=org.junit.vintage)\n[![JUnit Platform version](https://img.shields.io/maven-central/v/org.junit.platform/junit-platform-commons/1..svg?color=25a162&label=Platform)](https://central.sonatype.com/search?namespace=org.junit.platform)\n\nConsult the [Dependency Metadata] section of the [User Guide] for a list of all artifacts\nof the JUnit Platform, JUnit Jupiter, and JUnit Vintage.\n\nSee also <https://repo1.maven.org/maven2/org/junit/> for releases and\n<https://oss.sonatype.org/content/repositories/snapshots/org/junit/> for snapshots.\n\n\n[Codecov]: https://codecov.io/gh/junit-team/junit5\n[CONTRIBUTING.md]: https://github.com/junit-team/junit5/blob/HEAD/CONTRIBUTING.md\n[Dependency Metadata]: https://junit.org/junit5/docs/current/user-guide/#dependency-metadata\n[Gitter]: https://gitter.im/junit-team/junit5\n[Gradle toolchains]: https://docs.gradle.org/current/userguide/toolchains.html\n[Gradle Wrapper]: https://docs.gradle.org/current/userguide/gradle_wrapper.html#sec:using_wrapper\n[JaCoCo]: https://www.eclemma.org/jacoco/\n[Javadoc]: https://junit.org/junit5/docs/current/api/\n[JDK 17]: https://foojay.io/almanac/java-17/\n[Release Notes]: https://junit.org/junit5/docs/current/release-notes/\n[Samples]: https://github.com/junit-team/junit5-samples\n[StackOverflow]: https://stackoverflow.com/questions/tagged/junit5\n[User Guide]: https://junit.org/junit5/docs/current/user-guide/\n",
    "org": "junit-team",
    "repo": "junit5",
    "number": 3394,
    "commit": "ba34eed48691f8c076674e25266ee4f9254356c6"
}