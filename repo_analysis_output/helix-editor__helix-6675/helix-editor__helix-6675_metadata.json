{
    "primary_language": "Rust",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\nname: Build\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  merge_group:\n  schedule:\n    - cron: '00 01 * * *'\n\njobs:\n  check:\n    name: Check (msrv)\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout sources\n        uses: actions/checkout@v3\n      - name: Install stable toolchain\n        uses: helix-editor/rust-toolchain@v1\n        with:\n          profile: minimal\n          override: true\n\n      - uses: Swatinem/rust-cache@v2\n\n      - name: Run cargo check\n        run: cargo check\n\n  test:\n    name: Test Suite\n    runs-on: ${{ matrix.os }}\n    env:\n      RUST_BACKTRACE: 1\n      HELIX_LOG_LEVEL: info\n    steps:\n      - name: Checkout sources\n        uses: actions/checkout@v3\n\n      - name: Install stable toolchain\n        uses: dtolnay/rust-toolchain@1.65\n\n      - uses: Swatinem/rust-cache@v2\n\n      - name: Cache test tree-sitter grammar\n        uses: actions/cache@v3\n        with:\n          path: runtime/grammars\n          key: ${{ runner.os }}-stable-v${{ env.CACHE_VERSION }}-tree-sitter-grammars-${{ hashFiles('languages.toml') }}\n          restore-keys: ${{ runner.os }}-stable-v${{ env.CACHE_VERSION }}-tree-sitter-grammars-\n\n      - name: Run cargo test\n        run: cargo test --workspace\n\n      - name: Run cargo integration-test\n        run: cargo integration-test\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n\n  lints:\n    name: Lints\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout sources\n        uses: actions/checkout@v3\n\n      - name: Install stable toolchain\n        uses: dtolnay/rust-toolchain@1.65\n        with:\n          components: rustfmt, clippy\n\n      - uses: Swatinem/rust-cache@v2\n\n      - name: Run cargo fmt\n        run: cargo fmt --all --check\n\n      - name: Run cargo clippy\n        run: cargo clippy --workspace --all-targets -- -D warnings\n\n      - name: Run cargo doc\n        run: cargo doc --no-deps --workspace --document-private-items\n        env:\n          RUSTDOCFLAGS: -D warnings\n\n  docs:\n    name: Docs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout sources\n        uses: actions/checkout@v3\n\n      - name: Install stable toolchain\n        uses: dtolnay/rust-toolchain@1.65\n\n      - uses: Swatinem/rust-cache@v2\n\n      - name: Validate queries\n        run: cargo xtask query-check\n\n      - name: Generate docs\n        run: cargo xtask docgen\n\n      - name: Check uncommitted documentation changes\n        run: |\n          git diff\n          git diff-files --quiet \\\n            || (echo \"Run 'cargo xtask docgen', commit the changes and push again\" \\\n            && exit 1)\n\n",
    "readme": "<div align=\"center\">\n\n<h1>\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"logo_dark.svg\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"logo_light.svg\">\n  <img alt=\"Helix\" height=\"128\" src=\"logo_light.svg\">\n</picture>\n</h1>\n\n[![Build status](https://github.com/helix-editor/helix/actions/workflows/build.yml/badge.svg)](https://github.com/helix-editor/helix/actions)\n[![GitHub Release](https://img.shields.io/github/v/release/helix-editor/helix)](https://github.com/helix-editor/helix/releases/latest)\n[![Documentation](https://shields.io/badge/-documentation-452859)](https://docs.helix-editor.com/)\n[![GitHub contributors](https://img.shields.io/github/contributors/helix-editor/helix)](https://github.com/helix-editor/helix/graphs/contributors)\n[![Matrix Space](https://img.shields.io/matrix/helix-community:matrix.org)](https://matrix.to/#/#helix-community:matrix.org)\n\n</div>\n\n![Screenshot](./screenshot.png)\n\nA Kakoune / Neovim inspired editor, written in Rust.\n\nThe editing model is very heavily based on Kakoune; during development I found\nmyself agreeing with most of Kakoune's design decisions.\n\nFor more information, see the [website](https://helix-editor.com) or\n[documentation](https://docs.helix-editor.com/).\n\nAll shortcuts/keymaps can be found [in the documentation on the website](https://docs.helix-editor.com/keymap.html).\n\n[Troubleshooting](https://github.com/helix-editor/helix/wiki/Troubleshooting)\n\n# Features\n\n- Vim-like modal editing\n- Multiple selections\n- Built-in language server support\n- Smart, incremental syntax highlighting and code editing via tree-sitter\n\nIt's a terminal-based editor first, but I'd like to explore a custom renderer\n(similar to Emacs) in wgpu or skulpin.\n\nNote: Only certain languages have indentation definitions at the moment. Check\n`runtime/queries/<lang>/` for `indents.scm`.\n\n# Installation\n\n[Installation documentation](https://docs.helix-editor.com/install.html).\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/helix.svg)](https://repology.org/project/helix/versions)\n\n# Contributing\n\nContributing guidelines can be found [here](./docs/CONTRIBUTING.md).\n\n# Getting help\n\nYour question might already be answered on the [FAQ](https://github.com/helix-editor/helix/wiki/FAQ).\n\nDiscuss the project on the community [Matrix Space](https://matrix.to/#/#helix-community:matrix.org) (make sure to join `#helix-editor:matrix.org` if you're on a client that doesn't support Matrix Spaces yet).\n\n# Credits\n\nThanks to [@JakeHL](https://github.com/JakeHL) for designing the logo!\n"
}