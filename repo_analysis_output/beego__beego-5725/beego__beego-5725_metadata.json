{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: test.yml\nContent:\nname: Test\non:\n  push:\n    branches:\n      - master\n      - develop\n    paths:\n      - \"**/*.go\"\n      - \"go.mod\"\n      - \"go.sum\"\n      - \".github/workflows/test.yml\"\n  pull_request:\n    types: [opened, synchronize, reopened]\n    branches:\n      - master\n      - develop\n    paths:\n      - \"**/*.go\"\n      - \"go.mod\"\n      - \"go.sum\"\n      - \".github/workflows/test.yml\"\n\npermissions:\n  contents: read\n\njobs:\n  test:\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [\"1.20\",1.21,1.22]\n    runs-on: ubuntu-latest\n    services:\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n      memcached:\n        image: memcached:latest\n        ports:\n          - 11211:11211\n      ssdb:\n        image: tsl0922/ssdb\n        env:\n          SSDB_PORT: 8888\n        ports:\n          - \"8888:8888\"\n      postgres:\n        image: postgres:latest\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: orm_test\n        ports:\n          - 5432/tcp\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout codebase\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Run etcd\n        env:\n          ETCD_VERSION: v3.4.16\n        run: |\n          rm -rf /tmp/etcd-data.tmp\n          mkdir -p /tmp/etcd-data.tmp\n          docker rmi gcr.io/etcd-development/etcd:${ETCD_VERSION} || true && \\\n          docker run -d \\\n            -p 2379:2379 \\\n            -p 2380:2380 \\\n            --mount type=bind,source=/tmp/etcd-data.tmp,destination=/etcd-data \\\n            --name etcd-gcr-${ETCD_VERSION} \\\n            gcr.io/etcd-development/etcd:${ETCD_VERSION} \\\n            /usr/local/bin/etcd \\\n            --name s1 \\\n            --data-dir /etcd-data \\\n            --listen-client-urls http://0.0.0.0:2379 \\\n            --advertise-client-urls http://0.0.0.0:2379 \\\n            --listen-peer-urls http://0.0.0.0:2380 \\\n            --initial-advertise-peer-urls http://0.0.0.0:2380 \\\n            --initial-cluster s1=http://0.0.0.0:2380 \\\n            --initial-cluster-token tkn \\\n            --initial-cluster-state new\n          docker exec etcd-gcr-${ETCD_VERSION} /bin/sh -c \"ETCDCTL_API=3 /usr/local/bin/etcdctl put current.float 1.23\"\n          docker exec etcd-gcr-${ETCD_VERSION} /bin/sh -c \"ETCDCTL_API=3 /usr/local/bin/etcdctl put current.bool true\"\n          docker exec etcd-gcr-${ETCD_VERSION} /bin/sh -c \"ETCDCTL_API=3 /usr/local/bin/etcdctl put current.int 11\"\n          docker exec etcd-gcr-${ETCD_VERSION} /bin/sh -c \"ETCDCTL_API=3 /usr/local/bin/etcdctl put current.string hello\"\n          docker exec etcd-gcr-${ETCD_VERSION} /bin/sh -c \"ETCDCTL_API=3 /usr/local/bin/etcdctl put current.serialize.name test\"\n          docker exec etcd-gcr-${ETCD_VERSION} /bin/sh -c \"ETCDCTL_API=3 /usr/local/bin/etcdctl put sub.sub.key1 sub.sub.key\"\n\n      - name: Run ORM tests on sqlite3\n        env:\n          GOPATH: /home/runner/go\n          ORM_DRIVER: sqlite3\n          ORM_SOURCE: /tmp/sqlite3/orm_test.db\n        run: |\n          mkdir -p /tmp/sqlite3 && touch /tmp/sqlite3/orm_test.db\n          go test -coverprofile=coverage_sqlite3.txt -covermode=atomic $(go list ./... | grep client/orm)\n\n      - name: Run ORM tests on postgres\n        env:\n          GOPATH: /home/runner/go\n          ORM_DRIVER: postgres\n          ORM_SOURCE: host=localhost port=${{ job.services.postgres.ports[5432] }} user=postgres password=postgres dbname=orm_test sslmode=disable\n        run: |\n          go test -coverprofile=coverage_postgres.txt -covermode=atomic $(go list ./... | grep client/orm)\n\n      - name: Run tests on mysql\n        env:\n          GOPATH: /home/runner/go\n          ORM_DRIVER: mysql\n          ORM_SOURCE: root:root@/orm_test?charset=utf8\n        run: |\n          sudo systemctl start mysql\n          mysql -u root -proot -e 'create database orm_test;'\n          go test -coverprofile=coverage.txt -covermode=atomic ./...\n\n      - name: Upload codecov\n        run: bash <(curl -s https://codecov.io/bash)\n",
    "readme": "# Beego [![Test](https://github.com/beego/beego/actions/workflows/test.yml/badge.svg?branch=develop)](https://github.com/beego/beego/actions/workflows/test.yml) [![Go Report Card](https://goreportcard.com/badge/github.com/beego/beego)](https://goreportcard.com/report/github.com/beego/beego) [![Go Reference](https://pkg.go.dev/badge/github.com/beego/beego/v2.svg)](https://pkg.go.dev/github.com/beego/beego/v2)\n\nBeego is used for rapid development of enterprise application in Go, including RESTful APIs, web apps and backend services.\n\nIt is inspired by Tornado, Sinatra and Flask. beego has some Go-specific features such as interfaces and struct embedding.\n\n## Quick Start\n- [New Doc Website - unavailable](https://beego.gocn.vip)\n- [New Doc Website Backup @flycash](https://doc.meoying.com/en-US/beego/developing/)\n- [New Doc Website source code](https://github.com/beego/beego-doc)\n- [Old Doc - github](https://github.com/beego/beedoc)\n- [Example](https://github.com/beego/beego-example)\n\n> Kindly remind that sometimes the HTTPS certificate is expired, you may get some NOT SECURE warning\n\n### Web Application\n\n#### Create `hello` directory, cd `hello` directory\n\n    mkdir hello\n    cd hello\n\n#### Init module\n\n    go mod init\n\n#### Download and install\n\n    go get github.com/beego/beego/v2@latest\n\n#### Create file `hello.go`\n\n```go\npackage main\n\nimport \"github.com/beego/beego/v2/server/web\"\n\nfunc main() {\n\tweb.Run()\n}\n```\n\n#### Download required dependencies\n\n    go mod tidy\n\n#### Build and run\n\n    go build hello.go\n    ./hello\n\n#### Go to [http://localhost:8080](http://localhost:8080)\n\nCongratulations! You've just built your first **beego** app.\n\n## Features\n\n* RESTful support\n* [MVC architecture](https://github.com/beego/beedoc/tree/master/en-US/mvc)\n* Modularity\n* [Auto API documents](https://github.com/beego/beedoc/blob/master/en-US/advantage/docs.md)\n* [Annotation router](https://github.com/beego/beedoc/blob/master/en-US/mvc/controller/router.md)\n* [Namespace](https://github.com/beego/beedoc/blob/master/en-US/mvc/controller/router.md#namespace)\n* [Powerful development tools](https://github.com/beego/bee)\n* Full stack for Web & API\n\n## Modules\n\n* [orm](https://github.com/beego/beedoc/tree/master/en-US/mvc/model)\n* [session](https://github.com/beego/beedoc/blob/master/en-US/module/session.md)\n* [logs](https://github.com/beego/beedoc/blob/master/en-US/module/logs.md)\n* [config](https://github.com/beego/beedoc/blob/master/en-US/module/config.md)\n* [cache](https://github.com/beego/beedoc/blob/master/en-US/module/cache.md)\n* [context](https://github.com/beego/beedoc/blob/master/en-US/module/context.md)\n* [admin](https://github.com/beego/beedoc/blob/master/en-US/module/admin.md)\n* [httplib](https://github.com/beego/beedoc/blob/master/en-US/module/httplib.md)\n* [task](https://github.com/beego/beedoc/blob/master/en-US/module/task.md)\n* [i18n](https://github.com/beego/beedoc/blob/master/en-US/module/i18n.md)\n\n## Community\n\n* Welcome to join us in Slack: [https://beego.slack.com invite](https://join.slack.com/t/beego/shared_invite/zt-fqlfjaxs-_CRmiITCSbEqQG9NeBqXKA),\n* QQ Group ID:523992905\n* [Contribution Guide](https://github.com/beego/beedoc/blob/master/en-US/intro/contributing.md).\n\n## License\n\nbeego source code is licensed under the Apache Licence, Version 2.0\n([https://www.apache.org/licenses/LICENSE-2.0.html](https://www.apache.org/licenses/LICENSE-2.0.html)).\n"
}