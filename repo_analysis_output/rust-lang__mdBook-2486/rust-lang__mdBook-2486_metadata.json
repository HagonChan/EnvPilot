{
    "primary_language": "Rust",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: main.yml\nContent:\nname: CI\non:\n  pull_request:\n  merge_group:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        include:\n          - name: stable linux\n            os: ubuntu-latest\n            rust: stable\n            target: x86_64-unknown-linux-gnu\n          - name: beta linux\n            os: ubuntu-latest\n            rust: beta\n            target: x86_64-unknown-linux-gnu\n          - name: nightly linux\n            os: ubuntu-latest\n            rust: nightly\n            target: x86_64-unknown-linux-gnu\n          - name: stable x86_64-unknown-linux-musl\n            os: ubuntu-20.04\n            rust: stable\n            target: x86_64-unknown-linux-musl\n          - name: stable x86_64 macos\n            os: macos-latest\n            rust: stable\n            target: x86_64-apple-darwin\n          - name: stable aarch64 macos\n            os: macos-latest\n            rust: stable\n            target: aarch64-apple-darwin\n          - name: stable windows-msvc\n            os: windows-latest\n            rust: stable\n            target: x86_64-pc-windows-msvc\n          - name: msrv\n            os: ubuntu-20.04\n            # sync MSRV with docs: guide/src/guide/installation.md and Cargo.toml\n            rust: 1.74.0\n            target: x86_64-unknown-linux-gnu\n    name: ${{ matrix.name }}\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install Rust\n      run: bash ci/install-rust.sh ${{ matrix.rust }} ${{ matrix.target }}\n    - name: Build and run tests\n      run: cargo test --locked --target ${{ matrix.target }}\n    - name: Test no default\n      run: cargo test --no-default-features --target ${{ matrix.target }}\n\n  aarch64-cross-builds:\n    runs-on: ubuntu-20.04\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install Rust\n      run: bash ci/install-rust.sh stable aarch64-unknown-linux-musl\n    - name: Build\n      run: cargo build --locked --target aarch64-unknown-linux-musl\n\n  rustfmt:\n    name: Rustfmt\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Install Rust\n      run: rustup update stable && rustup default stable && rustup component add rustfmt\n    - run: cargo fmt --check\n\n  # The success job is here to consolidate the total success/failure state of\n  # all other jobs. This job is then included in the GitHub branch protection\n  # rule which prevents merges unless all other jobs are passing. This makes\n  # it easier to manage the list of jobs via this yml file and to prevent\n  # accidentally adding new jobs without also updating the branch protections.\n  success:\n    name: Success gate\n    if: always()\n    needs:\n      - test\n      - rustfmt\n    runs-on: ubuntu-latest\n    steps:\n      - run: jq --exit-status 'all(.result == \"success\")' <<< '${{ toJson(needs) }}'\n      - name: Done\n        run: exit 0\n",
    "readme": "# mdBook\n\n[![Build Status](https://github.com/rust-lang/mdBook/workflows/CI/badge.svg?event=push)](https://github.com/rust-lang/mdBook/actions?workflow=CI)\n[![crates.io](https://img.shields.io/crates/v/mdbook.svg)](https://crates.io/crates/mdbook)\n[![LICENSE](https://img.shields.io/github/license/rust-lang/mdBook.svg)](LICENSE)\n\nmdBook is a utility to create modern online books from Markdown files.\n\nCheck out the **[User Guide]** for a list of features and installation and usage information.\nThe User Guide also serves as a demonstration to showcase what a book looks like.\n\nIf you are interested in contributing to the development of mdBook, check out the [Contribution Guide].\n\n## License\n\nAll the code in this repository is released under the ***Mozilla Public License v2.0***, for more information take a look at the [LICENSE] file.\n\n[User Guide]: https://rust-lang.github.io/mdBook/\n[contribution guide]: https://github.com/rust-lang/mdBook/blob/master/CONTRIBUTING.md\n[LICENSE]: https://github.com/rust-lang/mdBook/blob/master/LICENSE\n"
}