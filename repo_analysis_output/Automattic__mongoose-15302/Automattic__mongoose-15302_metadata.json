{
    "primary_language": "JavaScript",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for JavaScript/Node.js Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `package.json` file. Ensure you have Node.js and npm (or Yarn) installed to manage these dependencies.  \n\n3. **Install Dependencies**  \n   Run the following command to install project dependencies:  \n   ```sh\n   npm install  \n   ```  \n   or, if the project uses Yarn:  \n   ```sh\n   yarn install  \n   ```  \n\n4. **Build the Project**  \n   If the project requires a build step, refer to the `scripts` section in the `package.json` file. Common build commands include:  \n   ```sh\n   npm run build  \n   ```  \n   or  \n   ```sh\n   yarn build  \n   ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, JSON configuration files) and set them up accordingly. The README or project documentation should provide details on this.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Common test commands include:  \n   ```sh\n   npm test  \n   ```  \n   or  \n   ```sh\n   yarn test  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands might include:  \n   ```sh\n   npm start  \n   ```  \n   or  \n   ```sh\n   yarn start  \n   ```  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered. Checking for error messages in the terminal can also provide clues.  \n\n9. **Code Linting and Formatting**  \n   Use linters and formatters to ensure code quality and consistency. Common tools include ESLint for linting and Prettier for formatting. You can typically run these with:  \n   ```sh\n   npm run lint  \n   npm run format  \n   ```  \n   or  \n   ```sh\n   yarn lint  \n   yarn format  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: encryption-tests.yml\nContent:\nname: Encryption Tests \n\non:\n  push: \n    branches: ['master']\n  pull_request:\n    branches: [ 'master' ]\n  workflow_dispatch: {}\n\npermissions:\n  contents: write\n  pull-requests: write\n  id-token: write\n\njobs:\n  run-tests:\n    permissions:\n      # required for all workflows\n      security-events: write\n      id-token: write\n      contents: write\n    runs-on: ubuntu-latest\n    name: Encryption tests\n    env:\n      FORCE_COLOR: true\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: Setup node\n        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0\n        with:\n          node-version: 22\n      - name: Install Dependencies\n        run: npm install\n      - name: Install mongodb-client-encryption\n        run: npm install mongodb-client-encryption\n      - name: Setup Tests\n        run: npm run setup-test-encryption\n      - name: Run Tests\n        run: npm run test-encryption\n\nfile: test.yml\nContent:\nname: Test\non:\n  pull_request:\n    paths:\n      - \".github/workflows/test.yml\"\n      - \"package.json\"\n      - \"index.js\"\n      - \"lib/**\"\n      - \"test/**.js\"\n  push:\n    paths:\n      - \".github/workflows/test.yml\"\n      - \"package.json\"\n      - \"index.js\"\n      - \"lib/**\"\n      - \"test/**.js\"\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Lint JS-Files\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: Setup node\n        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0\n        with:\n          node-version: 22\n\n      - run: npm install\n\n      - name: Lint JS-Files\n        run: npm run lint-js\n\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        node: [16, 18, 20, 22]\n        os: [ubuntu-20.04, ubuntu-22.04]\n        mongodb: [4.4.29, 5.0.26, 6.0.15, 7.0.12, 8.0.0]\n        include:\n          - os: ubuntu-20.04 # customize on which matrix the coverage will be collected on\n            mongodb: 5.0.26\n            node: 16\n            coverage: true\n        exclude:\n          - os: ubuntu-22.04 # exclude because there are no 4.x mongodb builds for 2204\n            mongodb: 4.4.29\n          - os: ubuntu-22.04 # exclude because there are no 5.x mongodb builds for 2204\n            mongodb: 5.0.26\n    name: Node ${{ matrix.node }} MongoDB ${{ matrix.mongodb }} OS ${{ matrix.os }}\n    env:\n      MONGOMS_VERSION: ${{ matrix.mongodb }}\n      MONGOMS_PREFER_GLOBAL_PATH: 1\n      FORCE_COLOR: true\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: Setup node\n        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0\n        with:\n          node-version: ${{ matrix.node }}\n\n      - name: Load MongoDB binary cache\n        id: cache-mongodb-binaries\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/mongodb-binaries\n          key: ${{ matrix.os }}-${{ matrix.mongodb }}\n\n      - run: npm install\n      - name: NPM Test without Coverage\n        run: npm test\n        if: matrix.coverage != true\n      - name: NPM Test with Coverage\n        run: npm run test-coverage\n        if: matrix.coverage == true\n      - name: Archive code coverage results\n        uses: actions/upload-artifact@v4\n        if: matrix.coverage == true\n        with:\n          name: coverage\n          path: coverage\n\n  test-deno:\n    runs-on: ubuntu-20.04\n    name: Deno tests\n    env:\n      MONGOMS_VERSION: 6.0.15\n      MONGOMS_PREFER_GLOBAL_PATH: 1\n      FORCE_COLOR: true\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: Setup node\n        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0\n        with:\n          node-version: 22\n      - name: Load MongoDB binary cache\n        id: cache-mongodb-binaries\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/mongodb-binaries\n          key: deno-${{ env.MONGOMS_VERSION }}\n      - name: Setup Deno\n        uses: denoland/setup-deno@v2\n        with:\n          deno-version: v2.1.x\n      - run: deno --version\n      - run: npm install\n      - name: Run Deno tests\n        run: npm run test-deno\n\n  test-replica-sets:\n    needs:\n      - test\n    runs-on: ubuntu-20.04\n    name: Replica Set tests\n    env:\n      FORCE_COLOR: true\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: Setup node\n        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0\n        with:\n          node-version: 22\n      - run: npm install\n      - name: Test\n        run: npm run test-rs\n\n  dependency-review:\n    name: Dependency Review\n    if: github.event_name == 'pull_request'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: Dependency review\n        uses: actions/dependency-review-action@v4\n",
    "readme": "# Mongoose\n\nMongoose is a [MongoDB](https://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment. Mongoose supports [Node.js](https://nodejs.org/en/) and [Deno](https://deno.land/) (alpha).\n\n[![Build Status](https://github.com/Automattic/mongoose/workflows/Test/badge.svg)](https://github.com/Automattic/mongoose)\n[![NPM version](https://badge.fury.io/js/mongoose.svg)](http://badge.fury.io/js/mongoose)\n[![Deno version](https://deno.land/badge/mongoose/version)](https://deno.land/x/mongoose)\n[![Deno popularity](https://deno.land/badge/mongoose/popularity)](https://deno.land/x/mongoose)\n\n[![npm](https://nodei.co/npm/mongoose.png)](https://www.npmjs.com/package/mongoose)\n\n## Documentation\n\nThe official documentation website is [mongoosejs.com](http://mongoosejs.com/).\n\nMongoose 8.0.0 was released on October 31, 2023. You can find more details on [backwards breaking changes in 8.0.0 on our docs site](https://mongoosejs.com/docs/migrating_to_8.html).\n\n## Support\n\n* [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n* [Bug Reports](https://github.com/Automattic/mongoose/issues/)\n* [Mongoose Slack Channel](http://slack.mongoosejs.io/)\n* [Help Forum](http://groups.google.com/group/mongoose-orm)\n* [MongoDB Support](https://www.mongodb.com/docs/manual/support/)\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.io/) to see hundreds of related modules from the community. Next, learn how to write your own plugin from the [docs](http://mongoosejs.com/docs/plugins.html) or [this blog post](http://thecodebarbarian.com/2015/03/06/guide-to-mongoose-plugins).\n\n## Contributors\n\nPull requests are always welcome! Please base pull requests against the `master`\nbranch and follow the [contributing guide](https://github.com/Automattic/mongoose/blob/master/CONTRIBUTING.md).\n\nIf your pull requests makes documentation changes, please do **not**\nmodify any `.html` files. The `.html` files are compiled code, so please make\nyour changes in `docs/*.pug`, `lib/*.js`, or `test/docs/*.js`.\n\nView all 400+ [contributors](https://github.com/Automattic/mongoose/graphs/contributors).\n\n## Installation\n\nFirst install [Node.js](http://nodejs.org/) and [MongoDB](https://www.mongodb.org/downloads). Then:\n\n```sh\nnpm install mongoose\n```\n\nMongoose 6.8.0 also includes alpha support for [Deno](https://deno.land/).\n\n## Importing\n\n```javascript\n// Using Node.js `require()`\nconst mongoose = require('mongoose');\n\n// Using ES6 imports\nimport mongoose from 'mongoose';\n```\n\nOr, using [Deno's `createRequire()` for CommonJS support](https://deno.land/std@0.113.0/node/README.md?source=#commonjs-modules-loading) as follows.\n\n```javascript\nimport { createRequire } from 'https://deno.land/std@0.177.0/node/module.ts';\nconst require = createRequire(import.meta.url);\n\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://127.0.0.1:27017/test')\n  .then(() => console.log('Connected!'));\n```\n\nYou can then run the above script using the following.\n\n```sh\ndeno run --allow-net --allow-read --allow-sys --allow-env mongoose-test.js\n```\n\n## Mongoose for Enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of mongoose and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-mongoose?utm_source=npm-mongoose&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n```js\nawait mongoose.connect('mongodb://127.0.0.1/my_database');\n```\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Note:** *If the local connection fails then try using 127.0.0.1 instead of localhost. Sometimes issues may arise when the local hostname has been changed.*\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface.\n\n```js\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nconst BlogPost = new Schema({\n  author: ObjectId,\n  title: String,\n  body: String,\n  date: Date\n});\n```\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n```js\nconst Comment = new Schema({\n  name: { type: String, default: 'hahaha' },\n  age: { type: Number, min: 18, index: true },\n  bio: { type: String, match: /[a-z]/ },\n  date: { type: Date, default: Date.now },\n  buff: Buffer\n});\n\n// a setter\nComment.path('name').set(function(v) {\n  return capitalize(v);\n});\n\n// middleware\nComment.pre('save', function(next) {\n  notify(this.get('email'));\n  next();\n});\n```\n\nTake a look at the example in [`examples/schema/schema.js`](https://github.com/Automattic/mongoose/blob/master/examples/schema/schema.js) for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n```js\nconst MyModel = mongoose.model('ModelName');\n```\n\nOr just do it all at once\n\n```js\nconst MyModel = mongoose.model('ModelName', mySchema);\n```\n\nThe first argument is the *singular* name of the collection your model is for. **Mongoose automatically looks for the *plural* version of your model name.** For example, if you use\n\n```js\nconst MyModel = mongoose.model('Ticket', mySchema);\n```\n\nThen `MyModel` will use the **tickets** collection, not the **ticket** collection. For more details read the [model docs](https://mongoosejs.com/docs/api/mongoose.html#mongoose_Mongoose-model).\n\nOnce we have our model, we can then instantiate it, and save it:\n\n```js\nconst instance = new MyModel();\ninstance.my.key = 'hello';\nawait instance.save();\n```\n\nOr we can find documents from the same collection\n\n```js\nawait MyModel.find({});\n```\n\nYou can also `findOne`, `findById`, `update`, etc.\n\n```js\nconst instance = await MyModel.findOne({ /* ... */ });\nconsole.log(instance.my.key); // 'hello'\n```\n\nFor more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n```js\nconst conn = mongoose.createConnection('your connection string');\nconst MyModel = conn.model('ModelName', schema);\nconst m = new MyModel();\nawait m.save(); // works\n```\n\nvs\n\n```js\nconst conn = mongoose.createConnection('your connection string');\nconst MyModel = mongoose.model('ModelName', schema);\nconst m = new MyModel();\nawait m.save(); // does not work b/c the default connection object was never connected\n```\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n```txt\ncomments: [Comment]\n```\n\nWhere `Comment` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n```js\n// retrieve my model\nconst BlogPost = mongoose.model('BlogPost');\n\n// create a blog post\nconst post = new BlogPost();\n\n// create a comment\npost.comments.push({ title: 'My comment' });\n\nawait post.save();\n```\n\nThe same goes for removing them:\n\n```js\nconst post = await BlogPost.findById(myId);\npost.comments[0].deleteOne();\nawait post.save();\n```\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n```js\nschema.pre('set', function(next, path, val, typel) {\n  // `this` is the current Document\n  this.emit('set', path, val);\n\n  // Pass control to the next pre\n  next();\n});\n```\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n```js\nschema.pre(method, function firstPre(next, methodArg1, methodArg2) {\n  // Mutate methodArg1\n  next('altered-' + methodArg1.toString(), methodArg2);\n});\n\n// pre declaration is chainable\nschema.pre(method, function secondPre(next, methodArg1, methodArg2) {\n  console.log(methodArg1);\n  // => 'altered-originalValOfMethodArg1'\n\n  console.log(methodArg2);\n  // => 'originalValOfMethodArg2'\n\n  // Passing no arguments to `next` automatically passes along the current argument values\n  // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n  // and also equivalent to, with the example method arg\n  // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n  next();\n});\n```\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n```js\nnew Schema({\n  broken: { type: Boolean },\n  asset: {\n    name: String,\n    type: String // uh oh, it broke. asset will be interpreted as String\n  }\n});\n\nnew Schema({\n  works: { type: Boolean },\n  asset: {\n    name: String,\n    type: { type: String } // works. asset is an object with a type property\n  }\n});\n```\n\n### Driver Access\n\nMongoose is built on top of the [official MongoDB Node.js driver](https://github.com/mongodb/node-mongodb-native). Each mongoose model keeps a reference to a [native MongoDB driver collection](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html). The collection object can be accessed using `YourModel.collection`. However, using the collection object directly bypasses all mongoose features, including hooks, validation, etc. The one\nnotable exception that `YourModel.collection` still buffers\ncommands. As such, `YourModel.collection.find()` will **not**\nreturn a cursor.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api/mongoose.html), generated using [dox](https://github.com/tj/dox)\nand [acquit](https://github.com/vkarpov15/acquit).\n\n## Related Projects\n\n### MongoDB Runners\n\n* [run-rs](https://www.npmjs.com/package/run-rs)\n* [mongodb-memory-server](https://www.npmjs.com/package/mongodb-memory-server)\n* [mongodb-topology-manager](https://www.npmjs.com/package/mongodb-topology-manager)\n\n### Unofficial CLIs\n\n* [mongoosejs-cli](https://www.npmjs.com/package/mongoosejs-cli)\n\n### Data Seeding\n\n* [dookie](https://www.npmjs.com/package/dookie)\n* [seedgoose](https://www.npmjs.com/package/seedgoose)\n* [mongoose-data-seed](https://www.npmjs.com/package/mongoose-data-seed)\n\n### Express Session Stores\n\n* [connect-mongodb-session](https://www.npmjs.com/package/connect-mongodb-session)\n* [connect-mongo](https://www.npmjs.com/package/connect-mongo)\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
}