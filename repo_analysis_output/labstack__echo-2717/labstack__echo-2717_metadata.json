{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "",
    "readme": "[![Sourcegraph](https://sourcegraph.com/github.com/labstack/echo/-/badge.svg?style=flat-square)](https://sourcegraph.com/github.com/labstack/echo?badge)\n[![GoDoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://pkg.go.dev/github.com/labstack/echo/v4)\n[![Go Report Card](https://goreportcard.com/badge/github.com/labstack/echo?style=flat-square)](https://goreportcard.com/report/github.com/labstack/echo)\n[![GitHub Workflow Status (with event)](https://img.shields.io/github/actions/workflow/status/labstack/echo/echo.yml?style=flat-square)](https://github.com/labstack/echo/actions)\n[![Codecov](https://img.shields.io/codecov/c/github/labstack/echo.svg?style=flat-square)](https://codecov.io/gh/labstack/echo)\n[![Forum](https://img.shields.io/badge/community-forum-00afd1.svg?style=flat-square)](https://github.com/labstack/echo/discussions)\n[![Twitter](https://img.shields.io/badge/twitter-@labstack-55acee.svg?style=flat-square)](https://twitter.com/labstack)\n[![License](http://img.shields.io/badge/license-mit-blue.svg?style=flat-square)](https://raw.githubusercontent.com/labstack/echo/master/LICENSE)\n\n## Echo\n\nHigh performance, extensible, minimalist Go web framework.\n\n* [Official website](https://echo.labstack.com)\n* [Quick start](https://echo.labstack.com/docs/quick-start)\n* [Middlewares](https://echo.labstack.com/docs/category/middleware)\n\nHelp and questions: [Github Discussions](https://github.com/labstack/echo/discussions)\n\n\n### Feature Overview\n\n- Optimized HTTP router which smartly prioritize routes\n- Build robust and scalable RESTful APIs\n- Group APIs\n- Extensible middleware framework\n- Define middleware at root, group or route level\n- Data binding for JSON, XML and form payload\n- Handy functions to send variety of HTTP responses\n- Centralized HTTP error handling\n- Template rendering with any template engine\n- Define your format for the logger\n- Highly customizable\n- Automatic TLS via Let\u2019s Encrypt\n- HTTP/2 support\n\n## Sponsors\n\n<div>\n  <a href=\"https://encore.dev\" style=\"display: inline-flex; align-items: center; gap: 10px\">\n    <img src=\"https://user-images.githubusercontent.com/78424526/214602214-52e0483a-b5fc-4d4c-b03e-0b7b23e012df.svg\" height=\"28px\" alt=\"encore icon\"></img>\n  <b>Encore \u2013 the platform for building Go-based cloud backends</b>\n    </a>\n</div>\n<br/>\n\nClick [here](https://github.com/sponsors/labstack) for more information on sponsorship.\n\n## Benchmarks\n\nDate: 2020/11/11<br>\nSource: https://github.com/vishr/web-framework-benchmark<br>\nLower is better!\n\n<img src=\"https://i.imgur.com/qwPNQbl.png\">\n<img src=\"https://i.imgur.com/s8yKQjx.png\">\n\nThe benchmarks above were run on an Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz\n\n## [Guide](https://echo.labstack.com/guide)\n\n### Installation\n\n```sh\n// go get github.com/labstack/echo/{version}\ngo get github.com/labstack/echo/v4\n```\nLatest version of Echo supports last four Go major [releases](https://go.dev/doc/devel/release) and might work with older versions.\n\n### Example\n\n```go\npackage main\n\nimport (\n  \"github.com/labstack/echo/v4\"\n  \"github.com/labstack/echo/v4/middleware\"\n  \"log/slog\"\n  \"net/http\"\n)\n\nfunc main() {\n  // Echo instance\n  e := echo.New()\n\n  // Middleware\n  e.Use(middleware.Logger())\n  e.Use(middleware.Recover())\n\n  // Routes\n  e.GET(\"/\", hello)\n\n  // Start server\n  if err := e.Start(\":8080\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n    slog.Error(\"failed to start server\", \"error\", err)\n  }\n}\n\n// Handler\nfunc hello(c echo.Context) error {\n  return c.String(http.StatusOK, \"Hello, World!\")\n}\n```\n\n# Official middleware repositories\n\nFollowing list of middleware is maintained by Echo team.\n\n| Repository                                                                   | Description                                                                                                                                                                                                                                                                                                                   |\n|------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [github.com/labstack/echo-jwt](https://github.com/labstack/echo-jwt)         | [JWT](https://github.com/golang-jwt/jwt) middleware                                                                                                                                                                                                                                                                           | \n| [github.com/labstack/echo-contrib](https://github.com/labstack/echo-contrib) | [casbin](https://github.com/casbin/casbin), [gorilla/sessions](https://github.com/gorilla/sessions), [jaegertracing](https://github.com/uber/jaeger-client-go), [prometheus](https://github.com/prometheus/client_golang/), [pprof](https://pkg.go.dev/net/http/pprof), [zipkin](https://github.com/openzipkin/zipkin-go) middlewares | \n\n# Third-party middleware repositories\n\nBe careful when adding 3rd party middleware. Echo teams does not have time or manpower to guarantee safety and quality\nof middlewares in this list.\n\n| Repository                                                                                           | Description                                                                                                                                                                                              |\n|------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [deepmap/oapi-codegen](https://github.com/deepmap/oapi-codegen)                                      | Automatically generate RESTful API documentation with [OpenAPI](https://swagger.io/specification/) Client and Server Code Generator                                                                      |\n| [github.com/swaggo/echo-swagger](https://github.com/swaggo/echo-swagger)                             | Automatically generate RESTful API documentation with [Swagger](https://swagger.io/) 2.0.                                                                                                                |\n| [github.com/ziflex/lecho](https://github.com/ziflex/lecho)                                           | [Zerolog](https://github.com/rs/zerolog) logging library wrapper for Echo logger interface.                                                                                                              |\n| [github.com/brpaz/echozap](https://github.com/brpaz/echozap)                                         | Uber\u00b4s [Zap](https://github.com/uber-go/zap) logging library wrapper for Echo logger interface.                                                                                                          |\n| [github.com/samber/slog-echo](https://github.com/samber/slog-echo)                                         | Go [slog](https://pkg.go.dev/golang.org/x/exp/slog) logging library wrapper for Echo logger interface.                                                                                                          |\n| [github.com/darkweak/souin/plugins/echo](https://github.com/darkweak/souin/tree/master/plugins/echo) | HTTP cache system based on [Souin](https://github.com/darkweak/souin) to automatically get your endpoints cached. It supports some distributed and non-distributed storage systems depending your needs. |\n| [github.com/mikestefanello/pagoda](https://github.com/mikestefanello/pagoda)                         | Rapid, easy full-stack web development starter kit built with Echo.                                                                                                                                      |\n| [github.com/go-woo/protoc-gen-echo](https://github.com/go-woo/protoc-gen-echo)                       | ProtoBuf generate Echo server side code                                                                                                                                                                  |\n\nPlease send a PR to add your own library here.\n\n## Contribute\n\n**Use issues for everything**\n\n- For a small change, just send a PR.\n- For bigger changes open an issue for discussion before sending a PR.\n- PR should have:\n  - Test case\n  - Documentation\n  - Example (If it makes sense)\n- You can also contribute by:\n  - Reporting issues\n  - Suggesting new features or enhancements\n  - Improve/fix documentation\n\n## Credits\n\n- [Vishal Rana](https://github.com/vishr) (Author)\n- [Nitin Rana](https://github.com/nr17) (Consultant)\n- [Roland Lammel](https://github.com/lammel) (Maintainer)\n- [Martti T.](https://github.com/aldas) (Maintainer)\n- [Pablo Andres Fuente](https://github.com/pafuent) (Maintainer)\n- [Contributors](https://github.com/labstack/echo/graphs/contributors)\n\n## License\n\n[MIT](https://github.com/labstack/echo/blob/master/LICENSE)\n"
}