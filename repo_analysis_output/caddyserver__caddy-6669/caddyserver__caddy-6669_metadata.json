{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\n# Used as inspiration: https://github.com/mvdan/github-actions-golang\n\nname: Tests\n\non:\n  push:\n    branches:\n      - master\n      - 2.*\n  pull_request:\n    branches:\n      - master\n      - 2.*\n\njobs:\n  test:\n    strategy:\n      # Default is true, cancels jobs for other platforms in the matrix if one fails\n      fail-fast: false\n      matrix:\n        os: \n          - linux\n          - mac\n          - windows\n        go: \n          - '1.22'\n          - '1.23'\n\n        include:\n        # Set the minimum Go patch version for the given Go minor\n        # Usable via ${{ matrix.GO_SEMVER }}\n        - go: '1.22'\n          GO_SEMVER: '~1.22.3'\n\n        - go: '1.23'\n          GO_SEMVER: '~1.23.0'\n\n        # Set some variables per OS, usable via ${{ matrix.VAR }}\n        # OS_LABEL: the VM label from GitHub Actions (see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories)\n        # CADDY_BIN_PATH: the path to the compiled Caddy binary, for artifact publishing\n        # SUCCESS: the typical value for $? per OS (Windows/pwsh returns 'True')\n        - os: linux\n          OS_LABEL: ubuntu-latest\n          CADDY_BIN_PATH: ./cmd/caddy/caddy\n          SUCCESS: 0\n\n        - os: mac\n          OS_LABEL: macos-14\n          CADDY_BIN_PATH: ./cmd/caddy/caddy\n          SUCCESS: 0\n\n        - os: windows\n          OS_LABEL: windows-latest\n          CADDY_BIN_PATH: ./cmd/caddy/caddy.exe\n          SUCCESS: 'True'\n\n    runs-on: ${{ matrix.OS_LABEL }}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Install Go\n      uses: actions/setup-go@v5\n      with:\n        go-version: ${{ matrix.GO_SEMVER }}\n        check-latest: true\n\n    # These tools would be useful if we later decide to reinvestigate\n    # publishing test/coverage reports to some tool for easier consumption\n    # - name: Install test and coverage analysis tools\n    #   run: |\n    #     go get github.com/axw/gocov/gocov\n    #     go get github.com/AlekSi/gocov-xml\n    #     go get -u github.com/jstemmer/go-junit-report\n    #     echo \"$(go env GOPATH)/bin\" >> $GITHUB_PATH\n\n    - name: Print Go version and environment\n      id: vars\n      shell: bash\n      run: |\n        printf \"Using go at: $(which go)\\n\"\n        printf \"Go version: $(go version)\\n\"\n        printf \"\\n\\nGo environment:\\n\\n\"\n        go env\n        printf \"\\n\\nSystem environment:\\n\\n\"\n        env\n        printf \"Git version: $(git version)\\n\\n\"\n        # Calculate the short SHA1 hash of the git commit\n        echo \"short_sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n\n    - name: Get dependencies\n      run: |\n        go get -v -t -d ./...\n        # mkdir test-results\n\n    - name: Build Caddy\n      working-directory: ./cmd/caddy\n      env:\n        CGO_ENABLED: 0\n      run: |\n        go build -tags nobadger -trimpath -ldflags=\"-w -s\" -v\n\n    - name: Smoke test Caddy\n      working-directory: ./cmd/caddy\n      run: |\n        ./caddy start\n        ./caddy stop\n\n    - name: Publish Build Artifact\n      uses: actions/upload-artifact@v4\n      with:\n        name: caddy_${{ runner.os }}_go${{ matrix.go }}_${{ steps.vars.outputs.short_sha }}\n        path: ${{ matrix.CADDY_BIN_PATH }}\n        compression-level: 0\n\n    # Commented bits below were useful to allow the job to continue\n    # even if the tests fail, so we can publish the report separately\n    # For info about set-output, see https://stackoverflow.com/questions/57850553/github-actions-check-steps-status\n    - name: Run tests\n      # id: step_test\n      # continue-on-error: true\n      run: |\n        # (go test -v -coverprofile=cover-profile.out -race ./... 2>&1) > test-results/test-result.out\n        go test -tags nobadger -v -coverprofile=\"cover-profile.out\" -short -race ./...\n        # echo \"status=$?\" >> $GITHUB_OUTPUT\n\n    # Relevant step if we reinvestigate publishing test/coverage reports\n    # - name: Prepare coverage reports\n    #   run: |\n    #     mkdir coverage\n    #     gocov convert cover-profile.out > coverage/coverage.json\n    #     # Because Windows doesn't work with input redirection like *nix, but output redirection works.\n    #     (cat ./coverage/coverage.json | gocov-xml) > coverage/coverage.xml\n\n    # To return the correct result even though we set 'continue-on-error: true'\n    # - name: Coerce correct build result\n    #   if: matrix.os != 'windows' && steps.step_test.outputs.status != ${{ matrix.SUCCESS }}\n    #   run: |\n    #     echo \"step_test ${{ steps.step_test.outputs.status }}\\n\"\n    #     exit 1\n\n  s390x-test:\n    name: test (s390x on IBM Z)\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]'\n    continue-on-error: true  # August 2020: s390x VM is down due to weather and power issues\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Run Tests\n        run: |\n          set +e\n          mkdir -p ~/.ssh && echo -e \"${SSH_KEY//_/\\\\n}\" > ~/.ssh/id_ecdsa && chmod og-rwx ~/.ssh/id_ecdsa\n\n          # short sha is enough?\n          short_sha=$(git rev-parse --short HEAD)\n\n          # To shorten the following lines\n          ssh_opts=\"-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"\n          ssh_host=\"$CI_USER@ci-s390x.caddyserver.com\"\n\n          # The environment is fresh, so there's no point in keeping accepting and adding the key.\n          rsync -arz -e \"ssh $ssh_opts\" --progress --delete --exclude '.git' . \"$ssh_host\":/var/tmp/\"$short_sha\"\n          ssh $ssh_opts -t \"$ssh_host\" bash <<EOF\n          cd /var/tmp/$short_sha\n          go version\n          go env\n          printf \"\\n\\n\"\n          retries=3\n          exit_code=0\n          while ((retries > 0)); do\n            CGO_ENABLED=0 go test -p 1 -tags nobadger -v ./...\n            exit_code=$?\n            if ((exit_code == 0)); then\n              break\n            fi\n            echo \"\\n\\nTest failed: \\$exit_code, retrying...\"\n            ((retries--))\n          done\n          echo \"Remote exit code: \\$exit_code\"\n          exit \\$exit_code\n          EOF\n          test_result=$?\n\n          # There's no need leaving the files around\n          ssh $ssh_opts \"$ssh_host\" \"rm -rf /var/tmp/'$short_sha'\"\n\n          echo \"Test exit code: $test_result\"\n          exit $test_result\n        env:\n          SSH_KEY: ${{ secrets.S390X_SSH_KEY }}\n          CI_USER: ${{ secrets.CI_USER }}\n\n  goreleaser-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      \n      - uses: goreleaser/goreleaser-action@v6\n        with:\n          version: latest\n          args: check\n      - name: Install Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: \"~1.23\"\n          check-latest: true\n      - name: Install xcaddy\n        run: |\n          go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest\n          xcaddy version\n      - uses: goreleaser/goreleaser-action@v6\n        with:\n          version: latest\n          args: build --single-target --snapshot\n        env:\n          TAG: \"master\"\n\nfile: cross-build.yml\nContent:\nname: Cross-Build\n\non:\n  push:\n    branches:\n      - master\n      - 2.*\n  pull_request:\n    branches:\n      - master\n      - 2.*\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        goos: \n          - 'aix'\n          - 'linux'\n          - 'solaris'\n          - 'illumos'\n          - 'dragonfly'\n          - 'freebsd'\n          - 'openbsd'\n          - 'windows'\n          - 'darwin'\n          - 'netbsd'\n        go: \n          - '1.22'\n          - '1.23'\n\n        include:\n        # Set the minimum Go patch version for the given Go minor\n        # Usable via ${{ matrix.GO_SEMVER }}\n        - go: '1.22'\n          GO_SEMVER: '~1.22.3'\n\n        - go: '1.23'\n          GO_SEMVER: '~1.23.0'\n\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Install Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: ${{ matrix.GO_SEMVER }}\n          check-latest: true\n\n      - name: Print Go version and environment\n        id: vars\n        run: |\n          printf \"Using go at: $(which go)\\n\"\n          printf \"Go version: $(go version)\\n\"\n          printf \"\\n\\nGo environment:\\n\\n\"\n          go env\n          printf \"\\n\\nSystem environment:\\n\\n\"\n          env\n\n      - name: Run Build\n        env:\n          CGO_ENABLED: 0\n          GOOS: ${{ matrix.goos }}\n          GOARCH: ${{ matrix.goos == 'aix' && 'ppc64' || 'amd64' }}\n        shell: bash\n        continue-on-error: true\n        working-directory: ./cmd/caddy\n        run: |\n          GOOS=$GOOS GOARCH=$GOARCH go build -tags=nobadger,nomysql,nopgx -trimpath -o caddy-\"$GOOS\"-$GOARCH 2> /dev/null\n",
    "readme": "<p align=\"center\">\n\t<a href=\"https://caddyserver.com\">\n\t\t<picture>\n\t\t\t<source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/1128849/210187358-e2c39003-9a5e-4dd5-a783-6deb6483ee72.svg\">\n\t\t\t<source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/1128849/210187356-dfb7f1c5-ac2e-43aa-bb23-fc014280ae1f.svg\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/1128849/210187356-dfb7f1c5-ac2e-43aa-bb23-fc014280ae1f.svg\" alt=\"Caddy\" width=\"550\">\n\t\t</picture>\n\t</a>\n\t<br>\n\t<h3 align=\"center\">a <a href=\"https://zerossl.com\"><img src=\"https://user-images.githubusercontent.com/55066419/208327323-2770dc16-ec09-43a0-9035-c5b872c2ad7f.svg\" height=\"28\" style=\"vertical-align: -7.7px\" valign=\"middle\"></a> project</h3>\n</p>\n<hr>\n<h3 align=\"center\">Every site on HTTPS</h3>\n<p align=\"center\">Caddy is an extensible server platform that uses TLS by default.</p>\n<p align=\"center\">\n\t<a href=\"https://github.com/caddyserver/caddy/actions/workflows/ci.yml\"><img src=\"https://github.com/caddyserver/caddy/actions/workflows/ci.yml/badge.svg\"></a>\n\t<a href=\"https://pkg.go.dev/github.com/caddyserver/caddy/v2\"><img src=\"https://img.shields.io/badge/godoc-reference-%23007d9c.svg\"></a>\n\t<br>\n\t<a href=\"https://twitter.com/caddyserver\" title=\"@caddyserver on Twitter\"><img src=\"https://img.shields.io/badge/twitter-@caddyserver-55acee.svg\" alt=\"@caddyserver on Twitter\"></a>\n\t<a href=\"https://caddy.community\" title=\"Caddy Forum\"><img src=\"https://img.shields.io/badge/community-forum-ff69b4.svg\" alt=\"Caddy Forum\"></a>\n\t<br>\n\t<a href=\"https://sourcegraph.com/github.com/caddyserver/caddy?badge\" title=\"Caddy on Sourcegraph\"><img src=\"https://sourcegraph.com/github.com/caddyserver/caddy/-/badge.svg\" alt=\"Caddy on Sourcegraph\"></a>\n\t<a href=\"https://cloudsmith.io/~caddy/repos/\"><img src=\"https://img.shields.io/badge/OSS%20hosting%20by-cloudsmith-blue?logo=cloudsmith\" alt=\"Cloudsmith\"></a>\n</p>\n<p align=\"center\">\n\t<a href=\"https://github.com/caddyserver/caddy/releases\">Releases</a> \u00b7\n\t<a href=\"https://caddyserver.com/docs/\">Documentation</a> \u00b7\n\t<a href=\"https://caddy.community\">Get Help</a>\n</p>\n\n\n\n### Menu\n\n- [Features](#features)\n- [Install](#install)\n- [Build from source](#build-from-source)\n\t- [For development](#for-development)\n\t- [With version information and/or plugins](#with-version-information-andor-plugins)\n- [Quick start](#quick-start)\n- [Overview](#overview)\n- [Full documentation](#full-documentation)\n- [Getting help](#getting-help)\n- [About](#about)\n\n<p align=\"center\">\n\t<b>Powered by</b>\n\t<br>\n\t<a href=\"https://github.com/caddyserver/certmagic\">\n\t\t<picture>\n\t\t\t<source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/55066419/206946718-740b6371-3df3-4d72-a822-47e4c48af999.png\">\n\t\t\t<source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/1128849/49704830-49d37200-fbd5-11e8-8385-767e0cd033c3.png\">\n\t\t\t<img src=\"https://user-images.githubusercontent.com/1128849/49704830-49d37200-fbd5-11e8-8385-767e0cd033c3.png\" alt=\"CertMagic\" width=\"250\">\n\t\t</picture>\n\t</a>\n</p>\n\n\n## [Features](https://caddyserver.com/features)\n\n- **Easy configuration** with the [Caddyfile](https://caddyserver.com/docs/caddyfile)\n- **Powerful configuration** with its [native JSON config](https://caddyserver.com/docs/json/)\n- **Dynamic configuration** with the [JSON API](https://caddyserver.com/docs/api)\n- [**Config adapters**](https://caddyserver.com/docs/config-adapters) if you don't like JSON\n- **Automatic HTTPS** by default\n\t- [ZeroSSL](https://zerossl.com) and [Let's Encrypt](https://letsencrypt.org) for public names\n\t- Fully-managed local CA for internal names & IPs\n\t- Can coordinate with other Caddy instances in a cluster\n\t- Multi-issuer fallback\n- **Stays up when other servers go down** due to TLS/OCSP/certificate-related issues\n- **Production-ready** after serving trillions of requests and managing millions of TLS certificates\n- **Scales to hundreds of thousands of sites** as proven in production\n- **HTTP/1.1, HTTP/2, and HTTP/3** all supported by default\n- **Highly extensible** [modular architecture](https://caddyserver.com/docs/architecture) lets Caddy do anything without bloat\n- **Runs anywhere** with **no external dependencies** (not even libc)\n- Written in Go, a language with higher **memory safety guarantees** than other servers\n- Actually **fun to use**\n- So much more to [discover](https://caddyserver.com/features)\n\n## Install\n\nThe simplest, cross-platform way to get started is to download Caddy from [GitHub Releases](https://github.com/caddyserver/caddy/releases) and place the executable file in your PATH.\n\nSee [our online documentation](https://caddyserver.com/docs/install) for other install instructions.\n\n## Build from source\n\nRequirements:\n\n- [Go 1.22.3 or newer](https://golang.org/dl/)\n\n### For development\n\n_**Note:** These steps [will not embed proper version information](https://github.com/golang/go/issues/29228). For that, please follow the instructions in the next section._\n\n```bash\n$ git clone \"https://github.com/caddyserver/caddy.git\"\n$ cd caddy/cmd/caddy/\n$ go build\n```\n\nWhen you run Caddy, it may try to bind to low ports unless otherwise specified in your config. If your OS requires elevated privileges for this, you will need to give your new binary permission to do so. On Linux, this can be done easily with: `sudo setcap cap_net_bind_service=+ep ./caddy`\n\nIf you prefer to use `go run` which only creates temporary binaries, you can still do this with the included `setcap.sh` like so:\n\n```bash\n$ go run -exec ./setcap.sh main.go\n```\n\nIf you don't want to type your password for `setcap`, use `sudo visudo` to edit your sudoers file and allow your user account to run that command without a password, for example:\n\n```\nusername ALL=(ALL:ALL) NOPASSWD: /usr/sbin/setcap\n```\n\nreplacing `username` with your actual username. Please be careful and only do this if you know what you are doing! We are only qualified to document how to use Caddy, not Go tooling or your computer, and we are providing these instructions for convenience only; please learn how to use your own computer at your own risk and make any needful adjustments.\n\n### With version information and/or plugins\n\nUsing [our builder tool, `xcaddy`](https://github.com/caddyserver/xcaddy)...\n\n```\n$ xcaddy build\n```\n\n...the following steps are automated:\n\n1. Create a new folder: `mkdir caddy`\n2. Change into it: `cd caddy`\n3. Copy [Caddy's main.go](https://github.com/caddyserver/caddy/blob/master/cmd/caddy/main.go) into the empty folder. Add imports for any custom plugins you want to add.\n4. Initialize a Go module: `go mod init caddy`\n5. (Optional) Pin Caddy version: `go get github.com/caddyserver/caddy/v2@version` replacing `version` with a git tag, commit, or branch name.\n6. (Optional) Add plugins by adding their import: `_ \"import/path/here\"`\n7. Compile: `go build -tags=nobadger,nomysql,nopgx`\n\n\n\n\n## Quick start\n\nThe [Caddy website](https://caddyserver.com/docs/) has documentation that includes tutorials, quick-start guides, reference, and more.\n\n**We recommend that all users -- regardless of experience level -- do our [Getting Started](https://caddyserver.com/docs/getting-started) guide to become familiar with using Caddy.**\n\nIf you've only got a minute, [the website has several quick-start tutorials](https://caddyserver.com/docs/quick-starts) to choose from! However, after finishing a quick-start tutorial, please read more documentation to understand how the software works. \ud83d\ude42\n\n\n\n\n## Overview\n\nCaddy is most often used as an HTTPS server, but it is suitable for any long-running Go program. First and foremost, it is a platform to run Go applications. Caddy \"apps\" are just Go programs that are implemented as Caddy modules. Two apps -- `tls` and `http` -- ship standard with Caddy.\n\nCaddy apps instantly benefit from [automated documentation](https://caddyserver.com/docs/json/), graceful on-line [config changes via API](https://caddyserver.com/docs/api), and unification with other Caddy apps.\n\nAlthough [JSON](https://caddyserver.com/docs/json/) is Caddy's native config language, Caddy can accept input from [config adapters](https://caddyserver.com/docs/config-adapters) which can essentially convert any config format of your choice into JSON: Caddyfile, JSON 5, YAML, TOML, NGINX config, and more.\n\nThe primary way to configure Caddy is through [its API](https://caddyserver.com/docs/api), but if you prefer config files, the [command-line interface](https://caddyserver.com/docs/command-line) supports those too.\n\nCaddy exposes an unprecedented level of control compared to any web server in existence. In Caddy, you are usually setting the actual values of the initialized types in memory that power everything from your HTTP handlers and TLS handshakes to your storage medium. Caddy is also ridiculously extensible, with a powerful plugin system that makes vast improvements over other web servers.\n\nTo wield the power of this design, you need to know how the config document is structured. Please see [our documentation site](https://caddyserver.com/docs/) for details about [Caddy's config structure](https://caddyserver.com/docs/json/).\n\nNearly all of Caddy's configuration is contained in a single config document, rather than being scattered across CLI flags and env variables and a configuration file as with other web servers. This makes managing your server config more straightforward and reduces hidden variables/factors.\n\n\n## Full documentation\n\nOur website has complete documentation:\n\n**https://caddyserver.com/docs/**\n\nThe docs are also open source. You can contribute to them here: https://github.com/caddyserver/website\n\n\n\n## Getting help\n\n- We advise companies using Caddy to secure a support contract through [Ardan Labs](https://www.ardanlabs.com/my/contact-us?dd=caddy) before help is needed.\n\n- A [sponsorship](https://github.com/sponsors/mholt) goes a long way! We can offer private help to sponsors. If Caddy is benefitting your company, please consider a sponsorship. This not only helps fund full-time work to ensure the longevity of the project, it provides your company the resources, support, and discounts you need; along with being a great look for your company to your customers and potential customers!\n\n- Individuals can exchange help for free on our community forum at https://caddy.community. Remember that people give help out of their spare time and good will. The best way to get help is to give it first!\n\nPlease use our [issue tracker](https://github.com/caddyserver/caddy/issues) only for bug reports and feature requests, i.e. actionable development items (support questions will usually be referred to the forums).\n\n\n\n## About\n\nMatthew Holt began developing Caddy in 2014 while studying computer science at Brigham Young University. (The name \"Caddy\" was chosen because this software helps with the tedious, mundane tasks of serving the Web, and is also a single place for multiple things to be organized together.) It soon became the first web server to use HTTPS automatically and by default, and now has hundreds of contributors and has served trillions of HTTPS requests.\n\n**The name \"Caddy\" is trademarked.** The name of the software is \"Caddy\", not \"Caddy Server\" or \"CaddyServer\". Please call it \"Caddy\" or, if you wish to clarify, \"the Caddy web server\". Caddy is a registered trademark of Stack Holdings GmbH.\n\n- _Project on Twitter: [@caddyserver](https://twitter.com/caddyserver)_\n- _Author on Twitter: [@mholt6](https://twitter.com/mholt6)_\n\nCaddy is a project of [ZeroSSL](https://zerossl.com), a Stack Holdings company.\n\nDebian package repository hosting is graciously provided by [Cloudsmith](https://cloudsmith.com). Cloudsmith is the only fully hosted, cloud-native, universal package management solution, that enables your organization to create, store and share packages in any format, to any place, with total confidence.\n"
}