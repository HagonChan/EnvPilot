{
    "primary_language": "TypeScript",
    "language_guidelines": "",
    "workflow_guidelines": "",
    "readme": "<img height=\"204\" src=\"https://cloud.githubusercontent.com/assets/464822/20228152/d3f36dc2-a804-11e6-80ff-51ada2d13ea7.png\">\n\n# [Blueprint](http://blueprintjs.com/) [![CircleCI](https://circleci.com/gh/palantir/blueprint/tree/develop.svg?style=svg)](https://circleci.com/gh/palantir/workflows/blueprint)\n\nBlueprint is a React-based UI toolkit for the web.\n\nIt is optimized for building complex, data-dense web interfaces for _desktop applications_ which run in modern browsers.\nThis is not a mobile-first UI toolkit.\n\n[**Read the introductory blog post \u25b8**](https://medium.com/@palantir/scaling-product-design-with-blueprint-25492827bb4a)\n\n[**View the full documentation \u25b8**](http://blueprintjs.com/docs)\n\n[**Try it out on CodeSandbox \u25b8**](https://codesandbox.io/p/sandbox/blueprint-v5-x-sandbox-react-16-wy0ojy)\n\n[**Read frequently asked questions (FAQ) on the wiki \u25b8**](https://github.com/palantir/blueprint/wiki/Frequently-Asked-Questions)\n\n## Changelog\n\nBlueprint's change log and migration guides for major versions live on the repo's\n[Github wiki](https://github.com/palantir/blueprint/wiki/5.x-Changelog).\n\n## Packages\n\nThis repository contains multiple projects in the `packages/` directory that fall into 3 categories:\n\n### Libraries\n\nThese are the component libraries we publish to NPM.\n\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/colors.svg?label=@blueprintjs/colors)](https://www.npmjs.com/package/@blueprintjs/colors) &ndash; Design system color variables.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/core.svg?label=@blueprintjs/core)](https://www.npmjs.com/package/@blueprintjs/core) &ndash; Core styles & components.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/datetime.svg?label=@blueprintjs/datetime)](https://www.npmjs.com/package/@blueprintjs/datetime) &ndash; Components for interacting with dates and times.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/datetime2.svg?label=@blueprintjs/datetime2)](https://www.npmjs.com/package/@blueprintjs/datetime2) &ndash; Next-generation components for interacting with dates and times.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/icons.svg?label=@blueprintjs/icons)](https://www.npmjs.com/package/@blueprintjs/icons) &ndash; APIs for displaying icons (contains both SVG and icon font implementations).\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/monaco-editor-theme.svg?label=@blueprintjs/monaco-editor-theme)](https://www.npmjs.com/package/@blueprintjs/monaco-editor-theme) &ndash; Theme for [Monaco Editor](https://microsoft.github.io/monaco-editor/) (:warning: experimental).\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/select.svg?label=@blueprintjs/select)](https://www.npmjs.com/package/@blueprintjs/select) &ndash; Components for selecting items from a list.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/table.svg?label=@blueprintjs/table)](https://www.npmjs.com/package/@blueprintjs/table) &ndash; Scalable & interactive spreadsheet-like table component.\n\n### Applications\n\nThese are hosted on GitHub Pages as static web applications:\n\n-   `docs-app` &ndash; Documentation site at blueprintjs.com/docs\n-   `landing-app` &ndash; Landing page at blueprintjs.com\n\nThese are used as development playground environments:\n\n-   `demo-app` &ndash; demo page that shows many components all on the same page in light and dark themes\n-   `table-dev-app` &ndash; demo page that supports manual testing of all table features\n\n### Build tooling\n\nThese packages define development dependencies and contain build configuration. They adhere to the standard NPM package layout, which allows us to keep clear API boundaries for build configuration and isolate groups of `devDependencies`. They are published to NPM in order to allow other Blueprint-related projects to use this infrastructure outside this monorepo.\n\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/docs-theme.svg?label=@blueprintjs/docs-theme)](https://www.npmjs.com/package/@blueprintjs/docs-theme) &ndash; Documentation theme for [Documentalist](https://github.com/palantir/documentalist) data.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/eslint-config.svg?label=@blueprintjs/eslint-config)](https://www.npmjs.com/package/@blueprintjs/eslint-config) &ndash; ESLint configuration used in this repo and recommended for Blueprint-related projects.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/eslint-plugin.svg?label=@blueprintjs/eslint-plugin)](https://www.npmjs.com/package/@blueprintjs/eslint-plugin) &ndash; implementations for custom ESLint rules which enforce best practices for Blueprint usage.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/karma-build-scripts.svg?label=@blueprintjs/karma-build-scripts)](https://www.npmjs.com/package/@blueprintjs/karma-build-scripts) &ndash; Karma test runner configuration.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/node-build-scripts.svg?label=@blueprintjs/node-build-scripts)](https://www.npmjs.com/package/@blueprintjs/node-build-scripts) &ndash; various utility scripts for building Sass sources, linting Sass & TypeScript, generating Sass & Less variables, and optimizing icon SVGs.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/stylelint-plugin.svg?label=@blueprintjs/stylelint-plugin)](https://www.npmjs.com/package/@blueprintjs/stylelint-plugin) &ndash; implementations for custom stylelint rules which enforce best practices for Blueprint usage.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/test-commons.svg?label=@blueprintjs/test-commons)](https://www.npmjs.com/package/@blueprintjs/test-commons) &ndash; various utility functions used in Blueprint test suites.\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/tslint-config.svg?label=@blueprintjs/tslint-config)](https://www.npmjs.com/package/@blueprintjs/tslint-config) &ndash; TSLint configuration used in this repo and recommended for Blueprint-related projects (should be installed by `@blueprintjs/eslint-config`, not directly).\n-   [![npm](https://img.shields.io/npm/v/@blueprintjs/webpack-build-scripts.svg?label=@blueprintjs/webpack-build-scripts)](https://www.npmjs.com/package/@blueprintjs/webpack-build-scripts) &ndash; Webpack build configuration for Blueprint projects.\n\n## Contributing\n\nLooking for places to contribute to the codebase?\nFirst read the [contribution guidelines](https://github.com/palantir/blueprint/blob/develop/CONTRIBUTING.md),\nthen [check out the \"help wanted\" label](https://github.com/palantir/blueprint/labels/help%20wanted).\n\n## Development\n\n[Yarn](https://yarnpkg.com/) manages third-party and inter-package dependencies in this monorepo.\nBuilds are orchestrated via [Nx's task runner](https://nx.dev/getting-started/intro) and NPM scripts.\n[Lerna-Lite](https://github.com/lerna-lite/lerna-lite) is used to prepare releases.\n\n**Prerequisites**: Node.js v18+ (see version specified in `.nvmrc`), Yarn v4.x (see version specified in `package.json`)\n\n### One-time setup\n\nFirst, ensure you have `nvm` ([Node Version Manager](https://github.com/nvm-sh/nvm)) installed.\n\nAfter cloning this repo, run:\n\n1. `nvm use` to use the supported Node version for Blueprint development.\n1. `corepack enable` to activate [Yarn](https://yarnpkg.com/getting-started) as the Node package manager.\n1. `yarn` to install all dependencies for the monorepo.\n   1. If seeing an error like \"Error when performing the request ...\", you may be using a VPN that needs to be disabled to install the dependencies.\n1. If running on Windows:\n    1. `npm install -g windows-build-tools` to install build tools globally\n    1. Ensure `bash` is your configured script-shell by running:<br />\n       `npm config set script-shell \"C:\\\\Program Files\\\\git\\\\bin\\\\bash.exe\"`\n1. `yarn verify` to ensure you have all the build tooling working properly.\n\n### Incorporating upstream changes\n\nIf you were previously in a working state and have just pulled new code from `develop`:\n\n-   If there were package dependency changes, run `yarn` at the root.\n    -   This command is very quick if there are no new things to install.\n-   Run `yarn compile` to get the latest built versions of the library packages in this repo.\n    -   This command is quicker than `yarn verify` since it doesn't build the application packages (`docs-app`,\n        `landing-app`, etc.) or run tests\n\n### Developing libraries\n\nThere are a few ways to run development scripts, here they are listed from simplest to more advanced usage:\n\n-   Run `yarn dev` from the root directory to watch changes across all packages and run the docs application with\n    webpack-dev-server.\n-   Alternately, most libraries have a dev script to run the docs app _and_ watch changes to only that package:\n    -   `yarn dev:core`\n    -   `yarn dev:docs`\n    -   `yarn dev:datetime`\n    -   `yarn dev:select`\n    -   `yarn dev:table`\n-   Lastly, if you want to control exactly which dev scripts are run and view the console output in the cleanest way,\n    we recommend opening separate terminal windows or splits and running local package dev tasks in each one. This is\n    the recommended workflow for frequent contributors and advanced developers. For example, to test changes in the core\n    and icons packages, you would run the following in separate terminals:\n    -   `cd packages/core && yarn dev`\n    -   `cd packages/icons && yarn dev`\n    -   `cd packages/docs-app && yarn dev`\n\n### Updating documentation\n\nMuch of Blueprint's documentation lives inside source code as JSDoc comments in `.tsx` files and KSS markup in `.scss`\nfiles. This documentation is extracted and converted into static JSON data using\n[documentalist](https://github.com/palantir/documentalist/).\n\nIf you are updating documentation sources (_not_ the docs UI code which lives in `packages/docs-app` or the docs theme\nin `packages/docs-theme`), you'll need to run `yarn compile` from `packages/docs-data` to see changes reflected in the\napplication. For simplicity, an alias script `yarn docs-data` exists in the root to minimize directory hopping.\n\n### Updating icons\n\nThe [One-time setup](#one-time-setup) and [Incorporating upstream changes](#incorporating-upstream-changes) steps should\nproduce the generated source code in this repo used to build the icons documentation. This is sufficient for most\ndevelopment workflows.\n\nIf you are updating icons or adding new ones, you'll need to run `yarn compile` in `packages/icons` to see those changes\nreflected before running any of the dev scripts.\n\n## License\n\nThis project is made available under the Apache 2.0 License.\n"
}