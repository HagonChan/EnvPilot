{
    "primary_language": "Rust",
    "language_guidelines": "Programming Language guidelines for Rust:\n# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\nname: CI\n\non: [push, pull_request]\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n  test:\n    name: \"${{ matrix.platform.name }} ${{ matrix.test.name }} (${{ matrix.platform.toolchain }})\"\n    runs-on: ${{ matrix.platform.distro }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        platform:\n          - { name: Linux, distro: ubuntu-latest, toolchain: stable }\n          - { name: Windows, distro: windows-latest, toolchain: stable }\n          - { name: macOS, distro: macOS-latest, toolchain: stable }\n          - { name: Linux, distro: ubuntu-latest, toolchain: nightly }\n        test:\n          - { name: Debug }\n          - { name: Examples, flag: \"--examples\" }\n          - { name: Contrib, flag: \"--contrib\" }\n        include:\n          # Additional tests on Linux/stable.\n          - platform: { name: Linux, distro: ubuntu-latest, toolchain: stable }\n            test: { name: Core, flag: \"--core\" }\n          - platform: { name: Linux, distro: ubuntu-latest, toolchain: stable }\n            test: { name: Release, flag: \"--release\" }\n          - platform: { name: Linux, distro: ubuntu-latest, toolchain: stable }\n            test: { name: Testbench, flag: \"--testbench\" }\n          - platform: { name: Linux, distro: ubuntu-latest, toolchain: stable }\n            test: { name: UI, flag: \"--ui\" }\n            fallible: true\n          # Allow tests on nightly to fail.\n          - platform: { toolchain: nightly }\n            fallible: true\n          # Use the bigger 'C:/' from the \"Switch Disk\" step\n          - platform: { name: Windows }\n            working-directory:\n              \"C:\\\\a\\\\${{ github.event.repository.name }}\\\\${{ github.event.repository.name }}\"\n\n    steps:\n      - name: Checkout Sources\n        uses: actions/checkout@v4\n\n      - name: Free Disk Space (Linux)\n        if: matrix.platform.name == 'Linux'\n        run: |\n            echo \"Freeing up disk space on Linux CI\"\n            df -h\n            sudo rm -rf /usr/share/dotnet/\n            sudo rm -rf /opt/ghc\n            sudo rm -rf /usr/local/share/boost\n            sudo rm -rf /usr/local/graalvm/\n            sudo rm -rf /usr/local/.ghcup/\n            sudo rm -rf /usr/local/share/powershell\n            sudo rm -rf /usr/local/share/chromium\n            sudo rm -rf /usr/local/lib/android\n            sudo rm -rf /usr/local/lib/node_modules\n            sudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\n            sudo docker image prune --all --force\n            df -h\n\n      - name: Install Native Dependencies (macOS)\n        if: matrix.platform.name == 'macOS'\n        run: |\n            brew install mysql-client@8.4 libpq sqlite coreutils\n            brew link --force --overwrite mysql-client@8.4\n            brew link --force --overwrite libpq\n            echo \"/usr/local/opt/mysql-client/bin\" >> \"$GITHUB_PATH\"\n\n      # vcpkg --triplet x64-windows install libmysql libpq sqlite3 openssl\n      # + vcpkg/installed/vcpkg (in particular, the status file)\n      - name: Install Native Dependencies (Windows)\n        if: matrix.platform.name == 'Windows'\n        run: |\n          curl -fsLS -o vcpkg.7z https://blob.rocket.rs/vcpkg-2024-08-16.7z\n          7z x vcpkg.7z -y -bb0\n          xcopy .\\vcpkg $env:VCPKG_INSTALLATION_ROOT /s /e /h /y /q\n          vcpkg integrate install\n          echo \"VCPKGRS_DYNAMIC=1\" >> \"$env:GITHUB_ENV\"\n          echo \"VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT\" >> \"$env:GITHUB_ENV\"\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\" >> \"$env:GITHUB_PATH\"\n          echo \"MYSQLCLIENT_VERSION=8.0.39\" >> \"$env:GITHUB_ENV\"\n\n      - name: Install NASM (Windows)\n        if: matrix.platform.name == 'Windows'\n        uses: ilammy/setup-nasm@v1\n\n      - name: Install Native Dependencies (Linux)\n        if: matrix.platform.name == 'Linux'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libmysqlclient-dev libpq-dev libsqlite3-dev\n\n      - name: Install Rust\n        uses: dtolnay/rust-toolchain@master\n        id: toolchain\n        with:\n          toolchain: ${{ matrix.platform.toolchain }}\n          components: rust-src\n\n      - name: Cache Example Workspace\n        if: matrix.test.name == 'Examples'\n        uses: Swatinem/rust-cache@v2\n        with:\n          workspaces: examples\n          key: ${{ matrix.test.name }}-${{ steps.toolchain.outputs.cachekey }}\n\n      - name: Cache Root Workspace\n        if: matrix.test.name != 'Examples'\n        uses: Swatinem/rust-cache@v2\n        with:\n          key: ${{ matrix.test.name }}-${{ steps.toolchain.outputs.cachekey }}\n\n      # Don't run out of disk space on Windows. C: has much much space than D:.\n      - name: Switch Disk (Windows)\n        if: matrix.platform.name == 'Windows'\n        run: |\n          Get-PSDrive\n          cp D:\\a C:\\ -Recurse\n          Get-PSDrive\n\n      - name: Run Tests\n        continue-on-error: ${{ matrix.fallible || false }}\n        working-directory: ${{ matrix.working-directory || github.workspace }}\n        run: ./scripts/test.sh ${{ matrix.test.flag || '' }} -q\n        shell: bash\n",
    "readme": "# Rocket\n\n[![Build Status](https://github.com/rwf2/Rocket/workflows/CI/badge.svg)](https://github.com/rwf2/Rocket/actions)\n[![Rocket Homepage](https://img.shields.io/badge/web-rocket.rs-red.svg?style=flat&label=https&colorB=d33847)](https://rocket.rs)\n[![Current Crates.io Version](https://img.shields.io/crates/v/rocket.svg)](https://crates.io/crates/rocket)\n[![Matrix: #rocket:mozilla.org](https://img.shields.io/badge/style-%23rocket:mozilla.org-blue.svg?style=flat&label=[m])](https://chat.mozilla.org/#/room/#rocket:mozilla.org)\n\nRocket is an async web framework for Rust with a focus on usability, security,\nextensibility, and speed.\n\n```rust\n#[macro_use] extern crate rocket;\n\n#[get(\"/<name>/<age>\")]\nfn hello(name: &str, age: u8) -> String {\n    format!(\"Hello, {} year old named {}!\", age, name)\n}\n\n#[launch]\nfn rocket() -> _ {\n    rocket::build().mount(\"/hello\", routes![hello])\n}\n```\n\nVisiting `localhost:8000/hello/John/58`, for example, will trigger the `hello`\nroute resulting in the string `Hello, 58 year old named John!` being sent to the\nbrowser. If an `<age>` string was passed in that can't be parsed as a `u8`, the\nroute won't get called, resulting in a 404 error.\n\n## Documentation\n\nRocket is extensively documented:\n\n  * [Overview]: A brief look at what makes Rocket special.\n  * [Quickstart]: How to get started as quickly as possible.\n  * [Getting Started]: How to start your first Rocket project.\n  * [Guide]: A detailed guide and reference to Rocket.\n  * [API Documentation]: The \"rustdocs\".\n\n[Quickstart]: https://rocket.rs/guide/quickstart\n[Getting Started]: https://rocket.rs/guide/getting-started\n[Overview]: https://rocket.rs/overview/\n[Guide]: https://rocket.rs/guide/\n[API Documentation]: https://api.rocket.rs\n\nDocumentation for the `master` branch is available at https://rocket.rs/master\nand https://api.rocket.rs/master.\n\nDocumentation for major release version `${x}` is available at\n`https://[api.]rocket.rs/v${x}`. For example, the v0.4 docs are available at\nhttps://rocket.rs/v0.4 and https://api.rocket.rs/v0.4.\n\nFinally, API docs for active git branches are available at\n`https://api.rocket.rs/${branch}`. For example, API docs for the `master` branch\nare available at https://api.rocket.rs/master. Branch rustdocs are built and\ndeployed on every commit.\n\n## Examples\n\nThe [examples](examples#readme) directory contains complete crates that showcase\nRocket's features and usage. Each example can be compiled and run with Cargo.\nFor instance, the following sequence of commands builds and runs the `hello`\nexample:\n\n```sh\ncd examples/hello\ncargo run\n```\n\n## Getting Help\n\nIf you find yourself needing help outside of the documentation, you may:\n\n  * Ask questions via [GitHub discussions questions].\n  * Chat with us at [`#rocket:mozilla.org`] on Matrix (join [via Element]).\n\n[`#rocket:mozilla.org`]: https://chat.mozilla.org/#/room/#rocket:mozilla.org\n[via Element]: https://chat.mozilla.org/#/room/#rocket:mozilla.org\n[GitHub discussions questions]: https://github.com/rwf2/Rocket/discussions/categories/questions\n\n## Contributing\n\nContributions are absolutely, positively welcomed and encouraged! If you're\ninterested in contributing code, please first read [CONTRIBUTING] for complete\nguidelines. Additionally, you could:\n\n  1. Submit a feature request or bug report as an [issue].\n  2. Ask for improved documentation as an [issue].\n  3. Comment on [issues that require feedback].\n  4. Answers questions in [GitHub discussions questions].\n  5. Share a project in [GitHub discussions show & tell].\n\n[issue]: https://github.com/rwf2/Rocket/issues\n[issues that require feedback]: https://github.com/rwf2/Rocket/issues?q=is%3Aissue+is%3Aopen+label%3A%22feedback+wanted%22\n[pull requests]: https://github.com/rwf2/Rocket/pulls\n[CONTRIBUTING]: CONTRIBUTING.md\n[GitHub discussions show & tell]: https://github.com/rwf2/Rocket/discussions/categories/show-tell\n\n## License\n\nRocket is licensed under either of the following, at your option:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n * MIT License ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in Rocket by you shall be dual licensed under the MIT License and\nApache License, Version 2.0, without any additional terms or conditions.\n\nThe Rocket website docs are licensed under [separate terms](docs/LICENSE). Any\ncontribution intentionally submitted for inclusion in the Rocket website docs by\nyou shall be licensed under those terms.\n",
    "org": "rwf2",
    "repo": "Rocket",
    "number": 2838,
    "commit": "de6632ea56cce497d23a8f2223b8f8721202ff39"
}