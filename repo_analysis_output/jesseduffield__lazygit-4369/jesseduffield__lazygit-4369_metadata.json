{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\nname: Continuous Integration\n\nenv:\n  GO_VERSION: 1.22\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  unit-tests:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - windows-latest\n        include:\n          - os: ubuntu-latest\n            cache_path: ~/.cache/go-build\n          - os: windows-latest\n            cache_path: ~\\AppData\\Local\\go-build\n    name: ci - ${{matrix.os}}\n    runs-on: ${{matrix.os}}\n    env:\n      GOFLAGS: -mod=vendor\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.22.x\n      - name: Test code\n        # we're passing -short so that we skip the integration tests, which will be run in parallel below\n        run: |\n          mkdir -p /tmp/code_coverage\n          go test ./... -short -cover -args \"-test.gocoverdir=/tmp/code_coverage\"\n      - name: Upload code coverage artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: coverage-unit-${{ matrix.os }}-${{ github.run_id }}\n          path: /tmp/code_coverage\n\n  integration-tests:\n    strategy:\n      fail-fast: false\n      matrix:\n        git-version:\n          - 2.20.0 # oldest supported version\n          - 2.22.5\n          - 2.23.0\n          - 2.25.1\n          - 2.30.8\n          - latest # We rely on github to have the latest version installed on their VMs\n    runs-on: ubuntu-latest\n    name: \"Integration Tests - git ${{matrix.git-version}}\"\n    env:\n      GOFLAGS: -mod=vendor\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Restore Git cache\n        if: matrix.git-version != 'latest'\n        id: cache-git-restore\n        uses: actions/cache/restore@v4\n        with:\n          path: ~/git-${{matrix.git-version}}\n          key: ${{runner.os}}-git-${{matrix.git-version}}\n      - name: Build Git ${{matrix.git-version}}\n        if: steps.cache-git-restore.outputs.cache-hit != 'true' && matrix.git-version != 'latest'\n        run: >\n          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential ca-certificates curl gettext libexpat1-dev libssl-dev libz-dev openssl\n          && curl -sL \"https://mirrors.edge.kernel.org/pub/software/scm/git/git-${{matrix.git-version}}.tar.xz\" -o - | tar xJ -C \"$HOME\"\n          && cd \"$HOME/git-${{matrix.git-version}}\"\n          && ./configure\n          && make -j\n      - name: Install Git ${{matrix.git-version}}\n        if: matrix.git-version != 'latest'\n        run: sudo make -C \"$HOME/git-${{matrix.git-version}}\" -j install\n      - name: Save Git cache\n        if: steps.cache-git-restore.outputs.cache-hit != 'true' && matrix.git-version != 'latest'\n        uses: actions/cache/save@v4\n        with:\n          path: ~/git-${{matrix.git-version}}\n          key: ${{runner.os}}-git-${{matrix.git-version}}\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.22.x\n      - name: Print git version\n        run: git --version\n      - name: Test code\n        env:\n          # See https://go.dev/blog/integration-test-coverage\n          LAZYGIT_GOCOVERDIR: /tmp/code_coverage\n        run: |\n          mkdir -p /tmp/code_coverage\n          ./scripts/run_integration_tests.sh\n      - name: Upload code coverage artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: coverage-integration-${{ matrix.git-version }}-${{ github.run_id }}\n          path: /tmp/code_coverage\n  build:\n    runs-on: ubuntu-latest\n    env:\n      GOFLAGS: -mod=vendor\n      GOARCH: amd64\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.22.x\n      - name: Build linux binary\n        run: |\n          GOOS=linux go build\n      - name: Build windows binary\n        run: |\n          GOOS=windows go build\n      - name: Build darwin binary\n        run: |\n          GOOS=darwin go build\n      - name: Build integration test binary\n        run: |\n          GOOS=linux go build cmd/integration_test/main.go\n      - name: Build integration test injector\n        run: |\n          GOOS=linux go build pkg/integration/clients/injector/main.go\n  check-codebase:\n    runs-on: ubuntu-latest\n    env:\n      GOFLAGS: -mod=vendor\n      GOARCH: amd64\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.22.x\n      - name: Check Vendor Directory\n        # ensure our vendor directory matches up with our go modules\n        run: |\n          go mod vendor && git diff --exit-code || (echo \"Unexpected change to vendor directory. Run 'go mod vendor' locally and commit the changes\" && exit 1)\n      - name: Check go.mod file\n        # ensure our go.mod file is clean\n        run: |\n          go mod tidy && git diff --exit-code || (echo \"go.mod file is not clean. Run 'go mod tidy' locally and commit the changes\" && exit 1)\n      - name: Check All Auto-Generated Files\n        # ensure all our auto-generated files are up to date\n        run: |\n          go generate ./... && git diff --quiet || (git status -s; echo \"Auto-generated files not up to date. Run 'go generate ./...' locally and commit the changes\" && exit 1)\n        shell: bash # needed so that we get \"-o pipefail\"\n      - name: Check Filenames\n        run: scripts/check_filenames.sh\n  lint:\n    runs-on: ubuntu-latest\n    env:\n      GOFLAGS: -mod=vendor\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.22.x\n      - name: Lint\n        uses: golangci/golangci-lint-action@v6.1.0\n        with:\n          version: v1.60\n      - name: errors\n        run: golangci-lint run\n        if: ${{ failure() }}\n  check-required-label:\n    runs-on: ubuntu-latest\n    if: github.ref != 'refs/heads/master'\n    steps:\n      - uses: mheap/github-action-required-labels@v5\n        with:\n          mode: exactly\n          count: 1\n          labels: \"ignore-for-release, feature, enhancement, bug, maintenance, docs, i18n, performance\"\n  upload-coverage:\n    # List all jobs that produce coverage files\n    needs: [unit-tests, integration-tests]\n    if: github.event.pull_request.head.repo.full_name == github.repository\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Go\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.22.x\n\n      - name: Download all coverage artifacts\n        uses: actions/download-artifact@v4\n        with:\n          path: /tmp/code_coverage\n\n      - name: Combine coverage files\n        run: |\n          # Find all directories in /tmp/code_coverage and create a comma-separated list\n          COVERAGE_DIRS=$(find /tmp/code_coverage -mindepth 1 -maxdepth 1 -type d -printf '/tmp/code_coverage/%f,' | sed 's/,$//')\n          echo \"Coverage directories: $COVERAGE_DIRS\"\n          # Run the combine command with the generated list\n          go tool covdata textfmt -i=$COVERAGE_DIRS -o coverage.out\n          echo \"Combined coverage:\"\n          go tool cover -func coverage.out | tail -1 | awk '{print $3}'\n\n      - name: Upload to Codacy\n        run: |\n          CODACY_PROJECT_TOKEN=${{ secrets.CODACY_PROJECT_TOKEN }} \\\n            bash <(curl -Ls https://coverage.codacy.com/get.sh) report \\\n            --force-coverage-parser go -r coverage.out\n\n  check-for-fixups:\n    runs-on: ubuntu-latest\n    if: github.ref != 'refs/heads/master'\n    steps:\n      # See https://github.com/actions/checkout/issues/552#issuecomment-1167086216\n      - name: \"PR commits\"\n        run: echo \"PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} ))\" >> \"${GITHUB_ENV}\"\n\n      - name: \"Checkout PR branch and all PR commits\"\n        uses: actions/checkout@v4\n        with:\n          repository: ${{ github.event.pull_request.head.repo.full_name }}\n          ref: ${{ github.event.pull_request.head.ref }}\n          fetch-depth: ${{ env.PR_FETCH_DEPTH }}\n\n      - name: Check for fixups\n        run: |\n          ./scripts/check_for_fixups.sh ${{ github.event.pull_request.base.ref }}\n",
    "readme": "<div align=\"center\">\n<sup>Special thanks to:</sup>\n<br>\n<br>\n<a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=lazygit_20231023\">\n  <div>\n    <img src=\"../assets/warp.png\" width=\"330\" alt=\"Warp\">\n  </div>\n  <b>Warp, the intelligent terminal</b>\n  <br>\n  <b>Available for MacOS and Linux</b>\n  <br>\n  <div>\n    <sup>Visit\u00a0warp.dev\u00a0to learn more.</sup>\n  </div>\n</a>\n<br>\n<hr>\n<a href=\"https://www.subble.com\">\n  <div>\n    <img src=\"https://subble-marketing-portal-media-storage.s3.amazonaws.com/images/subble-black-name-logo.svg\" width=\"230\" alt=\"Subble\">\n  </div>\n  <b>I (Jesse) co-founded Subble to save your company time and money by helping you manage its software subscriptions. Check it out!</b>\n</a>\n<br>\n\n<hr>\n</div>\n\n<p align=\"center\">\n  <img width=\"536\" src=\"https://user-images.githubusercontent.com/8456633/174470852-339b5011-5800-4bb9-a628-ff230aa8cd4e.png\">\n</p>\n\n<div align=\"center\">\n\nA simple terminal UI for git commands\n<br/>\n\n[![GitHub Releases](https://img.shields.io/github/downloads/jesseduffield/lazygit/total)](https://github.com/jesseduffield/lazygit/releases) [![Go Report Card](https://goreportcard.com/badge/github.com/jesseduffield/lazygit)](https://goreportcard.com/report/github.com/jesseduffield/lazygit) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/f46416b715d74622895657935fcada21)](https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade) [![Codacy Badge](https://app.codacy.com/project/badge/Coverage/f46416b715d74622895657935fcada21)](https://app.codacy.com/gh/jesseduffield/lazygit/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_coverage) [![GolangCI](https://golangci.com/badges/github.com/jesseduffield/lazygit.svg)](https://golangci.com) [![GitHub tag](https://img.shields.io/github/tag/jesseduffield/lazygit.svg)](https://github.com/jesseduffield/lazygit/releases/latest) [![homebrew](https://img.shields.io/homebrew/v/lazygit)](https://github.com/Homebrew/homebrew-core/blob/master/Formula/lazygit.rb)\n\n![commit_and_push](../assets/demo/commit_and_push-compressed.gif)\n\n</div>\n\n## Sponsors\n\n<p align=\"center\">\n Maintenance of this project is made possible by all the <a href=\"https://github.com/jesseduffield/lazygit/graphs/contributors\">contributors</a> and <a href=\"https://github.com/sponsors/jesseduffield\">sponsors</a>. If you'd like to sponsor this project and have your avatar or company logo appear below <a href=\"https://github.com/sponsors/jesseduffield\">click here</a>. \ud83d\udc99\n</p>\n\n<p align=\"center\">\n<!-- sponsors --><a href=\"https://github.com/intabulas\"><img src=\"https://github.com/intabulas.png\" width=\"60px\" alt=\"Mark Lussier\" /></a><a href=\"https://github.com/peppy\"><img src=\"https://github.com/peppy.png\" width=\"60px\" alt=\"Dean Herbert\" /></a><a href=\"https://github.com/piot\"><img src=\"https://github.com/piot.png\" width=\"60px\" alt=\"Peter Bjorklund\" /></a><a href=\"https://github.com/rgwood\"><img src=\"https://github.com/rgwood.png\" width=\"60px\" alt=\"Reilly Wood\" /></a><a href=\"https://github.com/oliverguenther\"><img src=\"https://github.com/oliverguenther.png\" width=\"60px\" alt=\"Oliver G\u00fcnther\" /></a><a href=\"https://github.com/pawanjay176\"><img src=\"https://github.com/pawanjay176.png\" width=\"60px\" alt=\"Pawan Dhananjay\" /></a><a href=\"https://github.com/bdach\"><img src=\"https://github.com/bdach.png\" width=\"60px\" alt=\"Bart\u0142omiej Dach\" /></a><a href=\"https://github.com/carstengehling\"><img src=\"https://github.com/carstengehling.png\" width=\"60px\" alt=\"Carsten Gehling\" /></a><a href=\"https://github.com/ceuk\"><img src=\"https://github.com/ceuk.png\" width=\"60px\" alt=\"CEUK\" /></a><a href=\"https://github.com/Xetera\"><img src=\"https://github.com/Xetera.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/HoldenLucas\"><img src=\"https://github.com/HoldenLucas.png\" width=\"60px\" alt=\"Holden Lucas\" /></a><a href=\"https://github.com/nartc\"><img src=\"https://github.com/nartc.png\" width=\"60px\" alt=\"Chau Tran\" /></a><a href=\"https://github.com/matejcik\"><img src=\"https://github.com/matejcik.png\" width=\"60px\" alt=\"matejcik\" /></a><a href=\"https://github.com/lucatume\"><img src=\"https://github.com/lucatume.png\" width=\"60px\" alt=\"theAverageDev (Luca Tumedei)\" /></a><a href=\"https://github.com/KowalskiPiotr98\"><img src=\"https://github.com/KowalskiPiotr98.png\" width=\"60px\" alt=\"Piotr Kowalski\" /></a><a href=\"https://github.com/IvanZuy\"><img src=\"https://github.com/IvanZuy.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/nicholascloud\"><img src=\"https://github.com/nicholascloud.png\" width=\"60px\" alt=\"Nicholas Cloud\" /></a><a href=\"https://github.com/ava1ar\"><img src=\"https://github.com/ava1ar.png\" width=\"60px\" alt=\"Aliaksandr Stelmachonak\" /></a><a href=\"https://github.com/minidfx\"><img src=\"https://github.com/minidfx.png\" width=\"60px\" alt=\"Burgy Benjamin\" /></a><a href=\"https://github.com/JoeKlemmer\"><img src=\"https://github.com/JoeKlemmer.png\" width=\"60px\" alt=\"Joe Klemmer\" /></a><a href=\"https://github.com/tobi\"><img src=\"https://github.com/tobi.png\" width=\"60px\" alt=\"Tobias L\u00fctke\" /></a><a href=\"https://github.com/benbfortis\"><img src=\"https://github.com/benbfortis.png\" width=\"60px\" alt=\"Ben Beaumont\" /></a><a href=\"https://github.com/jakewarren\"><img src=\"https://github.com/jakewarren.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/tgpholly\"><img src=\"https://github.com/tgpholly.png\" width=\"60px\" alt=\"Holly\" /></a><a href=\"https://github.com/socketbox\"><img src=\"https://github.com/socketbox.png\" width=\"60px\" alt=\"Casey Boettcher\" /></a><a href=\"https://github.com/bitprophet\"><img src=\"https://github.com/bitprophet.png\" width=\"60px\" alt=\"Jeff Forcier\" /></a><a href=\"https://github.com/tayleighr\"><img src=\"https://github.com/tayleighr.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/Novakov\"><img src=\"https://github.com/Novakov.png\" width=\"60px\" alt=\"Maciej T. Nowak\" /></a><a href=\"https://github.com/farzadmf\"><img src=\"https://github.com/farzadmf.png\" width=\"60px\" alt=\"Farzad Majidfayyaz\" /></a><a href=\"https://github.com/nekhaevskiy\"><img src=\"https://github.com/nekhaevskiy.png\" width=\"60px\" alt=\"Yury\" /></a><a href=\"https://github.com/reivilibre\"><img src=\"https://github.com/reivilibre.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/andreaskurth\"><img src=\"https://github.com/andreaskurth.png\" width=\"60px\" alt=\"Andreas Kurth\" /></a><a href=\"https://github.com/BSteffaniak\"><img src=\"https://github.com/BSteffaniak.png\" width=\"60px\" alt=\"Braden Steffaniak\" /></a><a href=\"https://github.com/jordan-gillard\"><img src=\"https://github.com/jordan-gillard.png\" width=\"60px\" alt=\"Jordan Gillard\" /></a><a href=\"https://github.com/smangels\"><img src=\"https://github.com/smangels.png\" width=\"60px\" alt=\"Sebastian\" /></a><a href=\"https://github.com/George-Spanos\"><img src=\"https://github.com/George-Spanos.png\" width=\"60px\" alt=\"George Spanos\" /></a><a href=\"https://github.com/amslezak\"><img src=\"https://github.com/amslezak.png\" width=\"60px\" alt=\"Andy Slezak\" /></a><a href=\"https://github.com/jessealama\"><img src=\"https://github.com/jessealama.png\" width=\"60px\" alt=\"Jesse Alama\" /></a><a href=\"https://github.com/danielkokott\"><img src=\"https://github.com/danielkokott.png\" width=\"60px\" alt=\"Daniel Kokott\" /></a><a href=\"https://github.com/heijmans\"><img src=\"https://github.com/heijmans.png\" width=\"60px\" alt=\"Jan Heijmans\" /></a><a href=\"https://github.com/knowald\"><img src=\"https://github.com/knowald.png\" width=\"60px\" alt=\"Kevin Nowald\" /></a><a href=\"https://github.com/sempruijs\"><img src=\"https://github.com/sempruijs.png\" width=\"60px\" alt=\"sem pruijs\" /></a><a href=\"https://github.com/omarluq\"><img src=\"https://github.com/omarluq.png\" width=\"60px\" alt=\"Omar Luq\" /></a><a href=\"https://github.com/ethanjli\"><img src=\"https://github.com/ethanjli.png\" width=\"60px\" alt=\"Ethan Li\" /></a><a href=\"https://github.com/phubaba\"><img src=\"https://github.com/phubaba.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/fomrat\"><img src=\"https://github.com/fomrat.png\" width=\"60px\" alt=\"Brian MacAskill\" /></a><a href=\"https://github.com/canhazcodez\"><img src=\"https://github.com/canhazcodez.png\" width=\"60px\" alt=\"Maxi\" /></a><a href=\"https://github.com/neunkasulle\"><img src=\"https://github.com/neunkasulle.png\" width=\"60px\" alt=\"Jan Zenkner\" /></a><a href=\"https://github.com/ahkohd\"><img src=\"https://github.com/ahkohd.png\" width=\"60px\" alt=\"Victor Aremu\" /></a><a href=\"https://github.com/RVxLab\"><img src=\"https://github.com/RVxLab.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/glotchimo\"><img src=\"https://github.com/glotchimo.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/josephjacks\"><img src=\"https://github.com/josephjacks.png\" width=\"60px\" alt=\"JJ\" /></a><a href=\"https://github.com/FrederickGeek8\"><img src=\"https://github.com/FrederickGeek8.png\" width=\"60px\" alt=\"Frederick Morlock\" /></a><a href=\"https://github.com/ezdac\"><img src=\"https://github.com/ezdac.png\" width=\"60px\" alt=\"Maximilian Langenfeld\" /></a><a href=\"https://github.com/dbuls\"><img src=\"https://github.com/dbuls.png\" width=\"60px\" alt=\"Davis Buls\" /></a><a href=\"https://github.com/lppassos\"><img src=\"https://github.com/lppassos.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/chrisolsen\"><img src=\"https://github.com/chrisolsen.png\" width=\"60px\" alt=\"Chris Olsen\" /></a><a href=\"https://github.com/neilcode\"><img src=\"https://github.com/neilcode.png\" width=\"60px\" alt=\"Neil Lambert\" /></a><a href=\"https://github.com/dhh\"><img src=\"https://github.com/dhh.png\" width=\"60px\" alt=\"David Heinemeier Hansson\" /></a><a href=\"https://github.com/macmiranda\"><img src=\"https://github.com/macmiranda.png\" width=\"60px\" alt=\"Marco Aurelio Caldas Miranda\" /></a><a href=\"https://github.com/osarogie\"><img src=\"https://github.com/osarogie.png\" width=\"60px\" alt=\"Emmanuel Nosakhare\" /></a><a href=\"https://github.com/ethanfischer\"><img src=\"https://github.com/ethanfischer.png\" width=\"60px\" alt=\"Ethan Fischer\" /></a><a href=\"https://github.com/poshboytl\"><img src=\"https://github.com/poshboytl.png\" width=\"60px\" alt=\"Terry Tai\" /></a><a href=\"https://github.com/a-jentleman\"><img src=\"https://github.com/a-jentleman.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/roesnera\"><img src=\"https://github.com/roesnera.png\" width=\"60px\" alt=\"Adam Roesner\" /></a><a href=\"https://github.com/seven1m\"><img src=\"https://github.com/seven1m.png\" width=\"60px\" alt=\"Tim Morgan\" /></a><a href=\"https://github.com/sgoridotla1\"><img src=\"https://github.com/sgoridotla1.png\" width=\"60px\" alt=\"Max Shypulniak\" /></a><a href=\"https://github.com/ADIX7\"><img src=\"https://github.com/ADIX7.png\" width=\"60px\" alt=\"Kov\u00e1cs \u00c1d\u00e1m\" /></a><a href=\"https://github.com/timbryandev\"><img src=\"https://github.com/timbryandev.png\" width=\"60px\" alt=\"timbryandev\" /></a><a href=\"https://github.com/Perlence\"><img src=\"https://github.com/Perlence.png\" width=\"60px\" alt=\"Sviatoslav Abakumov\" /></a><a href=\"https://github.com/KarlK90\"><img src=\"https://github.com/KarlK90.png\" width=\"60px\" alt=\"Stefan Kerkmann\" /></a><a href=\"https://github.com/slowdub\"><img src=\"https://github.com/slowdub.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/serranomorante\"><img src=\"https://github.com/serranomorante.png\" width=\"60px\" alt=\"Patricio Serrano\" /></a><a href=\"https://github.com/DanRioDev\"><img src=\"https://github.com/DanRioDev.png\" width=\"60px\" alt=\"Dan (Danilo) Rio (Ribeiro)\" /></a><a href=\"https://github.com/kiriDevs\"><img src=\"https://github.com/kiriDevs.png\" width=\"60px\" alt=\"Kiri\" /></a><a href=\"https://github.com/Bparsons0904\"><img src=\"https://github.com/Bparsons0904.png\" width=\"60px\" alt=\"Bob Parsons\" /></a><a href=\"https://github.com/ysulyma\"><img src=\"https://github.com/ysulyma.png\" width=\"60px\" alt=\"Yuri Sulyma\" /></a><a href=\"https://github.com/VietYorgo\"><img src=\"https://github.com/VietYorgo.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/drzbida\"><img src=\"https://github.com/drzbida.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/bjornevik\"><img src=\"https://github.com/bjornevik.png\" width=\"60px\" alt=\"John Even Bj\u00f8rnevik\" /></a><a href=\"https://github.com/moberst\"><img src=\"https://github.com/moberst.png\" width=\"60px\" alt=\"Michael Oberst\" /></a><a href=\"https://github.com/stianh\"><img src=\"https://github.com/stianh.png\" width=\"60px\" alt=\"Stian Hegglund\" /></a><a href=\"https://github.com/arkalon76\"><img src=\"https://github.com/arkalon76.png\" width=\"60px\" alt=\"Kenth Fagerlund\" /></a><a href=\"https://github.com/Djuuu\"><img src=\"https://github.com/Djuuu.png\" width=\"60px\" alt=\"Julien Tardot\" /></a><a href=\"https://github.com/antikytheraton\"><img src=\"https://github.com/antikytheraton.png\" width=\"60px\" alt=\"Aaron Arredondo\" /></a><a href=\"https://github.com/ellord\"><img src=\"https://github.com/ellord.png\" width=\"60px\" alt=\"Ellord Tayag\" /></a><a href=\"https://github.com/EdgarPost\"><img src=\"https://github.com/EdgarPost.png\" width=\"60px\" alt=\"Edgar Post-Buijs\" /></a><a href=\"https://github.com/sbc64\"><img src=\"https://github.com/sbc64.png\" width=\"60px\" alt=\"sbc64\" /></a><a href=\"https://github.com/caillou\"><img src=\"https://github.com/caillou.png\" width=\"60px\" alt=\"Pierre Spring\" /></a><a href=\"https://github.com/mebezac\"><img src=\"https://github.com/mebezac.png\" width=\"60px\" alt=\"Zac Clay\" /></a><a href=\"https://github.com/Tom94\"><img src=\"https://github.com/Tom94.png\" width=\"60px\" alt=\"Thomas M\u00fcller\" /></a><a href=\"https://github.com/ccssmnn\"><img src=\"https://github.com/ccssmnn.png\" width=\"60px\" alt=\"Carl Assmann\" /></a><a href=\"https://github.com/pdonadeo\"><img src=\"https://github.com/pdonadeo.png\" width=\"60px\" alt=\"Paolo Donadeo\" /></a><a href=\"https://github.com/bjjblackbelt\"><img src=\"https://github.com/bjjblackbelt.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/code-hunger\"><img src=\"https://github.com/code-hunger.png\" width=\"60px\" alt=\"Alex G\" /></a><a href=\"https://github.com/elithper\"><img src=\"https://github.com/elithper.png\" width=\"60px\" alt=\"Michael Howard\" /></a><a href=\"https://github.com/krakoram\"><img src=\"https://github.com/krakoram.png\" width=\"60px\" alt=\"Martin Kr\u00e1kora\" /></a><a href=\"https://github.com/YatFungLoo\"><img src=\"https://github.com/YatFungLoo.png\" width=\"60px\" alt=\"Yat Fung\" /></a><a href=\"https://github.com/zodasync\"><img src=\"https://github.com/zodasync.png\" width=\"60px\" alt=\"zane\" /></a><a href=\"https://github.com/jlcrochet\"><img src=\"https://github.com/jlcrochet.png\" width=\"60px\" alt=\"Jeffrey Crochet\" /></a><!-- sponsors -->\n</p>\n\n## Elevator Pitch\n\nRant time: You've heard it before, git is _powerful_, but what good is that power when everything is so damn hard to do? Interactive rebasing requires you to edit a goddamn TODO file in your editor? _Are you kidding me?_ To stage part of a file you need to use a command line program to step through each hunk and if a hunk can't be split down any further but contains code you don't want to stage, you have to edit an arcane patch file _by hand_? _Are you KIDDING me?!_ Sometimes you get asked to stash your changes when switching branches only to realise that after you switch and unstash that there weren't even any conflicts and it would have been fine to just checkout the branch directly? _YOU HAVE GOT TO BE KIDDING ME!_\n\nIf you're a mere mortal like me and you're tired of hearing how powerful git is when in your daily life it's a powerful pain in your ass, lazygit might be for you.\n\n## Table of contents\n\n- [Sponsors](#sponsors)\n- [Elevator Pitch](#elevator-pitch)\n- [Table of contents](#table-of-contents)\n- [Features](#features)\n  - [Stage individual lines](#stage-individual-lines)\n  - [Interactive Rebase](#interactive-rebase)\n  - [Cherry-pick](#cherry-pick)\n  - [Bisect](#bisect)\n  - [Nuke the working tree](#nuke-the-working-tree)\n  - [Amend an old commit](#amend-an-old-commit)\n  - [Filter](#filter)\n  - [Invoke a custom command](#invoke-a-custom-command)\n  - [Worktrees](#worktrees)\n  - [Rebase magic (custom patches)](#rebase-magic-custom-patches)\n  - [Rebase from marked base commit](#rebase-from-marked-base-commit)\n  - [Undo](#undo)\n  - [Commit graph](#commit-graph)\n  - [Compare two commits](#compare-two-commits)\n- [Tutorials](#tutorials)\n- [Installation](#installation)\n  - [Binary Releases](#binary-releases)\n  - [Homebrew](#homebrew)\n  - [MacPorts](#macports)\n  - [Void Linux](#void-linux)\n  - [Scoop (Windows)](#scoop-windows)\n  - [Arch Linux](#arch-linux)\n  - [Fedora and RHEL](#fedora-and-rhel)\n  - [Solus Linux](#solus-linux)\n  - [Ubuntu](#ubuntu)\n  - [Funtoo Linux](#funtoo-linux)\n  - [Gentoo Linux](#gentoo-linux)\n  - [FreeBSD](#freebsd)\n  - [Termux](#termux)\n  - [Conda](#conda)\n  - [Go](#go)\n  - [Chocolatey (Windows)](#chocolatey-windows)\n  - [Winget (Windows 10 1709 or later)](#winget-windows-10-1709-or-later)\n  - [Manual](#manual)\n- [Usage](#usage)\n  - [Keybindings](#keybindings)\n  - [Changing Directory On Exit](#changing-directory-on-exit)\n  - [Undo/Redo](#undoredo)\n- [Configuration](#configuration)\n  - [Custom Pagers](#custom-pagers)\n  - [Custom Commands](#custom-commands)\n  - [Git flow support](#git-flow-support)\n- [Contributing](#contributing)\n  - [Debugging Locally](#debugging-locally)\n- [Donate](#donate)\n- [FAQ](#faq)\n  - [What do the commit colors represent?](#what-do-the-commit-colors-represent)\n- [Shameless Plug](#shameless-plug)\n- [Alternatives](#alternatives)\n\nLazygit is not my fulltime job but it is a hefty part time job so if you want to support the project please consider [sponsoring me](https://github.com/sponsors/jesseduffield)\n\n## Features\n\n### Stage individual lines\n\nPress space on the selected line to stage it, or press `v` to start selecting a range of lines. You can also press `a` to select the entirety of the current hunk.\n\n![stage_lines](../assets/demo/stage_lines-compressed.gif)\n\n### Interactive Rebase\n\nPress `i` to start an interactive rebase. Then squash (`s`), fixup (`f`), drop (`d`), edit (`e`), move up (`ctrl+i`) or move down (`ctrl+j`) any of TODO commits, before continuing the rebase by bringing up the rebase options menu with `m` and then selecting `continue`.\n\nYou can also perform any these actions as a once-off (e.g. pressing `s` on a commit to squash it) without explicitly starting a rebase.\n\nThis demo also uses shift+down to select a range of commits to move and fixup.\n\n![interactive_rebase](../assets/demo/interactive_rebase-compressed.gif)\n\n### Cherry-pick\n\nPress `shift+c` on a commit to copy it and press `shift+v` to paste (cherry-pick) it.\n\n![cherry_pick](../assets/demo/cherry_pick-compressed.gif)\n\n### Bisect\n\nPress `b` in the commits view to mark a commit as good/bad in order to begin a git bisect.\n\n![bisect](../assets/demo/bisect-compressed.gif)\n\n### Nuke the working tree\n\nFor when you really want to just get rid of anything that shows up when you run `git status` (and yes that includes dirty submodules) [kidpix style](https://www.youtube.com/watch?v=Ur7_A4JusMU), press `shift+d` to bring up the reset options menu and then select the 'nuke' option.\n\n![Nuke working tree](../assets/demo/nuke_working_tree-compressed.gif)\n\n### Amend an old commit\n\nPressing `shift+a` on any commit will amend that commit with the currently staged changes (running an interactive rebase in the background).\n\n![amend_old_commit](../assets/demo/amend_old_commit-compressed.gif)\n\n### Filter\n\nYou can filter a view with `/`. Here we filter down our branches view and then hit `enter` to view its commits.\n\n![filter](../assets/demo/filter-compressed.gif)\n\n### Invoke a custom command\n\nLazygit has a very flexible [custom command system](docs/Custom_Command_Keybindings.md). In this example a custom command is defined which emulates the built-in branch checkout action.\n\n![custom_command](../assets/demo/custom_command-compressed.gif)\n\n### Worktrees\n\nYou can create worktrees to have multiple branches going at once without the need for stashing or creating WIP commits when switching between them. Press `w` in the branches view to create a worktree from the selected branch and switch to it.\n\n![worktree_create_from_branches](../assets/demo/worktree_create_from_branches-compressed.gif)\n\n### Rebase magic (custom patches)\n\nYou can build a custom patch from an old commit and then remove the patch from the commit, split out a new commit, apply the patch in reverse to the index, and more.\n\nIn this example we have a redundant comment that we want to remove from an old commit. We hit `<enter>` on the commit to view its files, then `<enter>` on a file to focus the patch, then `<space>` to add the comment line to our custom patch, and then `ctrl+p` to view the custom patch options; selecting to remove the patch from the current commit.\n\nLearn more in the [Rebase magic Youtube tutorial](https://youtu.be/4XaToVut_hs).\n\n![custom_patch](../assets/demo/custom_patch-compressed.gif)\n\n### Rebase from marked base commit\n\nSay you're on a feature branch that was itself branched off of the develop branch, and you've decided you'd rather be branching off the master branch. You need a way to rebase only the commits from your feature branch. In this demo we check to see which was the last commit on the develop branch, then press `shift+b` to mark that commit as our base commit, then press `r` on the master branch to rebase onto it, only bringing across the commits from our feature branch. Then we push our changes with `shift+p`.\n\n![rebase_onto](../assets/demo/rebase_onto-compressed.gif)\n\n### Undo\n\nYou can undo the last action by pressing 'z' and redo with `ctrl+z`. Here we drop a couple of commits and then undo the actions.\nUndo uses the reflog which is specific to commits and branches so we can't undo changes to the working tree or stash.\n\n[More info](/docs/Undoing.md)\n\n![undo](../assets/demo/undo-compressed.gif)\n\n### Commit graph\n\nWhen viewing the commit graph in an enlarged window (use `+` and `_` to cycle screen modes), the commit graph is shown. Colours correspond to the commit authors, and as you navigate down the graph, the parent commits of the selected commit are highlighted.\n\n![commit_graph](../assets/demo/commit_graph-compressed.gif)\n\n### Compare two commits\n\nIf you press `shift+w` on a commit (or branch/ref) a menu will open that allows you to mark that commit so that any other commit you select will be diffed against it. Once you've selected the second commit, you'll see the diff in the main view and if you press `<enter>` you'll see the files of the diff. You can press `shift+w` to view the diff menu again to see options like reversing the diff direction or exiting diff mode. You can also exit diff mode by pressing `<escape>`.\n\n![diff_commits](../assets/demo/diff_commits-compressed.gif)\n\n## Tutorials\n\n[<img src=\"https://i.imgur.com/sVEktDn.png\">](https://youtu.be/CPLdltN7wgE)\n\n- [15 Lazygit Features in 15 Minutes](https://youtu.be/CPLdltN7wgE)\n- [Basics Tutorial](https://youtu.be/VDXvbHZYeKY)\n- [Rebase Magic Tutorial](https://youtu.be/4XaToVut_hs)\n\n## Installation\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/lazygit.svg?columns=3)](https://repology.org/project/lazygit/versions)\n\n_Most of the above packages are maintained by third parties so be sure to vet them yourself and confirm that the maintainer is a trustworthy looking person who attends local sports games and gives back to their communities with barbeque fundraisers etc_\n\n### Binary Releases\n\nFor Windows, Mac OS(10.12+) or Linux, you can download a binary release [here](../../releases).\n\n### Homebrew\n\nNormally the lazygit formula can be found in the Homebrew core but we suggest you tap our formula to get the frequently updated one. It works with Linux, too.\n\nTap:\n\n```\nbrew install jesseduffield/lazygit/lazygit\n```\n\nCore:\n\n```\nbrew install lazygit\n```\n\n### MacPorts\n\nLatest version built from github releases.\nTap:\n\n```\nsudo port install lazygit\n```\n\n### Void Linux\n\nPackages for Void Linux are available in the distro repo\n\nThey follow upstream latest releases\n\n```sh\nsudo xbps-install -S lazygit\n```\n\n### Scoop (Windows)\n\nYou can install `lazygit` using [scoop](https://scoop.sh/). It's in the `extras` bucket:\n\n```sh\n# Add the extras bucket\nscoop bucket add extras\n\n# Install lazygit\nscoop install lazygit\n```\n\n### Arch Linux\n\nPackages for Arch Linux are available via pacman and AUR (Arch User Repository).\n\nThere are two packages. The stable one which is built with the latest release\nand the git version which builds from the most recent commit.\n\n- Stable: `sudo pacman -S lazygit`\n- Development: <https://aur.archlinux.org/packages/lazygit-git/>\n\nInstruction of how to install AUR content can be found here:\n<https://wiki.archlinux.org/index.php/Arch_User_Repository>\n\n### Fedora and RHEL\n\nPackages for Fedora/RHEL and CentOS Stream are available via [Copr](https://copr.fedorainfracloud.org/coprs/atim/lazygit/) (Cool Other Package Repo).\n\n```sh\nsudo dnf copr enable atim/lazygit -y\nsudo dnf install lazygit\n```\n\n### Solus Linux\n\n```sh\nsudo eopkg install lazygit\n```\n\n### Ubuntu\n\n```sh\nLAZYGIT_VERSION=$(curl -s \"https://api.github.com/repos/jesseduffield/lazygit/releases/latest\" | \\grep -Po '\"tag_name\": *\"v\\K[^\"]*')\ncurl -Lo lazygit.tar.gz \"https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz\"\ntar xf lazygit.tar.gz lazygit\nsudo install lazygit -D -t /usr/local/bin/\n```\n\nVerify the correct installation of lazygit:\n\n```sh\nlazygit --version\n```\n\n### Funtoo Linux\n\nFuntoo Linux has an autogenerated lazygit package in [dev-kit](https://github.com/funtoo/dev-kit/tree/1.4-release/dev-vcs/lazygit):\n\n```sh\nsudo emerge dev-vcs/lazygit\n```\n\n### Gentoo Linux\n\nLazygit is not (yet) in main Gentoo portage, however an ebuild is available in [GURU overlay](https://github.com/gentoo-mirror/guru/tree/master/dev-vcs/lazygit)\n\nYou can either add the overlay to your system and install lazygit as usual:\n\n```sh\nsudo eselect repository enable guru\nsudo emaint sync -r guru\nsudo emerge dev-vcs/lazygit\n```\n\n### openSUSE\n\nThe lazygit package is currently built in [devel:languages:go/lazygit](https://build.opensuse.org/package/show/devel:languages:go/lazygit).\n\nTo install lazygit on openSUSE Tumbleweed run:\n\n```sh\nsudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/openSUSE_Factory/devel:languages:go.repo\nsudo zypper ref && sudo zypper in lazygit\n```\n\nTo install lazygit on openSUSE Leap run:\n\n```sh\nsource /etc/os-release\nsudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/$VERSION_ID/devel:languages:go.repo\nsudo zypper ref && sudo zypper in lazygit\n```\n\n### NixOs\n\nOn NixOs lazygit is packaged with nix and distributed via nixpkgs.\nYou can try the lazygit without installing it with:\n\n```sh\nnix-shell -p lazygit\n# or with flakes enabled\nnix run nixpkgs#lazygit\n```\n\nOr you can add lazygit to you `configuration.nix` using the `environment.systemPackages` option.\nMore details can be found via NixOs search [page](https://search.nixos.org/).\n\n### Flox\n\nLazygit can be installed into a Flox environment as follows.\n\n```sh\nflox install lazygit\n```\n\nMore details about Flox can be found on [their website](https://flox.dev/).\n\n### FreeBSD\n\n```sh\npkg install lazygit\n```\n\n### Termux\n\n```sh\napt install lazygit\n```\n\n### Conda\n\nReleased versions are available for different platforms, see <https://anaconda.org/conda-forge/lazygit>\n\n```sh\nconda install -c conda-forge lazygit\n```\n\n### Go\n\n```sh\ngo install github.com/jesseduffield/lazygit@latest\n```\n\nPlease note:\nIf you get an error claiming that lazygit cannot be found or is not defined, you\nmay need to add `~/go/bin` to your $PATH (MacOS/Linux), or `%HOME%\\go\\bin`\n(Windows). Not to be mistaken for `C:\\Go\\bin` (which is for Go's own binaries,\nnot apps like lazygit).\n\n### Chocolatey (Windows)\n\nYou can install `lazygit` using [Chocolatey](https://chocolatey.org/):\n\n```sh\nchoco install lazygit\n```\n\n### Winget (Windows 10 1709 or later)\n\nYou can install `lazygit` using the `winget` command in the Windows Terminal with the following command:\n\n```powershell\nwinget install -e --id=JesseDuffield.lazygit\n```\n\n### Manual\n\nYou'll need to [install Go](https://golang.org/doc/install)\n\n```\ngit clone https://github.com/jesseduffield/lazygit.git\ncd lazygit\ngo install\n```\n\nYou can also use `go run main.go` to compile and run in one go (pun definitely intended)\n\n## Usage\n\nCall `lazygit` in your terminal inside a git repository.\n\n```sh\n$ lazygit\n```\n\nIf you want, you can\nalso add an alias for this with `echo \"alias lg='lazygit'\" >> ~/.zshrc` (or\nwhichever rc file you're using).\n\n### Keybindings\n\nYou can check out the list of keybindings [here](/docs/keybindings).\n\n### Changing Directory On Exit\n\nIf you change repos in lazygit and want your shell to change directory into that repo on exiting lazygit, add this to your `~/.zshrc` (or other rc file):\n\n```\nlg()\n{\n    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir\n\n    lazygit \"$@\"\n\n    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then\n            cd \"$(cat $LAZYGIT_NEW_DIR_FILE)\"\n            rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null\n    fi\n}\n```\n\nThen `source ~/.zshrc` and from now on when you call `lg` and exit you'll switch directories to whatever you were in inside lazygit. To override this behaviour you can exit using `shift+Q` rather than just `q`.\n\n### Undo/Redo\n\nSee the [docs](/docs/Undoing.md)\n\n## Configuration\n\nCheck out the [configuration docs](docs/Config.md).\n\n### Custom Pagers\n\nSee the [docs](docs/Custom_Pagers.md)\n\n### Custom Commands\n\nIf lazygit is missing a feature, there's a good chance you can implement it yourself with a custom command!\n\nSee the [docs](docs/Custom_Command_Keybindings.md)\n\n### Git flow support\n\nLazygit supports [Gitflow](https://github.com/nvie/gitflow) if you have it installed. To understand how the Gitflow model works check out Vincent Driessen's original [post](https://nvie.com/posts/a-successful-git-branching-model/) explaining it. To view Gitflow options from within Lazygit, press `i` from within the branches view.\n\n## Contributing\n\nWe love your input! Please check out the [contributing guide](CONTRIBUTING.md).\nFor contributor discussion about things not better discussed here in the repo, join the [discord channel](https://discord.gg/ehwFt2t4wt)\n\n<a href=\"https://discord.gg/ehwFt2t4wt\"><img src='../assets/discord.png' width='75'></a>\n\nCheck out this [video](https://www.youtube.com/watch?v=kNavnhzZHtk) walking through the creation of a small feature in lazygit if you want an idea of where to get started.\n\n### Debugging Locally\n\nRun `lazygit --debug` in one terminal tab and `lazygit --logs` in another to view the program and its log output side by side\n\n## Donate\n\nIf you would like to support the development of lazygit, consider [sponsoring me](https://github.com/sponsors/jesseduffield) (github is matching all donations dollar-for-dollar for 12 months)\n\n## FAQ\n\n### What do the commit colors represent?\n\n- Green: the commit is included in the master branch\n- Yellow: the commit is not included in the master branch\n- Red: the commit has not been pushed to the upstream branch\n\n## Shameless Plug\n\nIf you want to see what I (Jesse) am up to in terms of development, follow me on\n[twitter](https://twitter.com/DuffieldJesse) or check out my [blog](https://jesseduffield.com/)\n\n## Alternatives\n\nIf you find that lazygit doesn't quite satisfy your requirements, these may be a better fit:\n\n- [GitUI](https://github.com/Extrawurst/gitui)\n- [tig](https://github.com/jonas/tig)\n"
}