{
    "primary_language": "C",
    "language_guidelines": "Programming Language guidelines for C:\n# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build-project.yaml\nContent:\nname: Build Project\non:\n  workflow_call:\njobs:\n  check-event:\n    name: Event Data \ud83d\udd0e\n    runs-on: ubuntu-24.04\n    defaults:\n      run:\n        shell: bash\n    outputs:\n      package: ${{ steps.setup.outputs.package }}\n      codesign: ${{ steps.setup.outputs.codesign }}\n      notarize: ${{ steps.setup.outputs.notarize }}\n      config: ${{ steps.setup.outputs.config }}\n      commitHash: ${{ steps.setup.outputs.commitHash }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Check Event Data \u2611\ufe0f\n        id: setup\n        env:\n          GH_TOKEN: ${{ github.token }}\n        run: |\n          : Check Event Data \u2611\ufe0f\n          if [[ \"${RUNNER_DEBUG}\" ]]; then set -x; fi\n\n          case \"${GITHUB_EVENT_NAME}\" in\n            pull_request)\n              config_data=('codesign:false' 'notarize:false' 'package:false' 'config:RelWithDebInfo')\n              if gh pr view ${{ github.event.number }} --json labels \\\n                | jq -e -r '.labels[] | select(.name == \"Seeking Testers\")' > /dev/null; then\n                config_data[0]='codesign:true'\n                config_data[2]='package:true'\n              fi\n              ;;\n            push)\n              config_data=('codesign:true' 'notarize:false' 'package:true' 'config:RelWithDebInfo')\n              if [[ ${GITHUB_REF_NAME} =~ [0-9]+.[0-9]+.[0-9]+(-(rc|beta).+)? ]]; then\n                config_data[1]='notarize:true'\n                config_data[3]='config:Release'\n              fi\n              ;;\n            workflow_dispatch)\n              config_data=('codesign:true' 'notarize:false' 'package:false' 'config:RelWithDebInfo')\n              ;;\n            schedule)\n              config_data=('codesign:true' 'notarize:false' 'package:true' 'config:RelWithDebInfo')\n              ;;\n            *) ;;\n          esac\n\n          for config in \"${config_data[@]}\"; do\n            IFS=':' read -r key value <<< \"${config}\"\n            echo \"${key}=${value}\" >> $GITHUB_OUTPUT\n          done\n          echo \"commitHash=${GITHUB_SHA:0:9}\" >> $GITHUB_OUTPUT\n\n  macos-build:\n    name: macOS \ud83c\udf4f\n    runs-on: macos-15\n    needs: check-event\n    strategy:\n      fail-fast: false\n      matrix:\n        target: [arm64, x86_64]\n    defaults:\n      run:\n        shell: zsh --no-rcs --errexit --pipefail {0}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n          fetch-depth: 0\n\n      - name: Set Up Environment \ud83d\udd27\n        id: setup\n        run: |\n          : Set Up Environment \ud83d\udd27\n          if (( ${+RUNNER_DEBUG} )) setopt XTRACE\n\n          print '::group::Enable Xcode 16.1'\n          sudo xcode-select --switch /Applications/Xcode_16.1.0.app/Contents/Developer\n          print '::endgroup::'\n\n          print '::group::Clean Homebrew Environment'\n          local -a unwanted_formulas=()\n          local -a remove_formulas=()\n          for formula (${unwanted_formulas}) {\n            if [[ -d ${HOMEBREW_PREFIX}/Cellar/${formula} ]] remove_formulas+=(${formula})\n          }\n\n          if (( #remove_formulas )) brew uninstall --ignore-dependencies ${remove_formulas}\n          print '::endgroup::'\n\n          local -A arch_names=(x86_64 intel arm64 apple)\n          print \"cpuName=${arch_names[${{ matrix.target }}]}\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache/restore@v4\n        id: ccache-cache\n        with:\n          path: ${{ github.workspace }}/.ccache\n          key: ${{ runner.os }}-ccache-${{ matrix.target }}-${{ needs.check-event.outputs.config }}\n          restore-keys: |\n            ${{ runner.os }}-ccache-${{ matrix.target }}-\n\n      - name: Set Up Code Signing \ud83d\udd11\n        uses: ./.github/actions/setup-macos-codesigning\n        if: fromJSON(needs.check-event.outputs.codesign)\n        id: codesign\n        with:\n          codesignIdentity: ${{ secrets.MACOS_SIGNING_IDENTITY }}\n          codesignCertificate: ${{ secrets.MACOS_SIGNING_CERT }}\n          certificatePassword: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}\n          keychainPassword: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}\n          provisioningProfile: ${{ secrets.MACOS_SIGNING_PROVISIONING_PROFILE }}\n          notarizationUser: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}\n          notarizationPassword: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}\n\n      - name: Build OBS Studio \ud83e\uddf1\n        uses: ./.github/actions/build-obs\n        env:\n          TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}\n          TWITCH_HASH: ${{ secrets.TWITCH_HASH }}\n          RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}\n          RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}\n          YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}\n          YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}\n          YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}\n          YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}\n        with:\n          target: ${{ matrix.target }}\n          config: ${{ needs.check-event.outputs.config }}\n          codesign: ${{ fromJSON(needs.check-event.outputs.codesign) }}\n          codesignIdent: ${{ steps.codesign.outputs.codesignIdent }}\n          codesignTeam: ${{ steps.codesign.outputs.codesignTeam }}\n          provisioningProfileUUID: ${{ steps.codesign.outputs.provisioningProfileUUID }}\n\n      - name: Package OBS Studio \ud83d\udcc0\n        uses: ./.github/actions/package-obs\n        with:\n          target: ${{ matrix.target }}\n          config: ${{ needs.check-event.outputs.config }}\n          package: ${{ fromJSON(needs.check-event.outputs.package) }}\n          codesign: ${{ fromJSON(needs.check-event.outputs.codesign) && fromJSON(steps.codesign.outputs.haveCodesignIdent) }}\n          codesignIdent: ${{ steps.codesign.outputs.codesignIdent }}\n          notarize: ${{ fromJSON(needs.check-event.outputs.notarize) && fromJSON(steps.codesign.outputs.haveNotarizationUser) }}\n          codesignUser: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}\n          codesignPass: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}\n\n      - name: Upload Artifacts \ud83d\udce1\n        uses: actions/upload-artifact@v4\n        with:\n          name: obs-studio-macos-${{ matrix.target }}-${{ needs.check-event.outputs.commitHash }}\n          path: ${{ github.workspace }}/build_macos/obs-studio-*-macos-${{ steps.setup.outputs.cpuName }}.*\n\n      - name: Upload Debug Symbol Artifacts \ud83e\udeb2\n        uses: actions/upload-artifact@v4\n        if: ${{ needs.check-event.outputs.config == 'Release' }}\n        with:\n          name: obs-studio-macos-${{ matrix.target }}-${{ needs.check-event.outputs.commitHash }}-dSYMs\n          path: ${{ github.workspace }}/build_macos/obs-studio-*-macos-${{ steps.setup.outputs.cpuName }}-dSYMs.tar.xz\n\n      - uses: actions/cache/save@v4\n        if: github.event_name != 'pull_request' && steps.ccache-cache.outputs.cache-hit != 'true'\n        with:\n          path: ${{ github.workspace }}/.ccache\n          key: ${{ runner.os }}-ccache-${{ matrix.target }}-${{ needs.check-event.outputs.config }}\n\n  ubuntu-build:\n    name: Ubuntu \ud83d\udc27\n    strategy:\n      matrix:\n        os: [ubuntu-24.04]\n    runs-on: ${{ matrix.os }}\n    needs: check-event\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n          fetch-depth: 0\n\n      - uses: actions/cache/restore@v4\n        id: ccache-cache\n        with:\n          path: ${{ github.workspace }}/.ccache\n          key: ${{ runner.os }}-${{ matrix.os }}-ccache-x86_64-${{ needs.check-event.outputs.config }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.os }}-ccache-x86_64-\n\n      - name: Build OBS Studio \ud83e\uddf1\n        uses: ./.github/actions/build-obs\n        env:\n          TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}\n          TWITCH_HASH: ${{ secrets.TWITCH_HASH }}\n          RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}\n          RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}\n          YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}\n          YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}\n          YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}\n          YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}\n        with:\n          target: x86_64\n          config: ${{ needs.check-event.outputs.config }}\n\n      - name: Package OBS Studio \ud83d\udcc0\n        uses: ./.github/actions/package-obs\n        with:\n          target: x86_64\n          config: ${{ needs.check-event.outputs.config }}\n          package: ${{ fromJSON(needs.check-event.outputs.package) }}\n\n      - name: Upload Source Tarball \ud83d\udddc\ufe0f\n        uses: actions/upload-artifact@v4\n        with:\n          name: obs-studio-${{ matrix.os }}-sources-${{ needs.check-event.outputs.commitHash }}\n          path: ${{ github.workspace }}/build_ubuntu/obs-studio-*-sources.*\n\n      - name: Upload Artifacts \ud83d\udce1\n        uses: actions/upload-artifact@v4\n        with:\n          name: obs-studio-${{ matrix.os }}-x86_64-${{ needs.check-event.outputs.commitHash }}\n          path: ${{ github.workspace }}/build_ubuntu/obs-studio-*-x86_64-ubuntu-gnu.*\n\n      - name: Upload Debug Symbol Artifacts \ud83e\udeb2\n        uses: actions/upload-artifact@v4\n        if: ${{ fromJSON(needs.check-event.outputs.package) }}\n        with:\n          name: obs-studio-${{ matrix.os }}-x86_64-${{ needs.check-event.outputs.commitHash }}-dbgsym\n          path: ${{ github.workspace }}/build_ubuntu/obs-studio-*-x86_64-ubuntu-gnu-dbgsym.ddeb\n\n      - uses: actions/cache/save@v4\n        if: github.event_name != 'pull_request' && steps.ccache-cache.outputs.cache-hit != 'true'\n        with:\n          path: ${{ github.workspace }}/.ccache\n          key: ${{ runner.os }}-${{ matrix.os }}-ccache-x86_64-${{ needs.check-event.outputs.config }}\n\n  flatpak-build:\n    name: Flatpak \ud83d\udce6\n    runs-on: ubuntu-24.04\n    needs: check-event\n    defaults:\n      run:\n        shell: bash\n    env:\n      FLATPAK_BUILD_SHARE_PATH: flatpak_app/files/share\n    container:\n      image: ghcr.io/flathub-infra/flatpak-github-actions:kde-6.8\n      options: --privileged\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n          fetch-depth: 0\n          set-safe-directory: ${{ env.GITHUB_WORKSPACE }}\n\n      - name: Set Up Environment \ud83d\udd27\n        id: setup\n        env:\n          GH_TOKEN: ${{ github.token }}\n        run: |\n          : Set Up Environment \ud83d\udd27\n          if [[ \"${RUNNER_DEBUG}\" ]]; then set -x; fi\n\n          git config --global --add safe.directory \"${GITHUB_WORKSPACE}\"\n\n          cache_key='flatpak-builder-${{ hashFiles('build-aux/**/*.json') }}'\n          cache_ref='master'\n          read -r id key size unit created accessed <<< \\\n            \"$(gh cache list --ref \"refs/heads/${cache_ref}\" --key \"${cache_key}-x86_64\" | head -1)\"\n\n          if [[ \"${key}\" ]]; then\n            echo \"cacheHit=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"cacheHit=false\" >> $GITHUB_OUTPUT\n          fi\n\n          echo \"cacheKey=${cache_key}\" >> $GITHUB_OUTPUT\n\n      - name: Validate Flatpak manifest\n        uses: ./.github/actions/flatpak-builder-lint\n        with:\n          artifact: manifest\n          path: build-aux/com.obsproject.Studio.json\n\n      - name: Build Flatpak Manifest \ud83e\uddfe\n        uses: flatpak/flatpak-github-actions/flatpak-builder@10a3c29f0162516f0f68006be14c92f34bd4fa6c\n        with:\n          build-bundle: ${{ fromJSON(needs.check-event.outputs.package) }}\n          bundle: obs-studio-flatpak-${{ needs.check-event.outputs.commitHash }}.flatpak\n          manifest-path: ${{ github.workspace }}/build-aux/com.obsproject.Studio.json\n          cache: ${{ fromJSON(steps.setup.outputs.cacheHit) || (github.event_name == 'push' && github.ref_name == 'master')}}\n          restore-cache: ${{ fromJSON(steps.setup.outputs.cacheHit) }}\n          cache-key: ${{ steps.setup.outputs.cacheKey }}\n          mirror-screenshots-url: https://dl.flathub.org/media\n\n      - name: Validate AppStream\n        uses: ./.github/actions/flatpak-builder-lint\n        with:\n          artifact: appstream\n          path: ${{ env.FLATPAK_BUILD_SHARE_PATH }}/metainfo/com.obsproject.Studio.metainfo.xml\n\n      - name: Verify Icon and Metadata in app-info\n        working-directory: ${{ env.FLATPAK_BUILD_SHARE_PATH }}\n        run: |\n          : Verify Icon and Metadata in app-info\n          test -f app-info/icons/flatpak/128x128/com.obsproject.Studio.png || { echo \"::error::Missing 128x128 icon in app-info\"; exit 1; }\n          test -f app-info/xmls/com.obsproject.Studio.xml.gz || { echo \"::error::Missing com.obsproject.Studio.xml.gz in app-info\"; exit 1; }\n\n      - name: Validate build directory\n        uses: ./.github/actions/flatpak-builder-lint\n        with:\n          artifact: builddir\n          path: flatpak_app\n\n      - name: Validate repository\n        uses: ./.github/actions/flatpak-builder-lint\n        with:\n          artifact: repo\n          path: repo\n\n  windows-build:\n    name: Windows \ud83e\ude9f\n    strategy:\n      matrix:\n        architecture: [x64, arm64]\n    runs-on: windows-2022\n    needs: check-event\n    defaults:\n      run:\n        shell: pwsh\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n          fetch-depth: 0\n\n      - name: Build OBS Studio \ud83e\uddf1\n        uses: ./.github/actions/build-obs\n        env:\n          TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}\n          TWITCH_HASH: ${{ secrets.TWITCH_HASH }}\n          RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}\n          RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}\n          YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}\n          YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}\n          YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}\n          YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}\n          GPU_PRIORITY_VAL: ${{ secrets.GPU_PRIORITY_VAL }}\n        with:\n          target: ${{ matrix.architecture }}\n          config: ${{ needs.check-event.outputs.config }}\n\n      - name: Package OBS Studio \ud83d\udcc0\n        uses: ./.github/actions/package-obs\n        with:\n          target: ${{ matrix.architecture }}\n          config: ${{ needs.check-event.outputs.config }}\n          package: ${{ fromJSON(needs.check-event.outputs.package) }}\n\n      - name: Upload Artifacts \ud83d\udce1\n        uses: actions/upload-artifact@v4\n        with:\n          name: obs-studio-windows-${{ matrix.architecture }}-${{ needs.check-event.outputs.commitHash }}\n          path: ${{ github.workspace }}/build_${{ matrix.architecture }}/obs-studio-*-windows-${{ matrix.architecture }}.zip\n",
    "readme": "OBS Studio <https://obsproject.com>\n===================================\n\n.. image:: https://github.com/obsproject/obs-studio/actions/workflows/push.yaml/badge.svg?branch=master\n   :alt: OBS Studio Build Status - GitHub Actions\n   :target: https://github.com/obsproject/obs-studio/actions/workflows/push.yaml?query=branch%3Amaster\n\n.. image:: https://badges.crowdin.net/obs-studio/localized.svg\n   :alt: OBS Studio Translation Project Progress\n   :target: https://crowdin.com/project/obs-studio\n\n.. image:: https://img.shields.io/discord/348973006581923840.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2\n   :alt: OBS Studio Discord Server\n   :target: https://obsproject.com/discord\n\nWhat is OBS Studio?\n-------------------\n\nOBS Studio is software designed for capturing, compositing, encoding,\nrecording, and streaming video content, efficiently.\n\nIt's distributed under the GNU General Public License v2 (or any later\nversion) - see the accompanying COPYING file for more details.\n\nQuick Links\n-----------\n\n- Website: https://obsproject.com\n\n- Help/Documentation/Guides: https://github.com/obsproject/obs-studio/wiki\n\n- Forums: https://obsproject.com/forum/\n\n- Build Instructions: https://github.com/obsproject/obs-studio/wiki/Install-Instructions\n\n- Developer/API Documentation: https://obsproject.com/docs\n\n- Donating/backing/sponsoring: https://obsproject.com/contribute\n\n- Bug Tracker: https://github.com/obsproject/obs-studio/issues\n\nContributing\n------------\n\n- If you would like to help fund or sponsor the project, you can do so\n  via `Patreon <https://www.patreon.com/obsproject>`_, `OpenCollective\n  <https://opencollective.com/obsproject>`_, or `PayPal\n  <https://www.paypal.me/obsproject>`_.  See our `contribute page\n  <https://obsproject.com/contribute>`_ for more information.\n\n- If you wish to contribute code to the project, please make sure to\n  read the coding and commit guidelines:\n  https://github.com/obsproject/obs-studio/blob/master/CONTRIBUTING.rst\n\n- Developer/API documentation can be found here:\n  https://obsproject.com/docs\n\n- If you wish to contribute translations, do not submit pull requests.\n  Instead, please use Crowdin.  For more information read this page:\n  https://obsproject.com/wiki/How-To-Contribute-Translations-For-OBS\n\n- Other ways to contribute are by helping people out with support on\n  our forums or in our community chat.  Please limit support to topics\n  you fully understand -- bad advice is worse than no advice.  When it\n  comes to something that you don't fully know or understand, please\n  defer to the official help or official channels.\n\n\nSAST Tools\n----------\n\n`PVS-Studio <https://pvs-studio.com/pvs-studio/?utm_source=website&utm_medium=github&utm_campaign=open_source>`_ - static analyzer for C, C++, C#, and Java code.\n",
    "org": "obsproject",
    "repo": "obs-studio",
    "number": 12432,
    "commit": "e7570391067f82e3511ed1b31a76d758064cc790"
}