{
    "primary_language": "C++",
    "language_guidelines": "# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build_doc.yml\nContent:\nname: Documentation\n\non:\n  issue_comment:\n      types: [created]\n\npermissions:\n  contents: read # to fetch code (actions/checkout)\n\njobs:\n  build:\n\n    permissions:\n      contents: read # to fetch code (actions/checkout)\n      pull-requests: write # to create comment\n\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/github-script@v6\n        id: get_round\n        with:\n         result-encoding: string\n         script: |\n           const asso = context.payload.comment.author_association\n           if(asso == 'OWNER' || asso == 'MEMBER') {\n             const body = context.payload.comment.body\n             if(body.includes(\"build:\")) {\n               const re = /\\/(force-)?build:(\\w+)\\s*/;\n               if(re.test(body)){\n                 const res = re.exec(body)\n                 if(body.includes(\"force-\")) {\n                   return res[2]+\":yes\"\n                 }\n                 else{\n                   return res[2]+\":no\"\n                 }\n               }\n             }\n           }\n           return 'stop'\n      - uses: actions/github-script@v6\n        if: steps.get_round.outputs.result != 'stop'\n        id: get_pr_number\n        with:\n         result-encoding: string\n         script: |\n           //get pullrequest url\n           const pr_number = context.payload.issue.number\n           return pr_number\n\n      - name: Emoji-comment\n        uses: actions/github-script@v6\n        if: steps.get_round.outputs.result != 'stop'\n        with:\n          script: |\n            github.rest.reactions.createForIssueComment({\n              comment_id: ${{ github.event.comment.id }},\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              content: 'rocket'\n            })\n\n      - uses: actions/checkout@v3\n        name: \"checkout branch\"\n        if: steps.get_round.outputs.result != 'stop'\n        with:\n           repository: ${{ github.repository }}\n           ref: refs/pull/${{ steps.get_pr_number.outputs.result }}/merge\n           fetch-depth: 2\n\n      - name: install dependencies\n        if: steps.get_round.outputs.result != 'stop'\n        run: |\n          set -x\n          sudo apt-get update && sudo apt-get install -y graphviz ssh bibtex2html\n          sudo pip install lxml\n          sudo pip install pyquery\n          wget --no-verbose -O doxygen_exe https://cgal.geometryfactory.com/~cgaltest/doxygen_1_9_6_patched/doxygen\n          sudo mv doxygen_exe /usr/bin/doxygen\n          sudo chmod +x /usr/bin/doxygen\n          git config --global user.email \"cgal@geometryfactory.com\"\n          git config --global user.name \"cgaltest\"\n\n      - name: configure all\n        if: steps.get_round.outputs.result != 'stop'\n        run: |\n          set -ex\n          mkdir -p build_doc && cd build_doc && cmake ../Documentation/doc\n\n      - name: Build and Upload Doc\n        id: build_and_run\n        if: steps.get_round.outputs.result != 'stop'\n        run: |\n          set -ex\n          PR_NUMBER=${{ steps.get_pr_number.outputs.result }}\n          TMP_ROUND=${{ steps.get_round.outputs.result }}\n          ROUND=$(echo $TMP_ROUND | cut -d \":\" -f 1)\n          force=$(echo $TMP_ROUND | cut -d \":\" -f 2)\n          wget --no-verbose cgal.github.io -O tmp.html\n          if ! egrep -q \"\\/$PR_NUMBER\\/$ROUND\" tmp.html || [ \"$force\" = \"yes\" ]; then\n            #list impacted packages\n            LIST_OF_PKGS=$(git diff --name-only HEAD^1 HEAD |cut -s -d/ -f1 |sort -u | xargs -I {} echo {} && ls -d {}/package_info 2>/dev/null  |cut -d/ -f1 |egrep -v Installation||true)\n            if [ \"$LIST_OF_PKGS\" = \"\" ]; then\n              echo \"DoxygenError=No package affected.\" >> $GITHUB_OUTPUT\n              exit 1\n            fi\n            cd build_doc && make -j2 doc\n            make -j2 doc_with_postprocessing 2>tmp.log\n            if [ -s tmp.log ]; then\n              content=`cat ./tmp.log`\n              delimiter=\"$(openssl rand -hex 8)\"\n              echo \"DoxygenError<<${delimiter}\" >> \"${GITHUB_OUTPUT}\"\n              cat tmp.log >> \"${GITHUB_OUTPUT}\"\n              echo \"${delimiter}\" >> \"${GITHUB_OUTPUT}\"\n              exit 1\n            fi\n            cd ..\n            git clone https://CGAL:${{ secrets.PUSH_TO_CGAL_GITHUB_IO_TOKEN }}@github.com/CGAL/cgal.github.io.git\n            mkdir -p cgal.github.io/${PR_NUMBER}/$ROUND\n            rm cgal.github.io/${PR_NUMBER}/$ROUND/* -rf\n            for f in $LIST_OF_PKGS\n            do\n              if [ -d ./build_doc/doc_output/$f ]; then\n                cp -r ./build_doc/doc_output/$f ./cgal.github.io/${PR_NUMBER}/$ROUND\n              fi\n            done\n            cp -r ./build_doc/doc_output/Manual ./cgal.github.io/${PR_NUMBER}/$ROUND\n            cd ./cgal.github.io\n            egrep -v \" ${PR_NUMBER}\\.\" index.html > tmp.html || true\n            echo \"<li><a href=https://cgal.github.io/${PR_NUMBER}/$ROUND/Manual/index.html>Manual for PR ${PR_NUMBER} ($ROUND).</a></li>\" >> ./tmp.html\n            mv tmp.html index.html\n            git add ${PR_NUMBER}/$ROUND index.html && git commit -q --amend -m \"base commit\" && git push -q -f -u origin master\n          else\n            echo \"DoxygenError=This round already exists. Overwrite it with /force-build.\" >> $GITHUB_OUTPUT\n            exit 1\n          fi\n\n      - name: Post address\n        uses: actions/github-script@v6\n        if: ${{ success() && steps.get_round.outputs.result != 'stop' }}\n        with:\n          script: |\n            const tmp_round = \"${{ steps.get_round.outputs.result }}\";\n            const id = tmp_round.indexOf(\":\");\n            const round = tmp_round.substring(0,id);\n            const address = \"The documentation is built. It will be available, after a few minutes, here: https://cgal.github.io/${{ steps.get_pr_number.outputs.result }}/\"+round+\"/Manual/index.html\"\n            github.rest.issues.createComment({\n              owner: \"CGAL\",\n              repo: \"cgal\",\n              issue_number: ${{ github.event.issue.number }},\n              body: address\n            });\n\n      - name: Post error\n        env:\n          ERRORMSG: ${{steps.build_and_run.outputs.DoxygenError}}\n        uses: actions/github-script@v6\n        if: ${{ failure() && steps.get_round.outputs.result != 'stop' }}\n        with:\n          script: |\n            const error = process.env.ERRORMSG\n            const job_url = `${context.serverUrl}/CGAL/cgal/actions/runs/${context.runId}`\n            const msg = \"There was an error while building the doc: \\n```\\n\"+error + \"\\n```\\n\" + job_url\n            github.rest.issues.createComment({\n              owner: \"CGAL\",\n              repo: \"cgal\",\n              issue_number: ${{ github.event.issue.number }},\n              body: msg\n            });\n",
    "readme": "![CGAL](Installation/doc_html/images/cgal_2013_grey.png)\n\nThe Computational Geometry Algorithms Library (CGAL) is a C++ library that\naims to provide easy access to efficient and reliable algorithms in\ncomputational geometry.\n\nCGAL Releases\n=============\nThe primary vector of distribution of CGAL are source tarballs, released\ntwice a year, announced on [the web site of CGAL](https://www.cgal.org/).\n\nGetting Started with CGAL\n=========================\n\n**Since version 5.0, CGAL is a header-only library, meaning that\nit is no longer needed to build CGAL libraries before it can be used.**\n\nHead over to the [CGAL manual](https://doc.cgal.org/latest/Manual/general_intro.html)\nfor usage guides and tutorials that will get you started smoothly.\n\nLicense\n=======\nSee the file [LICENSE.md](LICENSE.md).\n\nCGAL Git Repository Layout\n==========================\n\nThe Git repository of CGAL has a different layout from release tarballs. It\ncontains a `CMakeLists.txt` file that serves as anchor for configuring and building programs,\nand a set of subfolders, so called *packages*. Most packages\nimplement a data structure or an algorithm for CGAL (e.g., `Convex_hull_2`,\nor `Triangulation_3`); however some packages serve special needs:\n\n* `Installation` - meta-files and CMake-support\n* `Maintenance` - infrastructural support\n* `Core`, `CGALimageIO`, `Qt_widget`, `GraphicsView` - component libraries\n* `Scripts` - scripts to simplify developer's and user's work\n* `Testsuite` - infrastructure for testsuite\n* `Documentation` - infrastructure for CGAL's manual\n* `STL_Extension` - extensions to the standard template library\n\nMore Information\n================\n* [The CGAL web site](https://www.cgal.org/)\n* [Latest CGAL release documentation pages](https://doc.cgal.org/)\n* [Latest CGAL master documentation pages, updated once a week](https://cgal.geometryfactory.com/CGAL/doc/master/)\n* [CGAL daily testsuite results](https://cgal.geometryfactory.com/CGAL/testsuite/)\n* [Guidelines for CGAL developers](https://github.com/CGAL/cgal/wiki/Guidelines) and [Information for new developers](https://github.com/CGAL/cgal/wiki/Information-for-New-Developers)\n"
}