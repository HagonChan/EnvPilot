{
    "primary_language": "Java",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Java Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for any dependencies listed in the README or in configuration files like `pom.xml` (for Maven) or `build.gradle` (for Gradle). Ensure you have the required JDK version installed.  \n\n3. **Build Tool**  \n   Identify which build tool the project is using: Maven or Gradle. This information should be available in the README or through project configuration files (`pom.xml` for Maven, `build.gradle` for Gradle).  \n\n4. **Build the Project**  \n   Use the appropriate commands based on the build tool:  \n   - For Maven:  \n     ```  \n     mvn clean install  \n     ```  \n   - For Gradle:  \n     ```  \n     gradle build  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., property files, YAML files) and set them up accordingly.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly.  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific class, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\nname: Build the repository\n\non: \n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest \n    strategy:\n      matrix:\n        java-version: [ 17 ]\n    steps:\n      - name: Freeing up more disk space\n        run: |\n          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android\n          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET\n      - uses: actions/checkout@v2\n      - name: Set up JDK ${{ matrix.java-version }}\n        uses: actions/setup-java@v2\n        with:\n          java-version: ${{ matrix.java-version }}\n          distribution: temurin\n          cache: maven\n      - name: Set up Yarn cache\n        uses: actions/cache@v2\n        with:\n          key: ${{ runner.os }}-yarn-${{ hashFiles('graylog2-web-interface/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n          path: ~/.cache/yarn\n      - name: License check\n        run: mvn -B --fail-fast license:check\n      - name: Build with Maven\n        run: mvn -B --fail-fast -Pedantic -Dspotbugs.skip -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 verify javadoc:javadoc\n        env:\n          JAVA_OPTS: -Xmx6G\n          TIMEOUT_MULTIPLIER: 2.0\n\n\n",
    "readme": "# Graylog\n\n[![License](https://img.shields.io/badge/license-SSPL-green)](https://www.mongodb.com/licensing/server-side-public-license)\n[![Maven Central](https://img.shields.io/maven-central/v/org.graylog2/graylog2-server.svg)](http://mvnrepository.com/artifact/org.graylog2/graylog2-server)\n[![Build](https://github.com/Graylog2/graylog2-server/actions/workflows/build.yml/badge.svg)](https://github.com/Graylog2/graylog2-server/actions/workflows/build.yml)\n\nWelcome! _Graylog_ is an open source log management platform.\n\nYou can read more about the project on our [website](https://www.graylog.org/) and check out the [documentation](http://docs.graylog.org/) on the documentation site.\n\n\n## Issue Tracking\n\nFound a bug? Have an idea for an improvement? Feel free to [add an issue](../../issues).\n\n\n## Contributing\n\nHelp us build the future of log management and be part of a project that is used by thousands of people out there every day.\n\nFollow the [contributors guide](https://www.graylog.org/community) and read [the contributing instructions](CONTRIBUTING.md) to get started.\n\nDo you want to get paid for developing our open source product? Apply for one of our [jobs](https://www.graylog.org/careers)!\n\n## Staying in Touch\n\nCome chat with us in the [`#graylog` channel on freenode IRC](https://webchat.freenode.net/?channels=%23graylog), the `#graylog` channel on [libera](https://libera.chat/) or create a topic in our [community discussion forums](https://community.graylog.org/).\n\n## License\n\n_Graylog_ is released under version 1 of the [Server Side Public License (SSPL)](LICENSE).\n"
}