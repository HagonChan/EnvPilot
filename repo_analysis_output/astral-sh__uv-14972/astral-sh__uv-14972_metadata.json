{
    "primary_language": "Rust",
    "language_guidelines": "Programming Language guidelines for Rust:\n# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build-binaries.yml\nContent:\n# Build uv on all platforms.\n#\n# Generates both wheels (for PyPI) and archived binaries (for GitHub releases).\n#\n# Assumed to run as a subworkflow of .github/workflows/release.yml; specifically, as a local\n# artifacts job within `cargo-dist`.\nname: \"Build release binaries\"\n\non:\n  workflow_call:\n    inputs:\n      plan:\n        required: true\n        type: string\n  pull_request:\n    paths:\n      # We want to ensure that the maturin builds still work when we change\n      # Project metadata\n      - pyproject.toml\n      - Cargo.toml\n      - .cargo/config.toml\n      - crates/uv-build/Cargo.toml\n      - crates/uv-build/pyproject.toml\n      # Toolchain or dependency versions\n      - Cargo.lock\n      - rust-toolchain.toml\n      # And the workflow itself\n      - .github/workflows/build-binaries.yml\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  PACKAGE_NAME: uv\n  MODULE_NAME: uv\n  PYTHON_VERSION: \"3.11\"\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  CARGO_TERM_COLOR: always\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  sdist:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # uv\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n      - name: \"Build sdist\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          command: sdist\n          args: --out dist\n      - name: \"Test sdist\"\n        run: |\n          # We can't use `--find-links` here, since we need maturin, which means no `--no-index`, and without that option\n          # we run the risk that pip pull uv from PyPI instead.\n          pip install dist/${{ env.PACKAGE_NAME }}-*.tar.gz --force-reinstall\n          ${{ env.MODULE_NAME }} --help\n          python -m ${{ env.MODULE_NAME }} --help\n          uvx --help\n      - name: \"Upload sdist\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-sdist\n          path: dist\n\n      # uv-build\n      - name: \"Build sdist uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          command: sdist\n          args: --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - name: \"Test sdist uv-build\"\n        run: |\n          pip install crates/uv-build/dist/${{ env.PACKAGE_NAME }}_build-*.tar.gz --force-reinstall\n          ${{ env.MODULE_NAME }}-build --help\n          python -m ${{ env.MODULE_NAME }}_build --help\n      - name: \"Upload sdist uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-sdist\n          path: crates/uv-build/dist\n\n  macos-x86_64:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: macos-14\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          architecture: x64\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels - x86_64\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: x86_64\n          args: --release --locked --out dist --features self-update\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-macos-x86_64\n          path: dist\n      - name: \"Archive binary\"\n        run: |\n          TARGET=x86_64-apple-darwin\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-macos-x86_64\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build - x86_64\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: x86_64\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-macos-x86_64\n          path: crates/uv-build/dist\n\n  macos-aarch64:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: macos-14\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          architecture: arm64\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels - aarch64\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: aarch64\n          args: --release --locked --out dist --features self-update\n      - name: \"Test wheel - aarch64\"\n        run: |\n          pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n          ${{ env.MODULE_NAME }} --help\n          python -m ${{ env.MODULE_NAME }} --help\n          uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-aarch64-apple-darwin\n          path: dist\n      - name: \"Archive binary\"\n        run: |\n          TARGET=aarch64-apple-darwin\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-aarch64-apple-darwin\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build - aarch64\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: aarch64\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - name: \"Test wheel - aarch64\"\n        run: |\n          pip install ${{ env.PACKAGE_NAME }}_build --no-index --find-links crates/uv-build/dist --force-reinstall\n          ${{ env.MODULE_NAME }}-build --help\n          python -m ${{ env.MODULE_NAME }}_build --help\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-aarch64-apple-darwin\n          path: crates/uv-build/dist\n\n  windows:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: github-windows-2022-x86_64-8\n    strategy:\n      matrix:\n        platform:\n          - target: x86_64-pc-windows-msvc\n            arch: x64\n          - target: i686-pc-windows-msvc\n            arch: x86\n          - target: aarch64-pc-windows-msvc\n            arch: x64 # not relevant here\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          architecture: ${{ matrix.platform.arch }}\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          args: --release --locked --out dist --features self-update,windows-gui-bin\n      - name: \"Test wheel\"\n        if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}\n        shell: bash\n        run: |\n          pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n          ${{ env.MODULE_NAME }} --help\n          python -m ${{ env.MODULE_NAME }} --help\n          uvx --help\n          uvw --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.platform.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          ARCHIVE_FILE=uv-${{ matrix.platform.target }}.zip\n          7z a $ARCHIVE_FILE ./target/${{ matrix.platform.target }}/release/uv.exe\n          7z a $ARCHIVE_FILE ./target/${{ matrix.platform.target }}/release/uvx.exe\n          7z a $ARCHIVE_FILE ./target/${{ matrix.platform.target }}/release/uvw.exe\n          sha256sum $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.platform.target }}\n          path: |\n            *.zip\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - name: \"Test wheel uv-build\"\n        if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}\n        shell: bash\n        run: |\n          pip install ${{ env.PACKAGE_NAME }}_build --no-index --find-links crates/uv-build/dist --force-reinstall\n          ${{ env.MODULE_NAME }}-build --help\n          python -m ${{ env.MODULE_NAME }}_build --help\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.platform.target }}\n          path: crates/uv-build/dist\n\n  linux:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: depot-ubuntu-latest-4\n    strategy:\n      matrix:\n        include:\n          - { target: \"i686-unknown-linux-gnu\", cc: \"gcc -m32\" }\n          - { target: \"x86_64-unknown-linux-gnu\", cc: \"gcc\" }\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          architecture: x64\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.target }}\n          # Generally, we try to build in a target docker container. In this case however, a\n          # 32-bit compiler runs out of memory (4GB memory limit for 32-bit), so we cross compile\n          # from 64-bit version of the container, breaking the pattern from other builds.\n          container: quay.io/pypa/manylinux2014\n          manylinux: auto\n          args: --release --locked --out dist --features self-update\n          # See: https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145\n          before-script-linux: |\n            # Install the 32-bit cross target on 64-bit (noop if we're already on 64-bit)\n            rustup target add ${{ matrix.target }}\n            # If we're running on rhel centos, install needed packages.\n            if command -v yum &> /dev/null; then\n                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic\n\n                # If we're running on i686 we need to symlink libatomic\n                # in order to build openssl with -latomic flag.\n                if [[ ! -d \"/usr/lib64\" ]]; then\n                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so\n                else\n                    # Support cross-compiling from 64-bit to 32-bit\n                    yum install -y glibc-devel.i686 libstdc++-devel.i686\n                fi\n            else\n                # If we're running on debian-based system.\n                apt update -y && apt-get install -y libssl-dev openssl pkg-config\n            fi\n        env:\n          CC: ${{ matrix.cc }}\n      - name: \"Test wheel\"\n        if: ${{ startsWith(matrix.target, 'x86_64') }}\n        run: |\n          pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n          ${{ env.MODULE_NAME }} --help\n          python -m ${{ env.MODULE_NAME }} --help\n          uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          TARGET=${{ matrix.target }}\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.target }}\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.target }}\n          manylinux: auto\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - name: \"Test wheel uv-build\"\n        if: ${{ startsWith(matrix.target, 'x86_64') }}\n        run: |\n          pip install ${{ env.PACKAGE_NAME }}_build --no-index --find-links crates/uv-build/dist --force-reinstall\n          ${{ env.MODULE_NAME }}-build --help\n          python -m ${{ env.MODULE_NAME }}_build --help\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.target }}\n          path: crates/uv-build/dist\n\n  linux-arm:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    strategy:\n      matrix:\n        platform:\n          - target: aarch64-unknown-linux-gnu\n            arch: aarch64\n            # see https://github.com/astral-sh/ruff/issues/3791\n            # and https://github.com/gnzlbg/jemallocator/issues/170#issuecomment-1503228963\n            maturin_docker_options: -e JEMALLOC_SYS_WITH_LG_PAGE=16\n          - target: armv7-unknown-linux-gnueabihf\n            arch: armv7\n          - target: arm-unknown-linux-musleabihf\n            arch: arm\n\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          # On `aarch64`, use `manylinux: 2_28`; otherwise, use `manylinux: auto`.\n          manylinux: ${{ matrix.platform.arch == 'aarch64' && '2_28' || 'auto' }}\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --release --locked --out dist --features self-update\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel\"\n        with:\n          arch: ${{ matrix.platform.arch == 'arm' && 'armv6' || matrix.platform.arch }}\n          distro: ${{ matrix.platform.arch == 'arm' && 'bullseye' || 'ubuntu20.04' }}\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n            ${{ env.MODULE_NAME }} --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }} --help\n            uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.platform.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          TARGET=${{ matrix.platform.target }}\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.platform.target }}\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          # On `aarch64`, use `manylinux: 2_28`; otherwise, use `manylinux: auto`.\n          manylinux: ${{ matrix.platform.arch == 'aarch64' && '2_28' || 'auto' }}\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel uv-build\"\n        with:\n          arch: ${{ matrix.platform.arch == 'arm' && 'armv6' || matrix.platform.arch }}\n          distro: ${{ matrix.platform.arch == 'arm' && 'bullseye' || 'ubuntu20.04' }}\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }}_build --no-index --find-links crates/uv-build/dist --force-reinstall\n            ${{ env.MODULE_NAME }}-build --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }}_build --help\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.platform.target }}\n          path: crates/uv-build/dist\n\n  # Like `linux-arm`.\n  linux-s390x:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    timeout-minutes: 30\n    runs-on: depot-ubuntu-latest-4\n    strategy:\n      matrix:\n        platform:\n          - target: s390x-unknown-linux-gnu\n            arch: s390x\n\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: auto\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --release --locked --out dist --features self-update\n          # Until the llvm updates hit stable\n          # https://github.com/rust-lang/rust/issues/141287\n          rust-toolchain: nightly-2025-05-25\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        if: matrix.platform.arch != 'ppc64'\n        name: \"Test wheel\"\n        with:\n          arch: ${{ matrix.platform.arch }}\n          distro: ubuntu20.04\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n            ${{ env.MODULE_NAME }} --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }} --help\n            uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.platform.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          TARGET=${{ matrix.platform.target }}\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.platform.target }}\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: auto\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        if: matrix.platform.arch != 'ppc64'\n        name: \"Test wheel uv-build\"\n        with:\n          arch: ${{ matrix.platform.arch }}\n          distro: ubuntu20.04\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }}-build --no-index --find-links crates/uv-build/dist --force-reinstall\n            ${{ env.MODULE_NAME }}-build --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }}-build --help\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.platform.target }}\n          path: crates/uv-build/dist\n\n  # Like `linux-arm`, but install the `gcc-powerpc64-linux-gnu` package.\n  linux-powerpc:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        platform:\n          - target: powerpc64le-unknown-linux-gnu\n            arch: ppc64le\n            # see https://github.com/astral-sh/uv/issues/6528\n            maturin_docker_options: -e JEMALLOC_SYS_WITH_LG_PAGE=16\n          - target: powerpc64-unknown-linux-gnu\n            arch: ppc64\n            # see https://github.com/astral-sh/uv/issues/6528\n            maturin_docker_options: -e JEMALLOC_SYS_WITH_LG_PAGE=16\n\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: auto\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --release --locked --out dist --features self-update\n          before-script-linux: |\n            if command -v yum &> /dev/null; then\n                yum update -y\n                yum -y install epel-release\n                yum repolist\n                yum install -y gcc-powerpc64-linux-gnu\n            fi\n      # TODO(charlie): Re-enable testing for PPC wheels.\n      # - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n      #   if: matrix.platform.arch != 'ppc64'\n      #   name: \"Test wheel\"\n      #   with:\n      #     arch: ${{ matrix.platform.arch }}\n      #     distro: ubuntu20.04\n      #     install: |\n      #       apt-get update\n      #       apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n      #       pip3 install -U pip\n      #     run: |\n      #       pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n      #       ${{ env.MODULE_NAME }} --help\n      #       #(konsti) TODO: Enable this test on all platforms,currently `find_uv_bin` is failingto discover uv here.\n      #       # python -m ${{ env.MODULE_NAME }} --helppython -m ${{ env.MODULE_NAME }} --help\n      #       uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.platform.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          TARGET=${{ matrix.platform.target }}\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.platform.target }}\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: auto\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n          before-script-linux: |\n            if command -v yum &> /dev/null; then\n                yum update -y\n                yum -y install epel-release\n                yum repolist\n                yum install -y gcc-powerpc64-linux-gnu\n            fi\n      # TODO(charlie): Re-enable testing for PPC wheels.\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.platform.target }}\n          path: crates/uv-build/dist\n\n  # Like `linux-arm`.\n  linux-riscv64:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    timeout-minutes: 30\n    runs-on: depot-ubuntu-latest-4\n    strategy:\n      matrix:\n        platform:\n          - target: riscv64gc-unknown-linux-gnu\n            arch: riscv64\n\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: auto\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --release --locked --out dist --features self-update\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel\"\n        with:\n          arch: ${{ matrix.platform.arch }}\n          distro: ubuntu20.04\n          githubToken: ${{ github.token }}\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n            ${{ env.MODULE_NAME }} --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }} --help\n            uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.platform.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          TARGET=${{ matrix.platform.target }}\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.platform.target }}\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: auto\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel uv-build\"\n        with:\n          arch: ${{ matrix.platform.arch }}\n          distro: ubuntu20.04\n          githubToken: ${{ github.token }}\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }}-build --no-index --find-links crates/uv-build/dist --force-reinstall\n            ${{ env.MODULE_NAME }}-build --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }}-build --help\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.platform.target }}\n          path: crates/uv-build/dist\n\n  musllinux:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        target:\n          - x86_64-unknown-linux-musl\n          - i686-unknown-linux-musl\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          architecture: x64\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.target }}\n          manylinux: musllinux_1_1\n          args: --release --locked --out dist --features self-update\n      - name: \"Test wheel\"\n        if: matrix.target == 'x86_64-unknown-linux-musl'\n        uses: addnab/docker-run-action@v3\n        with:\n          image: alpine:3.12\n          options: -v ${{ github.workspace }}:/io -w /io\n          run: |\n            apk add python3\n            python3 -m venv .venv\n            .venv/bin/pip install --upgrade pip\n            .venv/bin/pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n            .venv/bin/${{ env.MODULE_NAME }} --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # .venv/bin/python -m ${{ env.MODULE_NAME }} --help\n            .venv/bin/uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          TARGET=${{ matrix.target }}\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/release/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/release/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.target }}\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels uv-build\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.target }}\n          manylinux: musllinux_1_1\n          args: --profile minimal-size --locked --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n      - name: \"Test wheel uv-build\"\n        if: matrix.target == 'x86_64-unknown-linux-musl'\n        uses: addnab/docker-run-action@v3\n        with:\n          image: alpine:3.12\n          options: -v ${{ github.workspace }}:/io -w /io\n          run: |\n            apk add python3\n            python3 -m venv .venv\n            .venv/bin/pip install --upgrade pip\n            .venv/bin/pip install ${{ env.PACKAGE_NAME }}-build --no-index --find-links crates/uv-build/dist --force-reinstall\n            .venv/bin/${{ env.MODULE_NAME }}-build --help\n            .venv/bin/python -m ${{ env.MODULE_NAME }}_build --help\n      - name: \"Upload wheels uv-build\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.target }}\n          path: crates/uv-build/dist\n\n  musllinux-cross:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        platform:\n          - target: aarch64-unknown-linux-musl\n            arch: aarch64\n            maturin_docker_options: -e JEMALLOC_SYS_WITH_LG_PAGE=16\n          - target: armv7-unknown-linux-musleabihf\n            arch: armv7\n      fail-fast: false\n\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: \"Prep README.md\"\n        run: python scripts/transform_readme.py --target pypi\n\n      # uv\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: musllinux_1_1\n          args: --release --locked --out dist --features self-update ${{ matrix.platform.arch == 'aarch64' && '--compatibility 2_17' || ''}}\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          rust-toolchain: ${{ matrix.platform.toolchain || null }}\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel\"\n        with:\n          arch: ${{ matrix.platform.arch }}\n          distro: alpine_latest\n          install: |\n            apk add python3\n          run: |\n            python -m venv .venv\n            .venv/bin/pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n            .venv/bin/${{ env.MODULE_NAME }} --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # .venv/bin/python -m ${{ env.MODULE_NAME }} --help\n            .venv/bin/uvx --help\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel (manylinux)\"\n        if: matrix.platform.arch == 'aarch64'\n        with:\n          arch: aarch64\n          distro: ubuntu20.04\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }} --no-index --find-links dist/ --force-reinstall\n            ${{ env.MODULE_NAME }} --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }} --help\n            uvx --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv-${{ matrix.platform.target }}\n          path: dist\n      - name: \"Archive binary\"\n        shell: bash\n        run: |\n          TARGET=${{ matrix.platform.target }}\n          ARCHIVE_NAME=uv-$TARGET\n          ARCHIVE_FILE=$ARCHIVE_NAME.tar.gz\n          PROFILE=\"${{ matrix.platform.arch == 'ppc64le' && 'release-no-lto' || 'release' }}\"\n\n          mkdir -p $ARCHIVE_NAME\n          cp target/$TARGET/$PROFILE/uv $ARCHIVE_NAME/uv\n          cp target/$TARGET/$PROFILE/uvx $ARCHIVE_NAME/uvx\n          tar czvf $ARCHIVE_FILE $ARCHIVE_NAME\n          shasum -a 256 $ARCHIVE_FILE > $ARCHIVE_FILE.sha256\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: artifacts-${{ matrix.platform.target }}\n          path: |\n            *.tar.gz\n            *.sha256\n\n      # uv-build\n      - name: \"Build wheels\"\n        uses: PyO3/maturin-action@e10f6c464b90acceb5f640d31beda6d586ba7b4a # v1.49.3\n        with:\n          target: ${{ matrix.platform.target }}\n          manylinux: musllinux_1_1\n          args: --profile minimal-size --locked ${{ matrix.platform.arch == 'aarch64' && '--compatibility 2_17' || ''}} --out crates/uv-build/dist -m crates/uv-build/Cargo.toml\n          docker-options: ${{ matrix.platform.maturin_docker_options }}\n          rust-toolchain: ${{ matrix.platform.toolchain || null }}\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel\"\n        with:\n          arch: ${{ matrix.platform.arch }}\n          distro: alpine_latest\n          install: |\n            apk add python3\n          run: |\n            python -m venv .venv\n            .venv/bin/pip install ${{ env.PACKAGE_NAME }}-build --no-index --find-links crates/uv-build/dist --force-reinstall\n            .venv/bin/${{ env.MODULE_NAME }}-build --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # .venv/bin/python -m ${{ env.MODULE_NAME }}_build --help\n      - uses: uraimo/run-on-arch-action@d94c13912ea685de38fccc1109385b83fd79427d # v3.0.1\n        name: \"Test wheel (manylinux)\"\n        if: matrix.platform.arch == 'aarch64'\n        with:\n          arch: aarch64\n          distro: ubuntu20.04\n          install: |\n            apt-get update\n            apt-get install -y --no-install-recommends python3 python3-pip python-is-python3\n            pip3 install -U pip\n          run: |\n            pip install ${{ env.PACKAGE_NAME }}-build --no-index --find-links crates/uv-build/dist --force-reinstall\n            ${{ env.MODULE_NAME }}-build --help\n            # TODO(konsti): Enable this test on all platforms, currently `find_uv_bin` is failing to discover uv here.\n            # python -m ${{ env.MODULE_NAME }}_build --help\n      - name: \"Upload wheels\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: wheels_uv_build-${{ matrix.platform.target }}\n          path: crates/uv-build/dist\n\nfile: build-docker.yml\nContent:\n# Build and publish Docker images.\n#\n# Uses Depot for multi-platform builds. Includes both a `uv` base image, which\n# is just the binary in a scratch image, and a set of extra, common images with\n# the uv binary installed.\n#\n# Images are built on all runs.\n#\n# On release, assumed to run as a subworkflow of .github/workflows/release.yml;\n# specifically, as a local artifacts job within `cargo-dist`. In this case,\n# images are published based on the `plan`.\n#\n# TODO(charlie): Ideally, the publish step would happen as a publish job within\n# `cargo-dist`, but sharing the built image as an artifact between jobs is\n# challenging.\nname: \"Docker images\"\n\non:\n  workflow_call:\n    inputs:\n      plan:\n        required: true\n        type: string\n  pull_request:\n    paths:\n      # We want to ensure that the maturin builds still work when we change\n      # Project metadata\n      - pyproject.toml\n      - Cargo.toml\n      - .cargo/config.toml\n      # Toolchain or dependency versions\n      - Cargo.lock\n      - rust-toolchain.toml\n      # The Dockerfile itself\n      - Dockerfile\n      # And the workflow itself\n      - .github/workflows/build-docker.yml\n\nenv:\n  UV_GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/uv\n  UV_DOCKERHUB_IMAGE: docker.io/astral/uv\n\njobs:\n  docker-plan:\n    name: plan\n    runs-on: ubuntu-latest\n    outputs:\n      login: ${{ steps.plan.outputs.login }}\n      push: ${{ steps.plan.outputs.push }}\n      tag: ${{ steps.plan.outputs.tag }}\n      action: ${{ steps.plan.outputs.action }}\n    steps:\n      - name: Set push variable\n        env:\n          DRY_RUN: ${{ inputs.plan == '' || fromJson(inputs.plan).announcement_tag_is_implicit }}\n          TAG: ${{ inputs.plan != '' && fromJson(inputs.plan).announcement_tag }}\n          IS_LOCAL_PR: ${{ github.event.pull_request.head.repo.full_name == 'astral-sh/uv' }}\n        id: plan\n        run: |\n          if [ \"${{ env.DRY_RUN }}\" == \"false\" ]; then\n            echo \"login=true\" >> \"$GITHUB_OUTPUT\"\n            echo \"push=true\" >> \"$GITHUB_OUTPUT\"\n            echo \"tag=${{ env.TAG }}\" >> \"$GITHUB_OUTPUT\"\n            echo \"action=build and publish\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"login=${{ env.IS_LOCAL_PR }}\" >> \"$GITHUB_OUTPUT\"\n            echo \"push=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"tag=dry-run\" >> \"$GITHUB_OUTPUT\"\n            echo \"action=build\" >> \"$GITHUB_OUTPUT\"\n          fi\n\n  docker-publish-base:\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-build') }}\n    name: ${{ needs.docker-plan.outputs.action }} uv\n    needs:\n      - docker-plan\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write # for Depot OIDC and GHCR signing\n      packages: write # for GHCR image pushes\n      attestations: write # for GHCR attestations\n    environment:\n      name: ${{ needs.docker-plan.outputs.push == 'true' && 'release' || '' }}\n    outputs:\n      image-tags: ${{ steps.meta.outputs.tags }}\n      image-annotations: ${{ steps.meta.outputs.annotations }}\n      image-digest: ${{ steps.build.outputs.digest }}\n      image-version: ${{ steps.meta.outputs.version }}\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          submodules: recursive\n\n      # Login to DockerHub (when not pushing, it's to avoid rate-limiting)\n      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n        if: ${{ needs.docker-plan.outputs.login == 'true' }}\n        with:\n          username: ${{ needs.docker-plan.outputs.push == 'true' && 'astral' || 'astralshbot' }}\n          password: ${{ needs.docker-plan.outputs.push == 'true' && secrets.DOCKERHUB_TOKEN_RW || secrets.DOCKERHUB_TOKEN_RO }}\n\n      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5\n\n      - name: Check tag consistency\n        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n        run: |\n          version=$(grep \"version = \" pyproject.toml | sed -e 's/version = \"\\(.*\\)\"/\\1/g')\n          if [ \"${{ needs.docker-plan.outputs.tag }}\" != \"${version}\" ]; then\n            echo \"The input tag does not match the version from pyproject.toml:\" >&2\n            echo \"${{ needs.docker-plan.outputs.tag }}\" >&2\n            echo \"${version}\" >&2\n            exit 1\n          else\n            echo \"Releasing ${version}\"\n          fi\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0\n        env:\n          DOCKER_METADATA_ANNOTATIONS_LEVELS: index\n        with:\n          images: |\n            ${{ env.UV_GHCR_IMAGE }}\n            ${{ env.UV_DOCKERHUB_IMAGE }}\n          # Defining this makes sure the org.opencontainers.image.version OCI label becomes the actual release version and not the branch name\n          tags: |\n            type=raw,value=dry-run,enable=${{ needs.docker-plan.outputs.push == 'false' }}\n            type=pep440,pattern={{ version }},value=${{ needs.docker-plan.outputs.tag }},enable=${{ needs.docker-plan.outputs.push }}\n            type=pep440,pattern={{ major }}.{{ minor }},value=${{ needs.docker-plan.outputs.tag }},enable=${{ needs.docker-plan.outputs.push }}\n\n      - name: Build and push by digest\n        id: build\n        uses: depot/build-push-action@2583627a84956d07561420dcc1d0eb1f2af3fac0 # v1.15.0\n        with:\n          project: 7hd4vdzmw5 # astral-sh/uv\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: ${{ needs.docker-plan.outputs.push }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          # TODO(zanieb): Annotations are not supported by Depot yet and are ignored\n          annotations: ${{ steps.meta.outputs.annotations }}\n\n      - name: Generate artifact attestation for base image\n        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n        with:\n          subject-name: ${{ env.UV_GHCR_IMAGE }}\n          subject-digest: ${{ steps.build.outputs.digest }}\n\n  docker-publish-extra:\n    name: ${{ needs.docker-plan.outputs.action }} ${{ matrix.image-mapping }}\n    runs-on: ubuntu-latest\n    environment:\n      name: ${{ needs.docker-plan.outputs.push == 'true' && 'release' || '' }}\n    needs:\n      - docker-plan\n      - docker-publish-base\n    permissions:\n      id-token: write # for Depot OIDC and GHCR signing\n      packages: write # for GHCR image pushes\n      attestations: write # for GHCR attestations\n    strategy:\n      fail-fast: false\n      matrix:\n        # Mapping of base image followed by a comma followed by one or more base tags (comma separated)\n        # Note, org.opencontainers.image.version label will use the first base tag (use the most specific tag first)\n        image-mapping:\n          - alpine:3.21,alpine3.21,alpine\n          - debian:bookworm-slim,bookworm-slim,debian-slim\n          - buildpack-deps:bookworm,bookworm,debian\n          - python:3.14-rc-alpine,python3.14-rc-alpine\n          - python:3.13-alpine,python3.13-alpine\n          - python:3.12-alpine,python3.12-alpine\n          - python:3.11-alpine,python3.11-alpine\n          - python:3.10-alpine,python3.10-alpine\n          - python:3.9-alpine,python3.9-alpine\n          - python:3.8-alpine,python3.8-alpine\n          - python:3.14-rc-bookworm,python3.14-rc-bookworm\n          - python:3.13-bookworm,python3.13-bookworm\n          - python:3.12-bookworm,python3.12-bookworm\n          - python:3.11-bookworm,python3.11-bookworm\n          - python:3.10-bookworm,python3.10-bookworm\n          - python:3.9-bookworm,python3.9-bookworm\n          - python:3.8-bookworm,python3.8-bookworm\n          - python:3.14-rc-slim-bookworm,python3.14-rc-bookworm-slim\n          - python:3.13-slim-bookworm,python3.13-bookworm-slim\n          - python:3.12-slim-bookworm,python3.12-bookworm-slim\n          - python:3.11-slim-bookworm,python3.11-bookworm-slim\n          - python:3.10-slim-bookworm,python3.10-bookworm-slim\n          - python:3.9-slim-bookworm,python3.9-bookworm-slim\n          - python:3.8-slim-bookworm,python3.8-bookworm-slim\n    steps:\n      # Login to DockerHub (when not pushing, it's to avoid rate-limiting)\n      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n        if: ${{ needs.docker-plan.outputs.login == 'true' }}\n        with:\n          username: ${{ needs.docker-plan.outputs.push == 'true' && 'astral' || 'astralshbot' }}\n          password: ${{ needs.docker-plan.outputs.push == 'true' && secrets.DOCKERHUB_TOKEN_RW || secrets.DOCKERHUB_TOKEN_RO }}\n\n      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5\n\n      - name: Generate Dynamic Dockerfile Tags\n        shell: bash\n        run: |\n          set -euo pipefail\n\n          # Extract the image and tags from the matrix variable\n          IFS=',' read -r BASE_IMAGE BASE_TAGS <<< \"${{ matrix.image-mapping }}\"\n\n          # Generate Dockerfile content\n          cat <<EOF > Dockerfile\n          FROM ${BASE_IMAGE}\n          COPY --from=${{ env.UV_GHCR_IMAGE }}:latest /uv /uvx /usr/local/bin/\n          ENV UV_TOOL_BIN_DIR=\"/usr/local/bin\"\n          ENTRYPOINT []\n          CMD [\"/usr/local/bin/uv\"]\n          EOF\n\n          # Initialize a variable to store all tag docker metadata patterns\n          TAG_PATTERNS=\"\"\n\n          # Loop through all base tags and append its docker metadata pattern to the list\n          # Order is on purpose such that the label org.opencontainers.image.version has the first pattern with the full version\n          IFS=','; for TAG in ${BASE_TAGS}; do\n            TAG_PATTERNS=\"${TAG_PATTERNS}type=pep440,pattern={{ version }},suffix=-${TAG},value=${{ needs.docker-plan.outputs.tag }}\\n\"\n            TAG_PATTERNS=\"${TAG_PATTERNS}type=pep440,pattern={{ major }}.{{ minor }},suffix=-${TAG},value=${{ needs.docker-plan.outputs.tag }}\\n\"\n            TAG_PATTERNS=\"${TAG_PATTERNS}type=raw,value=${TAG}\\n\"\n          done\n\n          # Remove the trailing newline from the pattern list\n          TAG_PATTERNS=\"${TAG_PATTERNS%\\\\n}\"\n\n          # Export tag patterns using the multiline env var syntax\n          {\n            echo \"TAG_PATTERNS<<EOF\"\n            echo -e \"${TAG_PATTERNS}\"\n            echo EOF\n          } >> $GITHUB_ENV\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0\n        # ghcr.io prefers index level annotations\n        env:\n          DOCKER_METADATA_ANNOTATIONS_LEVELS: index\n        with:\n          images: |\n            ${{ env.UV_GHCR_IMAGE }}\n            ${{ env.UV_DOCKERHUB_IMAGE }}\n          flavor: |\n            latest=false\n          tags: |\n            ${{ env.TAG_PATTERNS }}\n\n      - name: Build and push\n        id: build-and-push\n        uses: depot/build-push-action@2583627a84956d07561420dcc1d0eb1f2af3fac0 # v1.15.0\n        with:\n          context: .\n          project: 7hd4vdzmw5 # astral-sh/uv\n          platforms: linux/amd64,linux/arm64\n          push: ${{ needs.docker-plan.outputs.push }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          # TODO(zanieb): Annotations are not supported by Depot yet and are ignored\n          annotations: ${{ steps.meta.outputs.annotations }}\n\n      - name: Generate artifact attestation\n        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n        with:\n          subject-name: ${{ env.UV_GHCR_IMAGE }}\n          subject-digest: ${{ steps.build-and-push.outputs.digest }}\n\n      # Push annotations manually.\n      # See `docker-annotate-base` for details.\n      - name: Add annotations to images\n        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n        env:\n          IMAGES: \"${{ env.UV_GHCR_IMAGE }} ${{ env.UV_DOCKERHUB_IMAGE }}\"\n          DIGEST: ${{ steps.build-and-push.outputs.digest }}\n          TAGS: ${{ steps.meta.outputs.tags }}\n          ANNOTATIONS: ${{ steps.meta.outputs.annotations }}\n        run: |\n          set -x\n          readarray -t lines <<< \"$ANNOTATIONS\"; annotations=(); for line in \"${lines[@]}\"; do annotations+=(--annotation \"$line\"); done\n          for image in $IMAGES; do\n            readarray -t lines < <(grep \"^${image}:\" <<< \"$TAGS\"); tags=(); for line in \"${lines[@]}\"; do tags+=(-t \"$line\"); done\n            docker buildx imagetools create \\\n              \"${annotations[@]}\" \\\n              \"${tags[@]}\" \\\n              \"${image}@${DIGEST}\"\n          done\n\n      # See `docker-annotate-base` for details.\n      - name: Export manifest digest\n        id: manifest-digest\n        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n        env:\n          IMAGE: ${{ env.UV_GHCR_IMAGE }}\n          VERSION: ${{ steps.meta.outputs.version }}\n        run: |\n          digest=\"$(\n            docker buildx imagetools inspect \\\n              \"${IMAGE}:${VERSION}\" \\\n              --format '{{json .Manifest}}' \\\n            | jq -r '.digest'\n          )\"\n          echo \"digest=${digest}\" >> \"$GITHUB_OUTPUT\"\n\n      # See `docker-annotate-base` for details.\n      - name: Generate artifact attestation\n        if: ${{ needs.docker-plan.outputs.push == 'true' }}\n        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n        with:\n          subject-name: ${{ env.UV_GHCR_IMAGE }}\n          subject-digest: ${{ steps.manifest-digest.outputs.digest }}\n\n  # Annotate the base image\n  docker-annotate-base:\n    name: annotate uv\n    runs-on: ubuntu-latest\n    environment:\n      name: ${{ needs.docker-plan.outputs.push == 'true' && 'release' || '' }}\n    needs:\n      - docker-plan\n      - docker-publish-base\n      - docker-publish-extra\n    if: ${{ needs.docker-plan.outputs.push == 'true' }}\n    steps:\n      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n        with:\n          username: astral\n          password: ${{ secrets.DOCKERHUB_TOKEN_RW }}\n\n      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      # Depot doesn't support annotating images, so we need to do so manually\n      # afterwards. Mutating the manifest is desirable regardless, because we\n      # want to bump the base image to appear at the top of the list on GHCR.\n      # However, once annotation support is added to Depot, this step can be\n      # minimized to just touch the GHCR manifest.\n      - name: Add annotations to images\n        env:\n          IMAGES: \"${{ env.UV_GHCR_IMAGE }} ${{ env.UV_DOCKERHUB_IMAGE }}\"\n          DIGEST: ${{ needs.docker-publish-base.outputs.image-digest }}\n          TAGS: ${{ needs.docker-publish-base.outputs.image-tags }}\n          ANNOTATIONS: ${{ needs.docker-publish-base.outputs.image-annotations }}\n        # The readarray part is used to make sure the quoting and special characters are preserved on expansion (e.g. spaces)\n        # The final command becomes `docker buildx imagetools create --annotation 'index:foo=1' --annotation 'index:bar=2' ... -t tag1 -t tag2 ... <IMG>@sha256:<sha256>`\n        run: |\n          set -x\n          readarray -t lines <<< \"$ANNOTATIONS\"; annotations=(); for line in \"${lines[@]}\"; do annotations+=(--annotation \"$line\"); done\n          for image in $IMAGES; do\n            readarray -t lines < <(grep \"^${image}:\" <<< \"$TAGS\"); tags=(); for line in \"${lines[@]}\"; do tags+=(-t \"$line\"); done\n            docker buildx imagetools create \\\n              \"${annotations[@]}\" \\\n              \"${tags[@]}\" \\\n              \"${image}@${DIGEST}\"\n          done\n\n      # Now that we've modified the manifest, we need to attest it again.\n      # Note we only generate an attestation for GHCR.\n      - name: Export manifest digest\n        id: manifest-digest\n        env:\n          IMAGE: ${{ env.UV_GHCR_IMAGE }}\n          VERSION: ${{ needs.docker-publish-base.outputs.image-version }}\n        # To sign the manifest, we need it's digest. Unfortunately \"docker\n        # buildx imagetools create\" does not (yet) have a clean way of sharing\n        # the digest of the manifest it creates (see docker/buildx#2407), so\n        # we use a separate command to retrieve it.\n        # imagetools inspect [TAG] --format '{{json .Manifest}}' gives us\n        # the machine readable JSON description of the manifest, and the\n        # jq command extracts the digest from this. The digest is then\n        # sent to the Github step output file for sharing with other steps.\n        run: |\n          digest=\"$(\n            docker buildx imagetools inspect \\\n              \"${IMAGE}:${VERSION}\" \\\n              --format '{{json .Manifest}}' \\\n            | jq -r '.digest'\n          )\"\n          echo \"digest=${digest}\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Generate artifact attestation\n        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0\n        with:\n          subject-name: ${{ env.UV_GHCR_IMAGE }}\n          subject-digest: ${{ steps.manifest-digest.outputs.digest }}\n\nfile: ci.yml\nContent:\nname: CI\n\non:\n  push:\n    branches: [main]\n  pull_request:\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}\n  cancel-in-progress: true\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  CARGO_TERM_COLOR: always\n  PYTHON_VERSION: \"3.12\"\n  RUSTUP_MAX_RETRIES: 10\n  RUST_BACKTRACE: 1\n\njobs:\n  determine_changes:\n    name: \"Determine changes\"\n    runs-on: ubuntu-latest\n    outputs:\n      # Flag that is raised when any code is changed\n      code: ${{ steps.changed.outputs.code_any_changed }}\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          fetch-depth: 0\n\n      - name: \"Determine changed files\"\n        id: changed\n        shell: bash\n        run: |\n          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha || 'origin/main' }}...HEAD)\n\n          CODE_CHANGED=false\n\n          while IFS= read -r file; do\n            # Generated markdown and JSON files are checked during test runs.\n            if [[ \"${file}\" =~ ^docs/ && ! \"${file}\" =~ ^docs/reference/(cli|settings).md && ! \"${file}\" =~ ^docs/reference/environment.md ]]; then\n              echo \"Skipping ${file} (matches docs/ pattern)\"\n              continue\n            fi\n            if [[ \"${file}\" =~ ^mkdocs.*\\.yml$ ]]; then\n              echo \"Skipping ${file} (matches mkdocs*.yml pattern)\"\n              continue\n            fi\n            if [[ \"${file}\" =~ \\.md$ ]]; then\n              echo \"Skipping ${file} (matches *.md pattern)\"\n              continue\n            fi\n            if [[ \"${file}\" =~ ^bin/ ]]; then\n              echo \"Skipping ${file} (matches bin/ pattern)\"\n              continue\n            fi\n            if [[ \"${file}\" =~ ^assets/ ]]; then\n              echo \"Skipping ${file} (matches assets/ pattern)\"\n              continue\n            fi\n\n            echo \"Detected code change in: ${file}\"\n            CODE_CHANGED=true\n            break\n\n          done <<< \"${CHANGED_FILES}\"\n          echo \"code_any_changed=${CODE_CHANGED}\" >> \"${GITHUB_OUTPUT}\"\n  lint:\n    timeout-minutes: 10\n    name: \"lint\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: 3.12\n\n      - name: \"Install Rustfmt\"\n        run: rustup component add rustfmt\n\n      - name: \"Install uv\"\n        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3\n\n      - name: \"rustfmt\"\n        run: cargo fmt --all --check\n\n      - name: \"Prettier\"\n        run: |\n          npx prettier --check \"**/*.{json5,yaml,yml}\"\n          npx prettier --prose-wrap always --check \"**/*.md\"\n\n      - name: \"README check\"\n        run: python scripts/transform_readme.py --target pypi\n\n      - name: \"Python format\"\n        run: uvx ruff format --diff .\n\n      - name: \"Python lint\"\n        run: uvx ruff check .\n\n      - name: \"Python type check\"\n        run: uvx mypy\n\n      - name: \"Validate project metadata\"\n        run: uvx --from 'validate-pyproject[all,store]' validate-pyproject pyproject.toml\n\n      - name: \"Lint shell scripts\"\n        uses: ludeeus/action-shellcheck@00cae500b08a931fb5698e11e79bfbd38e612a38 # 2.0.0\n        env:\n          # renovate: datasource=github-tags depName=koalaman/shellcheck\n          SHELLCHECK_VERSION: \"v0.10.0\"\n          SHELLCHECK_OPTS: --shell bash\n        with:\n          version: ${{ env.SHELLCHECK_VERSION }}\n          severity: style\n          check_together: \"yes\"\n\n  cargo-clippy:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: ubuntu-latest\n    name: \"cargo clippy | ubuntu\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          save-if: ${{ github.ref == 'refs/heads/main' }}\n      - name: \"Check uv_build dependencies\"\n        uses: EmbarkStudios/cargo-deny-action@30f817c6f72275c6d54dc744fbca09ebc958599f # v2.0.12\n        with:\n          command: check bans\n          manifest-path: crates/uv-build/Cargo.toml\n      - name: \"Install Rust toolchain\"\n        run: rustup component add clippy\n      - name: \"Clippy\"\n        run: cargo clippy --workspace --all-targets --all-features --locked -- -D warnings\n\n  cargo-clippy-windows:\n    timeout-minutes: 15\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: windows-latest\n    name: \"cargo clippy | windows\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: Setup Dev Drive\n        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1\n\n      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...\n      - name: Copy Git Repo to Dev Drive\n        run: |\n          Copy-Item -Path \"${{ github.workspace }}\" -Destination \"${{ env.UV_WORKSPACE }}\" -Recurse\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          workspaces: ${{ env.UV_WORKSPACE }}\n\n      - name: \"Install Rust toolchain\"\n        run: rustup component add clippy\n\n      - name: \"Clippy\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: cargo clippy --workspace --all-targets --all-features --locked -- -D warnings\n\n  cargo-dev-generate-all:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: ubuntu-latest\n    name: \"cargo dev generate-all\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          save-if: ${{ github.ref == 'refs/heads/main' }}\n      - name: \"Generate all\"\n        run: cargo dev generate-all --mode check\n\n  cargo-shear:\n    timeout-minutes: 10\n    name: \"cargo shear\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: \"Install cargo shear\"\n        uses: taiki-e/install-action@a416ddeedbd372e614cc1386e8b642692f66865e # v2.57.1\n        with:\n          tool: cargo-shear\n      - run: cargo shear\n\n  # We use the large GitHub actions runners\n  # For Ubuntu and Windows, this requires Organization-level configuration\n  # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners#about-ubuntu-and-windows-larger-runners\n\n  cargo-test-linux:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: depot-ubuntu-22.04-16\n    name: \"cargo test | ubuntu\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: rui314/setup-mold@v1\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n\n      - name: \"Install Rust toolchain\"\n        run: rustup show\n\n      - uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3\n      - name: \"Install required Python versions\"\n        run: uv python install\n\n      - name: \"Install cargo nextest\"\n        uses: taiki-e/install-action@a416ddeedbd372e614cc1386e8b642692f66865e # v2.57.1\n        with:\n          tool: cargo-nextest\n\n      - name: \"Cargo test\"\n        env:\n          # Retry more than default to reduce flakes in CI\n          UV_HTTP_RETRIES: 5\n        run: |\n          cargo nextest run \\\n            --features python-patch \\\n            --workspace \\\n            --status-level skip --failure-output immediate-final --no-fail-fast -j 20 --final-status-level slow\n\n  cargo-test-macos:\n    timeout-minutes: 15\n    needs: determine_changes\n    # Only run macOS tests on main without opt-in\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'test:macos') || github.ref == 'refs/heads/main' }}\n    runs-on: macos-latest-xlarge # github-macos-14-aarch64-6\n    name: \"cargo test | macos\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: rui314/setup-mold@v1\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n\n      - name: \"Install Rust toolchain\"\n        run: rustup show\n\n      - uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3\n      - name: \"Install required Python versions\"\n        run: uv python install\n\n      - name: \"Install cargo nextest\"\n        uses: taiki-e/install-action@a416ddeedbd372e614cc1386e8b642692f66865e # v2.57.1\n        with:\n          tool: cargo-nextest\n\n      - name: \"Cargo test\"\n        env:\n          # Retry more than default to reduce flakes in CI\n          UV_HTTP_RETRIES: 5\n        run: |\n          cargo nextest run \\\n            --no-default-features \\\n            --features python,python-managed,pypi,git,performance,crates-io \\\n            --workspace \\\n            --status-level skip --failure-output immediate-final --no-fail-fast -j 12 --final-status-level slow\n\n  cargo-test-windows:\n    timeout-minutes: 15\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: depot-windows-2022-16\n    name: \"cargo test | windows\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: Setup Dev Drive\n        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1\n\n      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...\n      - name: Copy Git Repo to Dev Drive\n        run: |\n          Copy-Item -Path \"${{ github.workspace }}\" -Destination \"${{ env.UV_WORKSPACE }}\" -Recurse\n\n      - uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3\n      - name: \"Install required Python versions\"\n        run: uv python install\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          workspaces: ${{ env.UV_WORKSPACE }}\n\n      - name: \"Install Rust toolchain\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: rustup show\n\n      - name: \"Install cargo nextest\"\n        uses: taiki-e/install-action@a416ddeedbd372e614cc1386e8b642692f66865e # v2.57.1\n        with:\n          tool: cargo-nextest\n\n      - name: \"Cargo test\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        env:\n          # Retry more than default to reduce flakes in CI\n          UV_HTTP_RETRIES: 5\n          # Avoid permission errors during concurrent tests\n          # See https://github.com/astral-sh/uv/issues/6940\n          UV_LINK_MODE: copy\n        shell: bash\n        run: |\n          cargo nextest run \\\n            --no-default-features \\\n            --features python,pypi,python-managed \\\n            --workspace \\\n            --status-level skip --failure-output immediate-final --no-fail-fast -j 20 --final-status-level slow\n\n  # Separate jobs for the nightly crate\n  windows-trampoline-check:\n    timeout-minutes: 15\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: windows-latest\n    name: \"check windows trampoline | ${{ matrix.target-arch }}\"\n    strategy:\n      fail-fast: false\n      matrix:\n        target-arch: [\"x86_64\", \"i686\", \"aarch64\"]\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: Setup Dev Drive\n        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1\n\n      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...\n      - name: Copy Git Repo to Dev Drive\n        run: |\n          Copy-Item -Path \"${{ github.workspace }}\" -Destination \"${{ env.UV_WORKSPACE }}\" -Recurse\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          workspaces: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n\n      - name: \"Install Rust toolchain\"\n        working-directory: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n        run: |\n          rustup target add ${{ matrix.target-arch }}-pc-windows-msvc\n          rustup component add rust-src --target ${{ matrix.target-arch }}-pc-windows-msvc\n\n      - name: \"Install cargo-bloat\"\n        uses: taiki-e/install-action@a416ddeedbd372e614cc1386e8b642692f66865e # v2.57.1\n        with:\n          tool: cargo-bloat\n\n      - name: \"rustfmt\"\n        working-directory: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n        run: cargo fmt --all --check\n\n      - name: \"Clippy\"\n        working-directory: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n        run: cargo clippy --all-features --locked --target x86_64-pc-windows-msvc --tests -- -D warnings\n\n      - name: \"Bloat Check\"\n        working-directory: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n        run: |\n          $output = cargo bloat --release --target x86_64-pc-windows-msvc\n          $filteredOutput = $output | Select-String -Pattern 'core::fmt::write|core::fmt::getcount' -NotMatch\n          $containsPatterns = $filteredOutput | Select-String -Pattern 'core::fmt|std::panicking|std::backtrace_rs'\n\n          if ($containsPatterns) {\n              Exit 1\n          } else {\n              Exit 0\n          }\n\n  # Separate jobs for the nightly crate\n  windows-trampoline-test:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: windows-latest\n    name: \"test windows trampoline | ${{ matrix.target-arch }}\"\n    strategy:\n      fail-fast: false\n      matrix:\n        # Note, we exclude `aarch64` because it's not supported by the GitHub runner\n        target-arch: [\"x86_64\", \"i686\"]\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: Setup Dev Drive\n        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1\n      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...\n      - name: Copy Git Repo to Dev Drive\n        run: |\n          Copy-Item -Path \"${{ github.workspace }}\" -Destination \"${{ env.UV_WORKSPACE }}\" -Recurse\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          workspaces: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n      - name: \"Install Rust toolchain\"\n        working-directory: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n        run: |\n          rustup target add ${{ matrix.target-arch }}-pc-windows-msvc\n          rustup component add rust-src --target ${{ matrix.target-arch }}-pc-windows-msvc\n      - name: \"Test committed binaries\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          rustup target add ${{ matrix.target-arch }}-pc-windows-msvc\n          cargo test -p uv-trampoline-builder --target ${{ matrix.target-arch }}-pc-windows-msvc\n      # Build and copy the new binaries\n      - name: \"Build\"\n        working-directory: ${{ env.UV_WORKSPACE }}/crates/uv-trampoline\n        run: |\n          cargo build --target ${{ matrix.target-arch }}-pc-windows-msvc\n          cp target/${{ matrix.target-arch }}-pc-windows-msvc/debug/uv-trampoline-console.exe trampolines/uv-trampoline-${{ matrix.target-arch }}-console.exe\n          cp target/${{ matrix.target-arch }}-pc-windows-msvc/debug/uv-trampoline-gui.exe trampolines/uv-trampoline-${{ matrix.target-arch }}-gui.exe\n      - name: \"Test new binaries\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          # We turn off the default \"production\" test feature since these are debug binaries\n          cargo test -p uv-trampoline-builder --target ${{ matrix.target-arch }}-pc-windows-msvc --no-default-features\n\n  typos:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: crate-ci/typos@master\n\n  docs:\n    timeout-minutes: 10\n    name: \"mkdocs\"\n    runs-on: ubuntu-latest\n    env:\n      MKDOCS_INSIDERS_SSH_KEY_EXISTS: ${{ secrets.MKDOCS_INSIDERS_SSH_KEY != '' }}\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          fetch-depth: 0\n      - uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      - name: \"Add SSH key\"\n        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}\n        uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1\n        with:\n          ssh-private-key: ${{ secrets.MKDOCS_INSIDERS_SSH_KEY }}\n\n      - name: \"Build docs (public)\"\n        run: uvx --with-requirements docs/requirements.txt mkdocs build --strict -f mkdocs.public.yml\n\n      - name: \"Build docs (insiders)\"\n        if: ${{ env.MKDOCS_INSIDERS_SSH_KEY_EXISTS == 'true' }}\n        run: uvx --with-requirements docs/requirements-insiders.txt mkdocs build --strict -f mkdocs.insiders.yml\n\n  build-binary-linux-libc:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: github-ubuntu-24.04-x86_64-8\n    name: \"build binary | linux libc\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: rui314/setup-mold@v1\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n\n      - name: \"Build\"\n        run: cargo build\n\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n          path: |\n            ./target/debug/uv\n            ./target/debug/uvx\n          retention-days: 1\n\n  build-binary-linux-aarch64:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: github-ubuntu-24.04-aarch64-4\n    name: \"build binary | linux aarch64\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: rui314/setup-mold@v1\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n\n      - name: \"Build\"\n        run: cargo build\n\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: uv-linux-aarch64-${{ github.sha }}\n          path: |\n            ./target/debug/uv\n            ./target/debug/uvx\n          retention-days: 1\n\n  build-binary-linux-musl:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: github-ubuntu-24.04-x86_64-8\n    name: \"build binary | linux musl\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: rui314/setup-mold@v1\n\n      - name: \"Setup musl\"\n        run: |\n          sudo apt-get install musl-tools\n          rustup target add x86_64-unknown-linux-musl\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n\n      - name: \"Build\"\n        run: cargo build --target x86_64-unknown-linux-musl --bin uv --bin uvx\n\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: uv-linux-musl-${{ github.sha }}\n          path: |\n            ./target/x86_64-unknown-linux-musl/debug/uv\n            ./target/x86_64-unknown-linux-musl/debug/uvx\n          retention-days: 1\n\n  build-binary-macos-aarch64:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: macos-14 # github-macos-14-aarch64-3\n    name: \"build binary | macos aarch64\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: rui314/setup-mold@v1\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n      - name: \"Build\"\n        run: cargo build --bin uv --bin uvx\n\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: uv-macos-aarch64-${{ github.sha }}\n          path: |\n            ./target/debug/uv\n            ./target/debug/uvx\n          retention-days: 1\n\n  build-binary-macos-x86_64:\n    timeout-minutes: 10\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: macos-latest-large # github-macos-14-x86_64-12\n    name: \"build binary | macos x86_64\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: rui314/setup-mold@v1\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n      - name: \"Build\"\n        run: cargo build --bin uv --bin uvx\n\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: uv-macos-x86_64-${{ github.sha }}\n          path: |\n            ./target/debug/uv\n            ./target/debug/uvx\n          retention-days: 1\n\n  build-binary-windows-x86_64:\n    needs: determine_changes\n    timeout-minutes: 10\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: windows-latest\n    name: \"build binary | windows x86_64\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: Setup Dev Drive\n        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1\n\n      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...\n      - name: Copy Git Repo to Dev Drive\n        run: |\n          Copy-Item -Path \"${{ github.workspace }}\" -Destination \"${{ env.UV_WORKSPACE }}\" -Recurse\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          workspaces: ${{ env.UV_WORKSPACE }}\n\n      - name: \"Build\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: cargo build --bin uv --bin uvx\n\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n          path: |\n            ${{ env.UV_WORKSPACE }}/target/debug/uv.exe\n            ${{ env.UV_WORKSPACE }}/target/debug/uvx.exe\n          retention-days: 1\n\n  build-binary-windows-aarch64:\n    needs: determine_changes\n    timeout-minutes: 25\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on:\n      labels: windows-latest\n    name: \"build binary | windows aarch64\"\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: Create Dev Drive using ReFS\n        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1\n\n      # actions/checkout does not let us clone into anywhere outside ${{ github.workspace }}, so we have to copy the clone...\n      - name: Copy Git Repo to Dev Drive\n        run: |\n          Copy-Item -Path \"${{ github.workspace }}\" -Destination \"${{ env.UV_WORKSPACE }}\" -Recurse\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n        with:\n          workspaces: ${{ env.UV_WORKSPACE }}\n\n      - name: \"Install cross target\"\n        run: rustup target add aarch64-pc-windows-msvc\n\n      - name: \"Build\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: cargo build --target aarch64-pc-windows-msvc\n\n      - name: \"Upload binary\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: uv-windows-aarch64-${{ github.sha }}\n          path: |\n            ${{ env.UV_WORKSPACE }}/target/aarch64-pc-windows-msvc/debug/uv.exe\n            ${{ env.UV_WORKSPACE }}/target/aarch64-pc-windows-msvc/debug/uvx.exe\n          retention-days: 1\n\n  build-binary-msrv:\n    name: \"build binary | msrv\"\n    needs: determine_changes\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: github-ubuntu-24.04-x86_64-8\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: SebRollen/toml-action@b1b3628f55fc3a28208d4203ada8b737e9687876 # v1.2.0\n        id: msrv\n        with:\n          file: \"Cargo.toml\"\n          field: \"workspace.package.rust-version\"\n      - name: \"Install Rust toolchain\"\n        run: rustup default ${{ steps.msrv.outputs.value }}\n      - name: \"Install mold\"\n        uses: rui314/setup-mold@v1\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n      - run: cargo +${{ steps.msrv.outputs.value }} build\n      - run: ./target/debug/uv --version\n\n  build-binary-freebsd:\n    needs: determine_changes\n    timeout-minutes: 10\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    runs-on: ubuntu-latest\n    name: \"build binary | freebsd\"\n\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n      - name: \"Cross build\"\n        run: |\n          # Install cross from `freebsd-firecracker`\n          wget -q -O cross https://github.com/acj/freebsd-firecracker/releases/download/v0.0.10/cross\n          chmod +x cross\n          mv cross /usr/local/bin/cross\n\n          cross build --target x86_64-unknown-freebsd\n\n      - name: Test in Firecracker VM\n        uses: acj/freebsd-firecracker-action@136ca0bce2adade21e526ceb07db643ad23dd2dd # v0.5.1\n        with:\n          verbose: false\n          checkout: false\n          pre-run: |\n            # The exclude `*` prevents examination of directories so we need to\n            # include each parent directory of the binary\n            include_path=\"$(mktemp)\"\n            cat <<EOF > $include_path\n            target\n            target/x86_64-unknown-freebsd\n            target/x86_64-unknown-freebsd/debug\n            target/x86_64-unknown-freebsd/debug/uv\n            EOF\n\n            rsync -r -e \"ssh\" \\\n              --relative \\\n              --copy-links \\\n              --include-from \"$include_path\" \\\n              --exclude \"*\" \\\n              . firecracker:\n          run-in-vm: |\n            mv target/x86_64-unknown-freebsd/debug/uv uv\n            chmod +x uv\n            ./uv --version\n\n  ecosystem-test:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"ecosystem test | ${{ matrix.repo }}\"\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        include:\n          - repo: \"prefecthq/prefect\"\n            ref: \"7f25bbdf45fc81cca6dc23fb6a7377d436b70c83\"\n            commands:\n              - \"uv venv\"\n              - \"uv pip install -e '.[dev]'\"\n            python: \"3.9\"\n          - repo: \"pallets/flask\"\n            ref: \"b78b5a210bde49e7e04b62a2a4f453ca10e0048c\"\n            commands:\n              - \"uv venv\"\n              - \"uv pip install -r requirements/dev.txt\"\n            python: \"3.12\"\n          - repo: \"pydantic/pydantic-core\"\n            ref: \"d03bf4a01ca3b378cc8590bd481f307e82115bc6\"\n            commands:\n              - \"uv sync --group all\"\n              - \"uv lock --upgrade\"\n            python: \"3.12\"\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          repository: ${{ matrix.repo }}\n          ref: ${{ matrix.ref }}\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Test\"\n        run: |\n          echo '${{ toJSON(matrix.commands) }}' | jq -r '.[]' | while read cmd; do\n            echo \"+ $cmd\" >&2\n            if [[ $cmd == uv* ]]; then\n              ./$cmd\n            else\n              $cmd\n            fi\n          done\n\n  smoke-test-linux:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"smoke test | linux\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: |\n          chmod +x ./uv\n          chmod +x ./uvx\n\n      - name: \"Smoke test\"\n        run: |\n          ./uv run scripts/smoke-test\n\n      - name: \"Test shell completions\"\n        run: |\n          eval \"$(./uv generate-shell-completion bash)\"\n          eval \"$(./uvx --generate-shell-completion bash)\"\n\n  smoke-test-linux-aarch64:\n    timeout-minutes: 10\n    needs: build-binary-linux-aarch64\n    name: \"smoke test | linux aarch64\"\n    runs-on: github-ubuntu-24.04-aarch64-2\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-aarch64-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: |\n          chmod +x ./uv\n          chmod +x ./uvx\n\n      - name: \"Smoke test\"\n        run: |\n          ./uv run scripts/smoke-test\n\n      - name: \"Test shell completions\"\n        run: |\n          eval \"$(./uv generate-shell-completion bash)\"\n          eval \"$(./uvx --generate-shell-completion bash)\"\n\n  smoke-test-linux-musl:\n    timeout-minutes: 10\n    needs: build-binary-linux-musl\n    name: \"check system | alpine\"\n    runs-on: ubuntu-latest\n    container: alpine:latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-musl-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: |\n          chmod +x ./uv\n          chmod +x ./uvx\n\n      - name: \"Smoke test\"\n        run: |\n          ./uv run scripts/smoke-test\n\n  smoke-test-macos:\n    timeout-minutes: 10\n    needs: build-binary-macos-x86_64\n    name: \"smoke test | macos\"\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-macos-x86_64-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: |\n          chmod +x ./uv\n          chmod +x ./uvx\n\n      - name: \"Smoke test\"\n        run: |\n          ./uv run scripts/smoke-test\n\n      - name: \"Test shell completions\"\n        run: |\n          eval \"$(./uv generate-shell-completion bash)\"\n          eval \"$(./uvx --generate-shell-completion bash)\"\n\n  smoke-test-windows-x86_64:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"smoke test | windows x86_64\"\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Smoke test\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          ./uv run scripts/smoke-test\n\n      - name: \"Test uv shell completions\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          (& ./uv generate-shell-completion powershell) | Out-String | Invoke-Expression\n\n      - name: \"Test uvx shell completions\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          (& ./uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression\n\n  smoke-test-windows-aarch64:\n    timeout-minutes: 10\n    needs: build-binary-windows-aarch64\n    name: \"smoke test | windows aarch64\"\n    runs-on: windows-11-arm\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-aarch64-${{ github.sha }}\n\n      - name: \"Smoke test\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          ./uv run scripts/smoke-test\n\n      - name: \"Test uv shell completions\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          (& ./uv generate-shell-completion powershell) | Out-String | Invoke-Expression\n\n      - name: \"Test uvx shell completions\"\n        working-directory: ${{ env.UV_WORKSPACE }}\n        run: |\n          (& ./uvx --generate-shell-completion powershell) | Out-String | Invoke-Expression\n\n  integration-test-conda:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | conda on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0\n        with:\n          miniconda-version: latest\n          activate-environment: uv\n          python-version: \"3.12\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: Conda info\n        shell: bash -el {0}\n        run: conda info\n\n      - name: \"Install a package\"\n        shell: bash -el {0}\n        run: |\n          echo \"$CONDA_PREFIX\"\n          ./uv pip install anyio\n\n  integration-test-deadsnakes-39-linux:\n    timeout-minutes: 15\n    needs: build-binary-linux-libc\n    name: \"integration test | deadsnakes python3.9 on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Install python3.9\"\n        run: |\n          for i in {1..5}; do\n            sudo add-apt-repository ppa:deadsnakes && break || { echo \"Attempt $i failed, retrying in 10 seconds...\"; sleep 10; }\n            if [ $i -eq 5 ]; then\n              echo \"Failed to add repository after 5 attempts\"\n              exit 1\n            fi\n          done\n          sudo apt-get update\n          sudo apt-get install python3.9\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Check missing distutils\"\n        run: |\n          ./uv venv -p 3.9 --python-preference only-system -v 2>&1 | tee log.txt || true\n          # We should report that distutils is missing\n          grep 'Python installation is missing `distutils`' log.txt\n\n      - name: \"Install distutils\"\n        run: |\n          sudo apt-get install python3.9-distutils\n\n      - name: \"Create a virtualenv\"\n        run: |\n          ./uv venv -p 3.9 --python-preference only-system -v\n\n      - name: \"Check version\"\n        run: |\n          .venv/bin/python --version\n\n      - name: \"Check install\"\n        run: |\n          ./uv pip install -v anyio\n\n  integration-test-free-threaded-windows-x86_64:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"integration test | free-threaded on windows\"\n    runs-on: windows-latest\n\n    steps:\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Install free-threaded Python via uv\"\n        run: |\n          ./uv python install -v 3.13t\n\n      - name: \"Create a virtual environment (stdlib)\"\n        run: |\n          & (./uv python find 3.13t) -m venv .venv\n\n      - name: \"Check version (stdlib)\"\n        run: |\n          .venv/Scripts/python --version\n\n      - name: \"Create a virtual environment (uv)\"\n        run: |\n          ./uv venv -c -p 3.13t --managed-python\n\n      - name: \"Check version (uv)\"\n        run: |\n          .venv/Scripts/python --version\n\n      - name: \"Check is free-threaded\"\n        run: |\n          .venv/Scripts/python -c \"import sys; exit(1) if sys._is_gil_enabled() else exit(0)\"\n\n      - name: \"Check install\"\n        run: |\n          ./uv pip install -v anyio\n\n      - name: \"Check uv run\"\n        run: |\n          ./uv run python -c \"\"\n          ./uv run -p 3.13t python -c \"\"\n\n  integration-test-windows-aarch64-implicit:\n    timeout-minutes: 10\n    needs: build-binary-windows-aarch64\n    name: \"integration test | aarch64 windows implicit\"\n    runs-on: windows-11-arm\n\n    steps:\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-aarch64-${{ github.sha }}\n\n      - name: \"Install Python via uv (implicitly select x64)\"\n        run: |\n          ./uv python install -v 3.13\n\n      - name: \"Create a virtual environment (stdlib)\"\n        run: |\n          & (./uv python find 3.13) -m venv .venv\n\n      - name: \"Check version (stdlib)\"\n        run: |\n          .venv/Scripts/python --version\n\n      - name: \"Create a virtual environment (uv)\"\n        run: |\n          ./uv venv -c -p 3.13 --managed-python\n\n      - name: \"Check version (uv)\"\n        run: |\n          .venv/Scripts/python --version\n\n      - name: \"Check is x64\"\n        run: |\n          .venv/Scripts/python -c \"import sys; exit(1) if 'AMD64' not in sys.version else exit(0)\"\n\n      - name: \"Check install\"\n        run: |\n          ./uv pip install -v anyio\n\n      - name: \"Check uv run\"\n        run: |\n          ./uv run python -c \"\"\n          ./uv run -p 3.13 python -c \"\"\n\n  integration-test-windows-aarch64-explicit:\n    timeout-minutes: 10\n    needs: build-binary-windows-aarch64\n    name: \"integration test | aarch64 windows explicit\"\n    runs-on: windows-11-arm\n\n    steps:\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-aarch64-${{ github.sha }}\n\n      - name: \"Install Python via uv (explicitly select aarch64)\"\n        run: |\n          ./uv python install -v cpython-3.13-windows-aarch64-none\n\n      - name: \"Create a virtual environment (stdlib)\"\n        run: |\n          & (./uv python find 3.13) -m venv .venv\n\n      - name: \"Check version (stdlib)\"\n        run: |\n          .venv/Scripts/python --version\n\n      - name: \"Create a virtual environment (uv)\"\n        run: |\n          ./uv venv -c -p 3.13 --managed-python\n\n      - name: \"Check version (uv)\"\n        run: |\n          .venv/Scripts/python --version\n\n      - name: \"Check is NOT x64\"\n        run: |\n          .venv/Scripts/python -c \"import sys; exit(1) if 'AMD64' in sys.version else exit(0)\"\n\n      - name: \"Check install\"\n        run: |\n          ./uv pip install -v anyio\n\n      - name: \"Check uv run\"\n        run: |\n          ./uv run python -c \"\"\n          ./uv run -p 3.13 python -c \"\"\n\n  integration-test-pypy-linux:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | pypy on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Install PyPy\"\n        run: ./uv python install -v pypy3.9\n\n      - name: \"Create a virtual environment\"\n        run: |\n          ./uv venv -p pypy3.9 --managed-python\n\n      - name: \"Check for executables\"\n        run: |\n          check_in_bin() {\n              local executable_name=$1\n              local bin_path=\".venv/bin\"\n\n              if [[ -x \"$bin_path/$executable_name\" ]]; then\n                  return 0\n              else\n                  echo \"Executable '$executable_name' not found in folder '$bin_path'.\"\n                  return 1\n              fi\n          }\n\n          executables=(\"pypy\" \"pypy3\" \"python\")\n\n          all_found=true\n          for executable_name in \"${executables[@]}\"; do\n              check_in_bin \"$executable_name\" \"$folder_path\"\n              result=$?\n\n              if [[ $result -ne 0 ]]; then\n                  all_found=false\n              fi\n          done\n\n          if ! $all_found; then\n            echo \"One or more expected executables were not found.\"\n            exit 1\n          fi\n\n      - name: \"Check version\"\n        run: |\n          .venv/bin/pypy --version\n          .venv/bin/pypy3 --version\n          .venv/bin/python --version\n\n      - name: \"Check install\"\n        run: |\n          ./uv pip install anyio\n\n  integration-test-pypy-windows-x86_64:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"integration test | pypy on windows\"\n    runs-on: windows-latest\n\n    steps:\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Install PyPy\"\n        run: .\\uv.exe python install pypy3.9\n\n      - name: \"Create a virtual environment\"\n        run: |\n          .\\uv.exe venv -p pypy3.9 --managed-python\n\n      - name: \"Check for executables\"\n        shell: python\n        run: |\n          import sys\n          from pathlib import Path\n\n          def binary_exist(binary):\n            binaries_path = Path(\".venv\\\\Scripts\")\n            if (binaries_path / binary).exists():\n              return True\n            print(f\"Executable '{binary}' not found in folder '{binaries_path}'.\")\n\n          all_found = True\n          expected_binaries = [\n              \"pypy3.9.exe\",\n              \"pypy3.9w.exe\",\n              \"pypy3.exe\",\n              \"pypyw.exe\",\n              \"python.exe\",\n              \"python3.9.exe\",\n              \"python3.exe\",\n              \"pythonw.exe\",\n          ]\n          for binary in expected_binaries:\n            if not binary_exist(binary):\n              all_found = False\n\n          if not all_found:\n            print(\"One or more expected executables were not found.\")\n            sys.exit(1)\n\n      - name: \"Check version\"\n        run: |\n          & .venv\\Scripts\\pypy3.9.exe --version\n          & .venv\\Scripts\\pypy3.exe --version\n          & .venv\\Scripts\\python.exe --version\n\n      - name: \"Check install\"\n        run: |\n          .\\uv.exe pip install anyio\n\n  integration-test-graalpy-linux:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | graalpy on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Install GraalPy\"\n        run: ./uv python install -v graalpy\n\n      - name: \"Create a virtual environment\"\n        run: |\n          ./uv venv -p graalpy --managed-python\n\n      - name: \"Check for executables\"\n        run: |\n          check_in_bin() {\n              local executable_name=$1\n              local bin_path=\".venv/bin\"\n\n              if [[ -x \"$bin_path/$executable_name\" ]]; then\n                  return 0\n              else\n                  echo \"Executable '$executable_name' not found in folder '$bin_path'.\"\n                  return 1\n              fi\n          }\n\n          executables=(\"graalpy\" \"python3\" \"python\")\n\n          all_found=true\n          for executable_name in \"${executables[@]}\"; do\n              check_in_bin \"$executable_name\" \"$folder_path\"\n              result=$?\n\n              if [[ $result -ne 0 ]]; then\n                  all_found=false\n              fi\n          done\n\n          if ! $all_found; then\n            echo \"One or more expected executables were not found.\"\n            exit 1\n          fi\n\n      - name: \"Check version\"\n        run: |\n          .venv/bin/graalpy --version\n          .venv/bin/python3 --version\n          .venv/bin/python --version\n\n      - name: \"Check install\"\n        run: |\n          ./uv pip install anyio\n\n  integration-test-graalpy-windows-x86_64:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"integration test | graalpy on windows\"\n    runs-on: windows-latest\n\n    steps:\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Install GraalPy\"\n        run: .\\uv.exe python install graalpy\n\n      - name: \"Create a virtual environment\"\n        run: |\n          .\\uv.exe venv -p graalpy --managed-python\n\n      - name: \"Check for executables\"\n        shell: python\n        run: |\n          import sys\n          from pathlib import Path\n\n          def binary_exist(binary):\n            binaries_path = Path(\".venv\\\\Scripts\")\n            if (binaries_path / binary).exists():\n              return True\n            print(f\"Executable '{binary}' not found in folder '{binaries_path}'.\")\n\n          all_found = True\n          expected_binaries = [\n              \"graalpy.exe\",\n              \"python.exe\",\n              \"python3.exe\",\n          ]\n          for binary in expected_binaries:\n            if not binary_exist(binary):\n              all_found = False\n\n          if not all_found:\n            print(\"One or more expected executables were not found.\")\n            sys.exit(1)\n\n      - name: \"Check version\"\n        run: |\n          & .venv\\Scripts\\graalpy.exe --version\n          & .venv\\Scripts\\python3.exe --version\n          & .venv\\Scripts\\python.exe --version\n\n      - name: \"Check install\"\n        run: |\n          .\\uv.exe pip install anyio\n\n  integration-test-pyodide-linux:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | pyodide on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Create a native virtual environment\"\n        run: |\n          ./uv venv venv-native -p 3.12\n          # We use features added in 0.30.3 but there is no known breakage in\n          # newer versions.\n          ./uv pip install -p venv-native/bin/python pyodide-build==0.30.3 pip\n\n      - name: \"Install pyodide interpreter\"\n        run: |\n          source ./venv-native/bin/activate\n          pyodide xbuildenv install 0.27.5\n          PYODIDE_PYTHON=$(pyodide config get interpreter)\n          PYODIDE_INDEX=$(pyodide config get package_index)\n          echo \"PYODIDE_PYTHON=$PYODIDE_PYTHON\" >> $GITHUB_ENV\n          echo \"PYODIDE_INDEX=$PYODIDE_INDEX\" >> $GITHUB_ENV\n\n      - name: \"Create pyodide virtual environment\"\n        run: |\n          ./uv venv -p $PYODIDE_PYTHON venv-pyodide\n          source ./venv-pyodide/bin/activate\n          ./uv pip install --extra-index-url=$PYODIDE_INDEX --no-build numpy\n          python -c 'import numpy'\n\n  integration-test-github-actions:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | github actions\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.12.7\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Install a package without system opt-in\"\n        run: |\n          ./uv pip install anyio && exit 1 || echo \"Failed as expected\"\n\n      - name: \"Install a package with system opt-in\"\n        run: |\n          ./uv pip install anyio --system\n\n      - name: Configure uv to use the system Python by default\n        run: echo \"UV_SYSTEM_PYTHON=1\" >> $GITHUB_ENV\n\n      - name: \"Install a package with system opt-in via the environment\"\n        run: |\n          ./uv pip install anyio --reinstall\n\n      - name: \"Create a project\"\n        run: |\n          # Use Python 3.11 as the minimum required version\n          ./uv init --python 3.11\n          ./uv add anyio\n\n      - name: \"Sync to the system Python\"\n        run: ./uv sync -v --python 3.12\n        env:\n          UV_PROJECT_ENVIRONMENT: \"/opt/hostedtoolcache/Python/3.12.7/x64\"\n\n      - name: \"Attempt to sync to the system Python with an incompatible version\"\n        run: |\n          ./uv sync -v --python 3.11 && { echo \"ci: Error; should not succeed\"; exit 1; } || { echo \"ci: Ok; expected failure\"; exit 0; }\n        env:\n          UV_PROJECT_ENVIRONMENT: \"/opt/hostedtoolcache/Python/3.12.7/x64\"\n\n      - name: \"Attempt to sync to a non-Python environment directory\"\n        run: |\n          mkdir -p /home/runner/example\n          touch /home/runner/example/some-file\n          ./uv sync -v && { echo \"ci: Error; should not succeed\"; exit 1; } || { echo \"ci: Ok; expected failure\"; exit 0; }\n        env:\n          UV_PROJECT_ENVIRONMENT: \"/home/runner/example\"\n\n  integration-test-github-actions-freethreaded:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | free-threaded python on github actions\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.13t\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Install a package without system opt-in\"\n        run: |\n          ./uv pip install anyio && exit 1 || echo \"Failed as expected\"\n\n      - name: \"Install a package with system opt-in but without free-threaded opt-in\"\n        run: |\n          ./uv pip install anyio --system --python 3.13 || echo \"Failed as expected\"\n          # (we need to request 3.13 or we'll discover 3.12 on the system)\n\n      - name: \"Install a package with system and free-threaded opt-in\"\n        run: |\n          ./uv pip install anyio --system --python 3.13t\n\n      - name: \"Create a virtual environment\"\n        run: |\n          ./uv venv -p 3.13t --python-preference only-system\n\n      - name: \"Check is free-threaded\"\n        run: |\n          .venv/bin/python -c \"import sys; exit(1) if sys._is_gil_enabled() else exit(0)\"\n\n  integration-test-publish-changed:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | determine publish changes\"\n    runs-on: ubuntu-latest\n    outputs:\n      # Flag that is raised when any code is changed\n      code: ${{ steps.changed.outputs.code_any_changed }}\n    # Only the main repository is a trusted publisher\n    if: github.repository == 'astral-sh/uv' && !contains(github.event.pull_request.labels.*.name, 'no-test')\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          fetch-depth: 0\n\n      # Only publish a new release if the publishing code changed\n      - name: \"Determine changed files\"\n        id: changed\n        shell: bash\n        run: |\n          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha || 'origin/main' }}...HEAD)\n\n          CODE_CHANGED=false\n\n          while IFS= read -r file; do\n            if [[ \"${file}\" =~ ^crates/uv-publish/ || \"${file}\" =~ ^scripts/publish/ || \"${file}\" == \".github/workflows/ci.yml\" ]]; then\n              echo \"Detected code change in: ${file}\"\n              CODE_CHANGED=true\n              break\n            fi\n\n            echo \"Skipping ${file} (not in watched paths)\"\n            continue\n\n          done <<< \"${CHANGED_FILES}\"\n          echo \"code_any_changed=${CODE_CHANGED}\" >> \"${GITHUB_OUTPUT}\"\n\n  integration-test-registries:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | registries\"\n    runs-on: ubuntu-latest\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && github.event.pull_request.head.repo.fork != true }}\n    environment: uv-test-registries\n    env:\n      PYTHON_VERSION: 3.12\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"${{ env.PYTHON_VERSION }}\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Configure AWS credentials\"\n        uses: aws-actions/configure-aws-credentials@a159d7bb5354cf786f855f2f5d1d8d768d9a08d1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n\n      - name: \"Get AWS CodeArtifact token\"\n        run: |\n          UV_TEST_AWS_TOKEN=$(aws codeartifact get-authorization-token \\\n            --domain tests \\\n            --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} \\\n            --region us-east-1 \\\n            --query authorizationToken \\\n            --output text)\n          echo \"::add-mask::$UV_TEST_AWS_TOKEN\"\n          echo \"UV_TEST_AWS_TOKEN=$UV_TEST_AWS_TOKEN\" >> $GITHUB_ENV\n\n      - name: \"Authenticate with GCP\"\n        id: \"auth\"\n        uses: \"google-github-actions/auth@140bb5113ffb6b65a7e9b937a81fa96cf5064462\"\n        with:\n          credentials_json: \"${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}\"\n\n      - name: \"Set up GCP SDK\"\n        uses: \"google-github-actions/setup-gcloud@6a7c903a70c8625ed6700fa299f5ddb4ca6022e9\"\n\n      - name: \"Get GCP Artifact Registry token\"\n        id: get_token\n        run: |\n          UV_TEST_GCP_TOKEN=$(gcloud auth print-access-token)\n          echo \"::add-mask::$UV_TEST_GCP_TOKEN\"\n          echo \"UV_TEST_GCP_TOKEN=$UV_TEST_GCP_TOKEN\" >> $GITHUB_ENV\n\n      - name: \"Run registry tests\"\n        run: ./uv run -p ${{ env.PYTHON_VERSION }} scripts/registries-test.py --uv ./uv --color always --all\n        env:\n          RUST_LOG: uv=debug\n          UV_TEST_ARTIFACTORY_TOKEN: ${{ secrets.UV_TEST_ARTIFACTORY_TOKEN }}\n          UV_TEST_ARTIFACTORY_URL: ${{ secrets.UV_TEST_ARTIFACTORY_URL }}\n          UV_TEST_ARTIFACTORY_USERNAME: ${{ secrets.UV_TEST_ARTIFACTORY_USERNAME }}\n          UV_TEST_AWS_URL: ${{ secrets.UV_TEST_AWS_URL }}\n          UV_TEST_AWS_USERNAME: aws\n          UV_TEST_AZURE_TOKEN: ${{ secrets.UV_TEST_AZURE_TOKEN }}\n          UV_TEST_AZURE_URL: ${{ secrets.UV_TEST_AZURE_URL }}\n          UV_TEST_AZURE_USERNAME: dummy\n          UV_TEST_CLOUDSMITH_TOKEN: ${{ secrets.UV_TEST_CLOUDSMITH_TOKEN }}\n          UV_TEST_CLOUDSMITH_URL: ${{ secrets.UV_TEST_CLOUDSMITH_URL }}\n          UV_TEST_CLOUDSMITH_USERNAME: ${{ secrets.UV_TEST_CLOUDSMITH_USERNAME }}\n          UV_TEST_GCP_URL: ${{ secrets.UV_TEST_GCP_URL }}\n          UV_TEST_GCP_USERNAME: oauth2accesstoken\n          UV_TEST_GEMFURY_TOKEN: ${{ secrets.UV_TEST_GEMFURY_TOKEN }}\n          UV_TEST_GEMFURY_URL: ${{ secrets.UV_TEST_GEMFURY_URL }}\n          UV_TEST_GEMFURY_USERNAME: ${{ secrets.UV_TEST_GEMFURY_USERNAME }}\n          UV_TEST_GITLAB_TOKEN: ${{ secrets.UV_TEST_GITLAB_TOKEN }}\n          UV_TEST_GITLAB_URL: ${{ secrets.UV_TEST_GITLAB_URL }}\n          UV_TEST_GITLAB_USERNAME: token\n\n  integration-test-publish:\n    timeout-minutes: 20\n    needs: integration-test-publish-changed\n    name: \"integration test | uv publish\"\n    runs-on: ubuntu-latest\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'no-test') && github.event.pull_request.head.repo.fork != true && (needs.integration-test-publish-changed.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    environment: uv-test-publish\n    env:\n      # No dbus in GitHub Actions\n      PYTHON_KEYRING_BACKEND: keyrings.alt.file.PlaintextKeyring\n      PYTHON_VERSION: 3.12\n    permissions:\n      # For trusted publishing\n      id-token: write\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"${{ env.PYTHON_VERSION }}\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Build astral-test-pypa-gh-action\"\n        run: |\n          # Build a yet unused version of `astral-test-pypa-gh-action`\n          mkdir astral-test-pypa-gh-action\n          cd astral-test-pypa-gh-action\n          ../uv init --package\n          # Get the latest patch version\n          patch_version=$(curl https://test.pypi.org/simple/astral-test-pypa-gh-action/?format=application/vnd.pypi.simple.v1+json | jq --raw-output '.files[-1].filename' | sed 's/astral_test_pypa_gh_action-0\\.1\\.\\([0-9]\\+\\)\\.tar\\.gz/\\1/')\n          # Set the current version to one higher (which should be unused)\n          sed -i \"s/0.1.0/0.1.$((patch_version + 1))/g\" pyproject.toml\n          ../uv build\n\n      - name: \"Publish astral-test-pypa-gh-action\"\n        uses: pypa/gh-action-pypi-publish@db8f07d3871a0a180efa06b95d467625c19d5d5f # release/v1\n        with:\n          # With this GitHub action, we can't do as rigid checks as with our custom Python script, so we publish more\n          # leniently\n          skip-existing: \"true\"\n          verbose: \"true\"\n          repository-url: \"https://test.pypi.org/legacy/\"\n          packages-dir: \"astral-test-pypa-gh-action/dist\"\n\n      - name: \"Add password to keyring\"\n        run: |\n          # `keyrings.alt` contains the plaintext keyring\n          ./uv tool install --with keyrings.alt keyring\n          echo $UV_TEST_PUBLISH_KEYRING | keyring set https://test.pypi.org/legacy/?astral-test-keyring __token__\n        env:\n          UV_TEST_PUBLISH_KEYRING: ${{ secrets.UV_TEST_PUBLISH_KEYRING }}\n\n      - name: \"Publish test packages\"\n        # `-p 3.12` prefers the python we just installed over the one locked in `.python_version`.\n        run: ./uv run -p ${{ env.PYTHON_VERSION }} scripts/publish/test_publish.py --uv ./uv all\n        env:\n          RUST_LOG: uv=debug,uv_publish=trace\n          UV_TEST_PUBLISH_TOKEN: ${{ secrets.UV_TEST_PUBLISH_TOKEN }}\n          UV_TEST_PUBLISH_PASSWORD: ${{ secrets.UV_TEST_PUBLISH_PASSWORD }}\n          UV_TEST_PUBLISH_GITLAB_PAT: ${{ secrets.UV_TEST_PUBLISH_GITLAB_PAT }}\n          UV_TEST_PUBLISH_CODEBERG_TOKEN: ${{ secrets.UV_TEST_PUBLISH_CODEBERG_TOKEN }}\n          UV_TEST_PUBLISH_CLOUDSMITH_TOKEN: ${{ secrets.UV_TEST_PUBLISH_CLOUDSMITH_TOKEN }}\n          UV_TEST_PUBLISH_PYTHON_VERSION: ${{ env.PYTHON_VERSION }}\n\n  integration-uv-build-backend:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"integration test | uv_build\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"${{ env.PYTHON_VERSION }}\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: |\n          chmod +x ./uv\n          chmod +x ./uvx\n\n      - name: \"Test uv_build package\"\n        run: |\n          # Build the Python package, which is not covered by uv's integration tests since they can't depend on having\n          # a Python package (only the binary itself is built before running Rust's tests)\n          ./uv build -v crates/uv-build\n\n          # Test the main path (`build_wheel`) through pip\n          ./uv venv -v --seed\n          ./uv run --no-project python -m pip install -v scripts/packages/built-by-uv --find-links crates/uv-build/dist --no-index --no-deps\n          ./uv run --no-project python -c \"from built_by_uv import greet; print(greet())\"\n\n          # Test both `build_wheel` and `build_sdist` through uv\n          ./uv venv -c -v\n          ./uv build -v --force-pep517 scripts/packages/built-by-uv --find-links crates/uv-build/dist --offline\n          ./uv pip install -v scripts/packages/built-by-uv/dist/*.tar.gz --find-links crates/uv-build/dist --offline --no-deps\n          ./uv run --no-project python -c \"from built_by_uv import greet; print(greet())\"\n\n          # Test both `build_wheel` and `build_sdist` through the official `build`\n          rm -rf scripts/packages/built-by-uv/dist/\n          ./uv venv -c -v\n          ./uv pip install build\n          # Add the uv binary to PATH for `build` to find\n          PATH=\"$(pwd):$PATH\" UV_OFFLINE=1 UV_FIND_LINKS=crates/uv-build/dist ./uv run --no-project python -m build -v --installer uv scripts/packages/built-by-uv\n          ./uv pip install -v scripts/packages/built-by-uv/dist/*.tar.gz --find-links crates/uv-build/dist --offline --no-deps\n          ./uv run --no-project python -c \"from built_by_uv import greet; print(greet())\"\n\n  cache-test-ubuntu:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"check cache | ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.12\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Download binary for last version\"\n        run: curl -LsSf \"https://github.com/astral-sh/uv/releases/latest/download/uv-x86_64-unknown-linux-gnu.tar.gz\" | tar -xvz\n\n      - name: \"Check cache compatibility\"\n        run: python scripts/check_cache_compat.py --uv-current ./uv --uv-previous ./uv-x86_64-unknown-linux-gnu/uv\n\n  cache-test-macos-aarch64:\n    timeout-minutes: 10\n    needs: build-binary-macos-aarch64\n    name: \"check cache | macos aarch64\"\n    runs-on: macos-14 # github-macos-14-aarch64-3\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-macos-aarch64-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Download binary for last version\"\n        run: curl -LsSf \"https://github.com/astral-sh/uv/releases/latest/download/uv-aarch64-apple-darwin.tar.gz\" | tar -xvz\n\n      - name: \"Check cache compatibility\"\n        run: python scripts/check_cache_compat.py --uv-current ./uv --uv-previous ./uv-aarch64-apple-darwin/uv\n\n  system-test-debian:\n    timeout-minutes: 10\n    needs: build-binary-linux-musl\n    name: \"check system | python on debian\"\n    runs-on: ubuntu-latest\n    container: debian:bookworm\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Install Python\"\n        run: apt-get update && apt-get install -y python3.11 python3-pip python3.11-venv\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-musl-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3.11)\n\n      - name: \"Validate global Python install\"\n        run: python3.11 scripts/check_system_python.py --uv ./uv --externally-managed\n\n  system-test-fedora:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"check system | python on fedora\"\n    runs-on: ubuntu-latest\n    container: fedora:43\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Install Python\"\n        run: dnf install python3 which -y && python3 -m ensurepip\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      - name: \"Validate global Python install\"\n        run: python3 scripts/check_system_python.py --uv ./uv\n\n  system-test-ubuntu:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"check system | python on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.12\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python)\n\n      - name: \"Validate global Python install\"\n        run: python scripts/check_system_python.py --uv ./uv\n\n  # Currently failing, see https://github.com/astral-sh/uv/issues/13811\n  # system-test-opensuse:\n  #   timeout-minutes: 5\n  #   needs: build-binary-linux-libc\n  #   name: \"check system | python on opensuse\"\n  #   runs-on: ubuntu-latest\n  #   container: opensuse/tumbleweed\n  #   steps:\n  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n  #     - name: \"Install Python\"\n  #       run: >\n  #         until\n  #         zypper install -y python310 which && python3.10 -m ensurepip && mv /usr/bin/python3.10 /usr/bin/python3;\n  #         do sleep 10;\n  #         done\n\n  #         # We retry because `zypper` can fail during remote repository updates\n  #         # The above will not sleep forever due to the job level timeout\n\n  #     - name: \"Download binary\"\n  #       uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n  #       with:\n  #         name: uv-linux-libc-${{ github.sha }}\n\n  #     - name: \"Prepare binary\"\n  #       run: chmod +x ./uv\n\n  #     - name: \"Print Python path\"\n  #       run: echo $(which python3)\n\n  #     - name: \"Validate global Python install\"\n  #       run: python3 scripts/check_system_python.py --uv ./uv\n\n  # Note: rockylinux is a 1-1 code compatible distro to rhel\n  # rockylinux mimics centos but with added maintenance stability\n  # and avoids issues with centos stream uptime concerns\n  system-test-rocky-linux:\n    timeout-minutes: 10\n    needs: build-binary-linux-musl\n    name: \"check system | python on rocky linux ${{ matrix.rocky-version }}\"\n    runs-on: ubuntu-latest\n    container: rockylinux:${{ matrix.rocky-version }}\n    strategy:\n      fail-fast: false\n      matrix:\n        rocky-version: [\"8\", \"9\"]\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Install Python\"\n        if: matrix.rocky-version == '8'\n        run: |\n          dnf install python39 python39-pip which -y\n\n      - name: \"Install Python\"\n        if: matrix.rocky-version == '9'\n        run: |\n          dnf install python3.9 python3.9-pip which -y\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-musl-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      # Needed for building Pydantic\n      - name: \"Install build tools\"\n        run: dnf install -y gcc\n\n      - name: \"Validate global Python install\"\n        run: python3 scripts/check_system_python.py --uv ./uv\n\n  system-test-graalpy:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"check system | graalpy on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"graalpy24.1\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which graalpy)\n\n      - name: \"Validate global Python install\"\n        run: graalpy scripts/check_system_python.py --uv ./uv\n\n  system-test-pypy:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"check system | pypy on ubuntu\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"pypy3.9\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which pypy)\n\n      - name: \"Validate global Python install\"\n        run: pypy scripts/check_system_python.py --uv ./uv\n\n  system-test-pyston:\n    timeout-minutes: 10\n    needs: build-binary-linux-musl\n    name: \"check system | pyston\"\n    runs-on: ubuntu-latest\n    container: pyston/pyston:2.3.5\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-musl-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which pyston)\n\n      - name: \"Validate global Python install\"\n        run: pyston scripts/check_system_python.py --uv ./uv\n\n  system-test-alpine:\n    timeout-minutes: 10\n    needs: build-binary-linux-musl\n    name: \"check system | alpine\"\n    runs-on: ubuntu-latest\n    container: alpine:latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Install Python\"\n        run: apk add --update --no-cache python3 py3-pip\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-musl-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      - name: \"Validate global Python install\"\n        run: python3 scripts/check_system_python.py --uv ./uv --externally-managed\n\n  system-test-macos-aarch64:\n    timeout-minutes: 10\n    needs: build-binary-macos-aarch64\n    name: \"check system | python on macos aarch64\"\n    runs-on: macos-14 # github-macos-14-aarch64-3\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-macos-aarch64-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      # This should be the macOS system Python\n      # We'd like to test with Homebrew but this Python takes precedence in system Python discovery\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      - name: \"Validate global Python install\"\n        run: python3 scripts/check_system_python.py --uv ./uv --externally-managed\n\n  system-test-macos-aarch64-homebrew:\n    timeout-minutes: 10\n    needs: build-binary-macos-aarch64\n    name: \"check system | homebrew python on macos aarch64\"\n    runs-on: macos-14 # github-macos-14-aarch64-3\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Install Python\"\n        run: brew install python3\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-macos-aarch64-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      - name: \"Validate global Python install\"\n        run: python3 scripts/check_system_python.py --uv ./uv --externally-managed\n\n  system-test-macos-x86_64:\n    timeout-minutes: 10\n    needs: build-binary-macos-x86_64\n    name: \"check system | python on macos x86-64\"\n    runs-on: macos-13 # github-macos-13-x86_64-4\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      # We test with GitHub's Python as a regression test for\n      # https://github.com/astral-sh/uv/issues/2450\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-macos-x86_64-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      - name: \"Validate global Python install\"\n        run: python3 scripts/check_system_python.py --uv ./uv\n\n  system-test-windows-python-310:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"check system | python3.10 on windows x86-64\"\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.10\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Print Python path\"\n        run: echo $(which python)\n\n      - name: \"Validate global Python install\"\n        run: py -3.10 ./scripts/check_system_python.py --uv ./uv.exe\n\n  system-test-windows-x86_64-python-310:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"check system | python3.10 on windows x86\"\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.10\"\n          architecture: \"x86\"\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Print Python path\"\n        run: echo $(which python)\n\n      - name: \"Validate global Python install\"\n        run: python ./scripts/check_system_python.py --uv ./uv.exe\n\n  system-test-windows-x86_64-python-313:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"check system | python3.13 on windows x86-64\"\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.13\"\n          allow-prereleases: true\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Print Python path\"\n        run: echo $(which python)\n\n      - name: \"Validate global Python install\"\n        run: py -3.13 ./scripts/check_system_python.py --uv ./uv.exe\n\n  system-test-windows-aarch64-x86-python-313:\n    timeout-minutes: 10\n    needs: build-binary-windows-aarch64\n    name: \"check system | x86-64 python3.13 on windows aarch64\"\n    runs-on: windows-11-arm\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.13\"\n          architecture: \"x64\"\n          allow-prereleases: true\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-aarch64-${{ github.sha }}\n\n      - name: \"Validate global Python install\"\n        run: py -3.13 ./scripts/check_system_python.py --uv ./uv.exe\n\n  system-test-windows-aarch64-aarch64-python-313:\n    timeout-minutes: 10\n    needs: build-binary-windows-aarch64\n    name: \"check system | aarch64 python3.13 on windows aarch64\"\n    runs-on: windows-11-arm\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: \"3.13\"\n          architecture: \"arm64\"\n          allow-prereleases: true\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-aarch64-${{ github.sha }}\n\n      - name: \"Validate global Python install\"\n        run: py -3.13-arm64 ./scripts/check_system_python.py --uv ./uv.exe\n\n  # Test our PEP 514 integration that installs Python into the Windows registry.\n  system-test-windows-registry:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"check system | windows registry\"\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      # NB: Run this last, we are modifying the registry\n      - name: \"Test PEP 514 registration\"\n        run: python ./scripts/check_registry.py --uv ./uv.exe\n\n  system-test-choco:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"check system | python3.12 via chocolatey\"\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Install Python\"\n        run: choco install python3 --verbose --version=3.9.13\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      - name: \"Validate global Python install\"\n        run: py -3.9 ./scripts/check_system_python.py --uv ./uv.exe\n\n  system-test-pyenv:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"check system | python3.9 via pyenv\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Install pyenv\"\n        run: |\n          # Install pyenv\n          curl https://pyenv.run | bash\n\n          # Set up environment variables for current step\n          export PYENV_ROOT=\"$HOME/.pyenv\"\n          export PATH=\"$PYENV_ROOT/bin:$PATH\"\n          eval \"$(pyenv init -)\"\n\n          # Install Python 3.9\n          pyenv install 3.9\n          pyenv global 3.9\n\n          # Make environment variables persist across steps\n          echo \"PYENV_ROOT=$HOME/.pyenv\" >> $GITHUB_ENV\n          echo \"$HOME/.pyenv/bin\" >> $GITHUB_PATH\n          echo \"$HOME/.pyenv/shims\" >> $GITHUB_PATH\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3.9)\n\n      - name: \"Validate global Python install\"\n        run: python3.9 scripts/check_system_python.py --uv ./uv\n\n  system-test-linux-313:\n    timeout-minutes: 10\n    needs: build-binary-linux-libc\n    name: \"check system | python3.13\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: 3.13\n          allow-prereleases: true\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-libc-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3.13)\n\n      - name: \"Validate global Python install\"\n        run: python3.13 scripts/check_system_python.py --uv ./uv\n\n  system-test-conda:\n    timeout-minutes: 10\n    needs:\n      [\n        build-binary-windows-x86_64,\n        build-binary-macos-aarch64,\n        build-binary-linux-libc,\n      ]\n    name: check system | conda${{ matrix.python-version }} on ${{ matrix.os }} ${{ matrix.arch }}\n    runs-on: ${{ matrix.runner }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [\"linux\", \"windows\", \"macos\"]\n        python-version: [\"3.8\", \"3.11\"]\n        include:\n          - {\n              os: \"linux\",\n              target: \"linux-libc\",\n              runner: \"ubuntu-latest\",\n              arch: \"x86-64\",\n            }\n          - {\n              os: \"windows\",\n              target: \"windows-x86_64\",\n              runner: \"windows-latest\",\n              arch: \"x86-64\",\n            }\n          - {\n              os: \"macos\",\n              target: \"macos-aarch64\",\n              runner: \"macos-14\",\n              arch: \"aarch64\",\n            }\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0\n        with:\n          miniconda-version: \"latest\"\n          activate-environment: uv\n          python-version: ${{ matrix.python-version }}\n\n      - name: Conda info\n        shell: bash -el {0}\n        run: conda info\n\n      - name: Conda list\n        shell: pwsh\n        run: conda list\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-${{ matrix.target }}-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        if: ${{ matrix.os != 'windows' }}\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        shell: bash -el {0}\n        run: echo $(which python)\n\n      - name: \"Validate global Python install\"\n        shell: bash -el {0}\n        run: python ./scripts/check_system_python.py --uv ./uv\n\n  system-test-amazonlinux:\n    timeout-minutes: 10\n    needs: build-binary-linux-musl\n    name: \"check system | amazonlinux\"\n    runs-on: ubuntu-latest\n    container: amazonlinux:2023\n    steps:\n      - name: \"Install base requirements\"\n        run: |\n          # Needed for `actions/checkout`\n          yum install tar gzip which -y\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: \"Install Python\"\n        run: yum install python3 python3-pip -y\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-linux-musl-${{ github.sha }}\n\n      - name: \"Prepare binary\"\n        run: chmod +x ./uv\n\n      - name: \"Print Python path\"\n        run: echo $(which python3)\n\n      - name: Install build tools\n        run: yum install -y gcc\n\n      - name: \"Validate global Python install\"\n        run: python3 scripts/check_system_python.py --uv ./uv\n\n  system-test-windows-embedded-python-310:\n    timeout-minutes: 10\n    needs: build-binary-windows-x86_64\n    name: \"check system | embedded python3.10 on windows x86-64\"\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - name: \"Download binary\"\n        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0\n        with:\n          name: uv-windows-x86_64-${{ github.sha }}\n\n      # Download embedded Python.\n      - name: \"Download embedded Python\"\n        run: curl -LsSf https://www.python.org/ftp/python/3.11.8/python-3.11.8-embed-amd64.zip -o python-3.11.8-embed-amd64.zip\n\n      - name: \"Unzip embedded Python\"\n        run: 7z x python-3.11.8-embed-amd64.zip -oembedded-python\n\n      - name: \"Show embedded Python contents\"\n        run: ls embedded-python\n\n      - name: \"Set PATH\"\n        run: echo \"${{ github.workspace }}\\embedded-python\" >> $env:GITHUB_PATH\n\n      - name: \"Print Python path\"\n        run: echo $(which python)\n\n      - name: \"Validate embedded Python install\"\n        run: python ./scripts/check_embedded_python.py --uv ./uv.exe\n\n  benchmarks-walltime:\n    name: \"benchmarks | walltime aarch64 linux\"\n    runs-on: codspeed-macro\n    needs: determine_changes\n    if: ${{ github.repository == 'astral-sh/uv' && !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    timeout-minutes: 20\n    steps:\n      - name: \"Checkout Branch\"\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n\n      - name: \"Install Rust toolchain\"\n        run: rustup show\n\n      - name: \"Install codspeed\"\n        uses: taiki-e/install-action@a416ddeedbd372e614cc1386e8b642692f66865e # v2.57.1\n        with:\n          tool: cargo-codspeed\n\n      - name: \"Install requirements and prime cache\"\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libsasl2-dev libldap2-dev libkrb5-dev\n          cargo run --bin uv -- venv --cache-dir .cache\n          cargo run --bin uv -- pip compile scripts/requirements/jupyter.in --universal --exclude-newer 2024-08-08 --cache-dir .cache\n          cargo run --bin uv -- pip compile scripts/requirements/airflow.in --universal --exclude-newer 2024-08-08 --cache-dir .cache\n\n      - name: \"Build benchmarks\"\n        run: cargo codspeed build --profile profiling --features codspeed -p uv-bench\n\n      - name: \"Run benchmarks\"\n        uses: CodSpeedHQ/action@0b6e7a3d96c9d2a6057e7bcea6b45aaf2f7ce60b # v3.8.0\n        with:\n          run: cargo codspeed run\n          token: ${{ secrets.CODSPEED_TOKEN }}\n\n  benchmarks-instrumented:\n    name: \"benchmarks | instrumented\"\n    runs-on: ubuntu-latest\n    needs: determine_changes\n    if: ${{ github.repository == 'astral-sh/uv' && !contains(github.event.pull_request.labels.*.name, 'no-test') && (needs.determine_changes.outputs.code == 'true' || github.ref == 'refs/heads/main') }}\n    timeout-minutes: 20\n    steps:\n      - name: \"Checkout Branch\"\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n\n      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0\n\n      - name: \"Install Rust toolchain\"\n        run: rustup show\n\n      - name: \"Install codspeed\"\n        uses: taiki-e/install-action@a416ddeedbd372e614cc1386e8b642692f66865e # v2.57.1\n        with:\n          tool: cargo-codspeed\n\n      - name: \"Install requirements and prime cache\"\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libsasl2-dev libldap2-dev libkrb5-dev\n          cargo run --bin uv -- venv --cache-dir .cache\n          cargo run --bin uv -- pip compile scripts/requirements/jupyter.in --universal --exclude-newer 2024-08-08 --cache-dir .cache\n          cargo run --bin uv -- pip compile scripts/requirements/airflow.in --universal --exclude-newer 2024-08-08 --cache-dir .cache\n\n      - name: \"Build benchmarks\"\n        run: cargo codspeed build --profile profiling --features codspeed -p uv-bench\n\n      - name: \"Run benchmarks\"\n        uses: CodSpeedHQ/action@0b6e7a3d96c9d2a6057e7bcea6b45aaf2f7ce60b # v3.8.0\n        with:\n          run: cargo codspeed run\n          token: ${{ secrets.CODSPEED_TOKEN }}\n",
    "readme": "# uv\n\n[![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)\n[![image](https://img.shields.io/pypi/v/uv.svg)](https://pypi.python.org/pypi/uv)\n[![image](https://img.shields.io/pypi/l/uv.svg)](https://pypi.python.org/pypi/uv)\n[![image](https://img.shields.io/pypi/pyversions/uv.svg)](https://pypi.python.org/pypi/uv)\n[![Actions status](https://github.com/astral-sh/uv/actions/workflows/ci.yml/badge.svg)](https://github.com/astral-sh/uv/actions)\n[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&logoColor=white)](https://discord.gg/astral-sh)\n\nAn extremely fast Python package and project manager, written in Rust.\n\n<p align=\"center\">\n  <picture align=\"center\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d\">\n    <img alt=\"Shows a bar chart with benchmark results.\" src=\"https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d\">\n  </picture>\n</p>\n\n<p align=\"center\">\n  <i>Installing <a href=\"https://trio.readthedocs.io/\">Trio</a>'s dependencies with a warm cache.</i>\n</p>\n\n## Highlights\n\n- \ud83d\ude80 A single tool to replace `pip`, `pip-tools`, `pipx`, `poetry`, `pyenv`, `twine`, `virtualenv`,\n  and more.\n- \u26a1\ufe0f [10-100x faster](https://github.com/astral-sh/uv/blob/main/BENCHMARKS.md) than `pip`.\n- \ud83d\uddc2\ufe0f Provides [comprehensive project management](#projects), with a\n  [universal lockfile](https://docs.astral.sh/uv/concepts/projects/layout#the-lockfile).\n- \u2747\ufe0f [Runs scripts](#scripts), with support for\n  [inline dependency metadata](https://docs.astral.sh/uv/guides/scripts#declaring-script-dependencies).\n- \ud83d\udc0d [Installs and manages](#python-versions) Python versions.\n- \ud83d\udee0\ufe0f [Runs and installs](#tools) tools published as Python packages.\n- \ud83d\udd29 Includes a [pip-compatible interface](#the-pip-interface) for a performance boost with a\n  familiar CLI.\n- \ud83c\udfe2 Supports Cargo-style [workspaces](https://docs.astral.sh/uv/concepts/projects/workspaces) for\n  scalable projects.\n- \ud83d\udcbe Disk-space efficient, with a [global cache](https://docs.astral.sh/uv/concepts/cache) for\n  dependency deduplication.\n- \u23ec Installable without Rust or Python via `curl` or `pip`.\n- \ud83d\udda5\ufe0f Supports macOS, Linux, and Windows.\n\nuv is backed by [Astral](https://astral.sh), the creators of\n[Ruff](https://github.com/astral-sh/ruff).\n\n## Installation\n\nInstall uv with our standalone installers:\n\n```bash\n# On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n```bash\n# On Windows.\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nOr, from [PyPI](https://pypi.org/project/uv/):\n\n```bash\n# With pip.\npip install uv\n```\n\n```bash\n# Or pipx.\npipx install uv\n```\n\nIf installed via the standalone installer, uv can update itself to the latest version:\n\n```bash\nuv self update\n```\n\nSee the [installation documentation](https://docs.astral.sh/uv/getting-started/installation/) for\ndetails and alternative installation methods.\n\n## Documentation\n\nuv's documentation is available at [docs.astral.sh/uv](https://docs.astral.sh/uv).\n\nAdditionally, the command line reference documentation can be viewed with `uv help`.\n\n## Features\n\n### Projects\n\nuv manages project dependencies and environments, with support for lockfiles, workspaces, and more,\nsimilar to `rye` or `poetry`:\n\n```console\n$ uv init example\nInitialized project `example` at `/home/user/example`\n\n$ cd example\n\n$ uv add ruff\nCreating virtual environment at: .venv\nResolved 2 packages in 170ms\n   Built example @ file:///home/user/example\nPrepared 2 packages in 627ms\nInstalled 2 packages in 1ms\n + example==0.1.0 (from file:///home/user/example)\n + ruff==0.5.0\n\n$ uv run ruff check\nAll checks passed!\n\n$ uv lock\nResolved 2 packages in 0.33ms\n\n$ uv sync\nResolved 2 packages in 0.70ms\nAudited 1 package in 0.02ms\n```\n\nSee the [project documentation](https://docs.astral.sh/uv/guides/projects/) to get started.\n\nuv also supports building and publishing projects, even if they're not managed with uv. See the\n[publish guide](https://docs.astral.sh/uv/guides/publish/) to learn more.\n\n### Scripts\n\nuv manages dependencies and environments for single-file scripts.\n\nCreate a new script and add inline metadata declaring its dependencies:\n\n```console\n$ echo 'import requests; print(requests.get(\"https://astral.sh\"))' > example.py\n\n$ uv add --script example.py requests\nUpdated `example.py`\n```\n\nThen, run the script in an isolated virtual environment:\n\n```console\n$ uv run example.py\nReading inline script metadata from: example.py\nInstalled 5 packages in 12ms\n<Response [200]>\n```\n\nSee the [scripts documentation](https://docs.astral.sh/uv/guides/scripts/) to get started.\n\n### Tools\n\nuv executes and installs command-line tools provided by Python packages, similar to `pipx`.\n\nRun a tool in an ephemeral environment using `uvx` (an alias for `uv tool run`):\n\n```console\n$ uvx pycowsay 'hello world!'\nResolved 1 package in 167ms\nInstalled 1 package in 9ms\n + pycowsay==0.0.0.2\n  \"\"\"\n\n  ------------\n< hello world! >\n  ------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n```\n\nInstall a tool with `uv tool install`:\n\n```console\n$ uv tool install ruff\nResolved 1 package in 6ms\nInstalled 1 package in 2ms\n + ruff==0.5.0\nInstalled 1 executable: ruff\n\n$ ruff --version\nruff 0.5.0\n```\n\nSee the [tools documentation](https://docs.astral.sh/uv/guides/tools/) to get started.\n\n### Python versions\n\nuv installs Python and allows quickly switching between versions.\n\nInstall multiple Python versions:\n\n```console\n$ uv python install 3.10 3.11 3.12\nSearching for Python versions matching: Python 3.10\nSearching for Python versions matching: Python 3.11\nSearching for Python versions matching: Python 3.12\nInstalled 3 versions in 3.42s\n + cpython-3.10.14-macos-aarch64-none\n + cpython-3.11.9-macos-aarch64-none\n + cpython-3.12.4-macos-aarch64-none\n```\n\nDownload Python versions as needed:\n\n```console\n$ uv venv --python 3.12.0\nUsing Python 3.12.0\nCreating virtual environment at: .venv\nActivate with: source .venv/bin/activate\n\n$ uv run --python pypy@3.8 -- python --version\nPython 3.8.16 (a9dbdca6fc3286b0addd2240f11d97d8e8de187a, Dec 29 2022, 11:45:30)\n[PyPy 7.3.11 with GCC Apple LLVM 13.1.6 (clang-1316.0.21.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>>\n```\n\nUse a specific Python version in the current directory:\n\n```console\n$ uv python pin 3.11\nPinned `.python-version` to `3.11`\n```\n\nSee the [Python installation documentation](https://docs.astral.sh/uv/guides/install-python/) to get\nstarted.\n\n### The pip interface\n\nuv provides a drop-in replacement for common `pip`, `pip-tools`, and `virtualenv` commands.\n\nuv extends their interfaces with advanced features, such as dependency version overrides,\nplatform-independent resolutions, reproducible resolutions, alternative resolution strategies, and\nmore.\n\nMigrate to uv without changing your existing workflows \u2014 and experience a 10-100x speedup \u2014 with the\n`uv pip` interface.\n\nCompile requirements into a platform-independent requirements file:\n\n```console\n$ uv pip compile docs/requirements.in \\\n   --universal \\\n   --output-file docs/requirements.txt\nResolved 43 packages in 12ms\n```\n\nCreate a virtual environment:\n\n```console\n$ uv venv\nUsing Python 3.12.3\nCreating virtual environment at: .venv\nActivate with: source .venv/bin/activate\n```\n\nInstall the locked requirements:\n\n```console\n$ uv pip sync docs/requirements.txt\nResolved 43 packages in 11ms\nInstalled 43 packages in 208ms\n + babel==2.15.0\n + black==24.4.2\n + certifi==2024.7.4\n ...\n```\n\nSee the [pip interface documentation](https://docs.astral.sh/uv/pip/index/) to get started.\n\n## Platform support\n\nSee uv's [platform support](https://docs.astral.sh/uv/reference/platforms/) document.\n\n## Versioning policy\n\nSee uv's [versioning policy](https://docs.astral.sh/uv/reference/versioning/) document.\n\n## Contributing\n\nWe are passionate about supporting contributors of all levels of experience and would love to see\nyou get involved in the project. See the\n[contributing guide](https://github.com/astral-sh/uv/blob/main/CONTRIBUTING.md) to get started.\n\n## FAQ\n\n#### How do you pronounce uv?\n\nIt's pronounced as \"you - vee\" ([`/ju\u02d0 vi\u02d0/`](https://en.wikipedia.org/wiki/Help:IPA/English#Key))\n\n#### How should I stylize uv?\n\nJust \"uv\", please. See the [style guide](./STYLE.md#styling-uv) for details.\n\n## Acknowledgements\n\nuv's dependency resolver uses [PubGrub](https://github.com/pubgrub-rs/pubgrub) under the hood. We're\ngrateful to the PubGrub maintainers, especially [Jacob Finkelman](https://github.com/Eh2406), for\ntheir support.\n\nuv's Git implementation is based on [Cargo](https://github.com/rust-lang/cargo).\n\nSome of uv's optimizations are inspired by the great work we've seen in [pnpm](https://pnpm.io/),\n[Orogene](https://github.com/orogene/orogene), and [Bun](https://github.com/oven-sh/bun). We've also\nlearned a lot from Nathaniel J. Smith's [Posy](https://github.com/njsmith/posy) and adapted its\n[trampoline](https://github.com/njsmith/posy/tree/main/src/trampolines/windows-trampolines/posy-trampoline)\nfor Windows support.\n\n## License\n\nuv is licensed under either of\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n  <https://www.apache.org/licenses/LICENSE-2.0>)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\nat your option.\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv\nby you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any\nadditional terms or conditions.\n\n<div align=\"center\">\n  <a target=\"_blank\" href=\"https://astral.sh\" style=\"background:none\">\n    <img src=\"https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg\" alt=\"Made by Astral\">\n  </a>\n</div>\n",
    "org": "astral-sh",
    "repo": "uv",
    "number": 14972,
    "commit": "d867f3e595189441a80f02b013ab09e571e12f35"
}