{
    "primary_language": "C",
    "language_guidelines": "# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\nname: 'Build (All)'\n\non: [push, pull_request]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  controller:\n    name: 'Create test plan'\n    runs-on: 'ubuntu-latest'\n    outputs:\n      platforms-level1: ${{ steps.plan.outputs.platforms-level1 }}\n      platforms-others: ${{ steps.plan.outputs.platforms-others }}\n    steps:\n      - uses: actions/setup-python@main\n        with:\n          python-version: 3.x\n      - uses: actions/checkout@main\n        with:\n          sparse-checkout: '.github/workflows/create-test-plan.py'\n      - name: 'Create plan'\n        id: plan\n        run: |\n          # Adding [sdl-ci-filter GLOB] to the commit message will limit the jobs\n          # e.g. [sdl-ci-filter msvc-*]\n          EOF=$(openssl rand -hex 32)\n          cat >/tmp/commit_message.txt <<$EOF\n          ${{ github.event.head_commit.message }}\n          $EOF\n\n          python .github/workflows/create-test-plan.py \\\n            --github-variable-prefix platforms \\\n            --github-ci \\\n            --verbose \\\n            ${{ (github.repository_owner != 'libsdl-org' && '--no-artifact') || '' }} \\\n            --commit-message-file /tmp/commit_message.txt\n  level1:\n    needs: [controller]\n    uses: './.github/workflows/generic.yml'\n    with:\n      platforms: ${{ needs.controller.outputs.platforms-level1 }}\n  level2:\n    needs: [controller, level1]\n    uses: './.github/workflows/generic.yml'\n    with:\n      platforms: ${{ needs.controller.outputs.platforms-others }}\n",
    "readme": "\nSimple DirectMedia Layer (SDL for short) is a cross-platform library\ndesigned to make it easy to write multi-media software, such as games\nand emulators.\n\nYou can find the latest release and additional documentation at:\nhttps://www.libsdl.org/\n\nInstallation instructions and a quick introduction is available in\n[INSTALL.md](INSTALL.md)\n\nThis library is distributed under the terms of the zlib license,\navailable in [LICENSE.txt](LICENSE.txt).\n\nEnjoy!\n\nSam Lantinga (slouken@libsdl.org)\n"
}