{
    "primary_language": "TypeScript",
    "language_guidelines": "",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: test.yaml\nContent:\nname: CI\non: [push, pull_request]\n\njobs:\n  changes:\n    name: Check for changes\n    runs-on: ubuntu-latest\n    outputs:\n      src: ${{ steps.filter.outputs.src }}\n    steps:\n      - uses: actions/checkout@v2\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            src:\n              - 'src/**'\n              - 'test/**'\n              - '.github/**/*.yaml'\n              - 'tsup.config.ts'\n\n  build:\n    needs: changes\n    if: ${{ needs.changes.outputs.src == 'true' }}\n\n    name: Lint, Test, Build & Pack on Node ${{ matrix.node }}\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node: ['16.x']\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Use node ${{ matrix.node }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n\n      - name: Install deps\n        run: yarn install\n\n      - name: Build\n        run: yarn build\n\n      - name: Pack\n        run: yarn pack\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: package\n          path: ./package.tgz\n\n  test-dist:\n    name: Test against dist\n    needs: [build]\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        node: ['16.x']\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Use node ${{ matrix.node }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n\n      - name: Install deps\n        run: yarn install\n\n      - uses: actions/download-artifact@v2\n        with:\n          name: package\n          path: .\n\n      - run: ls -lah\n\n      - name: Install build artifact\n        run: yarn  add ./package.tgz\n\n      - run: sed -i -e /@remap-prod-remove-line/d ./tsconfig.json ./vitest.config.ts ./test/tsconfig.json ./test/typescript/tsconfig.json\n\n      - name: Run tests, against dist\n        run: yarn test\n\n  test-types:\n    name: Test Types with TypeScript ${{ matrix.ts }}\n\n    needs: [build]\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        node: ['16.x']\n        ts: ['4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9.2-rc']\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Use node ${{ matrix.node }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n\n      - name: Install deps\n        run: yarn install\n\n      - name: Install TypeScript ${{ matrix.ts }}\n        run: yarn add typescript@${{ matrix.ts }}\n\n      - uses: actions/download-artifact@v2\n        with:\n          name: package\n          path: .\n\n      - name: Install build artifact\n        run: yarn add ./package.tgz\n\n      - name: Test types\n        run: |\n          yarn tsc --version\n          yarn check-types\n          yarn test:types\n\n  test-published-artifact:\n    name: Test Published Artifact ${{ matrix.example }}\n\n    needs: [build]\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        node: ['16.x']\n        example:\n          [\n            'cra4',\n            'cra5',\n            'next',\n            'vite',\n            'node-standard',\n            'node-esm',\n            'are-the-types-wrong'\n          ]\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Use node ${{ matrix.node }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n\n      - name: Clone RTK repo\n        run: git clone https://github.com/reduxjs/redux-toolkit.git ./redux-toolkit\n\n      - name: Check folder contents\n        run: ls -l .\n\n      - name: Install deps\n        working-directory: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n        run: yarn install\n\n      - uses: actions/download-artifact@v2\n        with:\n          name: package\n          path: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n\n      - name: Check folder contents\n        working-directory: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n        run: ls -l .\n\n      - name: Install build artifact\n        working-directory: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n        run: yarn add ./package.tgz\n\n      - name: Show installed package versions\n        working-directory: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n        run: yarn info redux && yarn why redux\n\n      - name: Build example\n        working-directory: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n        run: yarn build\n\n      - name: Run test step\n        working-directory: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n        run: yarn test\n        if: matrix.example != 'are-the-types-wrong'\n\n      - name: Run test step\n        working-directory: ./redux-toolkit/examples/publish-ci/${{ matrix.example }}\n        # Ignore \"FalseCJS\" errors in the `attw` job\n        run: yarn test -n FalseCJS\n        if: matrix.example == 'are-the-types-wrong'\n",
    "readme": "# <a href='https://redux.js.org'><img src='https://camo.githubusercontent.com/f28b5bc7822f1b7bb28a96d8d09e7d79169248fc/687474703a2f2f692e696d6775722e636f6d2f4a65567164514d2e706e67' height='60' alt='Redux Logo' aria-label='redux.js.org' /></a>\n\nRedux is a predictable state container for JavaScript apps.\n(Not to be confused with a WordPress framework \u2013\u00a0[Redux Framework](https://redux.io))\n\nIt helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as [live code editing combined with a time traveling debugger](https://github.com/reduxjs/redux-devtools).\n\nYou can use Redux together with [React](https://reactjs.org), or with any other view library.\nIt is tiny (2kB, including dependencies), and has a rich ecosystem of addons.\n\n![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/reduxjs/redux/test.yaml?branch=master&event=push&style=flat-square)\n[![npm version](https://img.shields.io/npm/v/redux.svg?style=flat-square)](https://www.npmjs.com/package/redux)\n[![npm downloads](https://img.shields.io/npm/dm/redux.svg?style=flat-square)](https://www.npmjs.com/package/redux)\n[![redux channel on discord](https://img.shields.io/badge/discord-%23redux%20%40%20reactiflux-61dafb.svg?style=flat-square)](https://discord.gg/0ZcbPKXt5bZ6au5t)\n[![Changelog #187](https://img.shields.io/badge/changelog-%23187-lightgrey.svg?style=flat-square)](https://changelog.com/187)\n\n## Installation\n\n[**Redux Toolkit**](https://redux-toolkit.js.org) is our official recommended approach for writing Redux logic. It wraps around the Redux core, and contains packages and functions that we think are essential for building a Redux app. Redux Toolkit builds in our suggested best practices, simplifies most Redux tasks, prevents common mistakes, and makes it easier to write Redux applications.\n\n```\nnpm install @reduxjs/toolkit react-redux\n```\n\nFor the Redux core library by itself:\n\n```\nnpm install redux\n```\n\nFor more details, see [the Installation docs page](https://redux.js.org/introduction/installation).\n\n## Documentation\n\nThe Redux docs are located at **https://redux.js.org**:\n\n- [Introduction](https://redux.js.org/introduction/getting-started)\n- [Tutorials](https://redux.js.org/tutorials/index)\n- [Usage Guides](https://redux.js.org/usage/index)\n- [FAQ](https://redux.js.org/faq)\n- [API Reference](https://redux.js.org/api/api-reference)\n\n## Learn Redux\n\n### Redux Essentials Tutorial\n\nThe [**Redux Essentials tutorial**](https://redux.js.org/tutorials/essentials/part-1-overview-concepts) is a \"top-down\" tutorial that teaches \"how to use Redux the right way\", using our latest recommended APIs and best practices. We recommend starting there.\n\n### Redux Fundamentals Tutorial\n\nThe [**Redux Fundamentals tutorial**](https://redux.js.org/tutorials/fundamentals/part-1-overview) is a \"bottom-up\" tutorial that teaches \"how Redux works\" from first principles and without any abstractions, and why standard Redux usage patterns exist.\n\n### Additional Tutorials\n\n- The Redux repository contains several example projects demonstrating various aspects of how to use Redux. Almost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online. See the complete list of examples in the **[Examples page](https://redux.js.org/introduction/examples)**.\n- Redux creator Dan Abramov's **free [\"Getting Started with Redux\" video series](https://app.egghead.io/playlists/fundamentals-of-redux-course-from-dan-abramov-bd5cc867)** and **[Building React Applications with Idiomatic Redux](https://egghead.io/courses/building-react-applications-with-idiomatic-redux)** video courses on Egghead.io\n- Redux maintainer Mark Erikson's **[\"Redux Fundamentals\" conference talk](https://blog.isquaredsoftware.com/2018/03/presentation-reactathon-redux-fundamentals/)** and [**\"Redux Fundamentals\" workshop slides**](https://blog.isquaredsoftware.com/2018/06/redux-fundamentals-workshop-slides/)\n- Dave Ceddia's post [**A Complete React Redux Tutorial for Beginners**](https://daveceddia.com/redux-tutorial/)\n\n### Other Resources\n\n- The **[Redux FAQ](https://redux.js.org/faq)** answers many common questions about how to use Redux, and the **[\"Using Redux\" docs section](https://redux.js.org/usage/index)** has information on handling derived data, testing, structuring reducer logic, and reducing boilerplate.\n- Redux maintainer Mark Erikson's **[\"Practical Redux\" tutorial series](https://blog.isquaredsoftware.com/series/practical-redux/)** demonstrates real-world intermediate and advanced techniques for working with React and Redux (also available as **[an interactive course on Educative.io](https://www.educative.io/collection/5687753853370368/5707702298738688)**).\n- The **[React/Redux links list](https://github.com/markerikson/react-redux-links)** has categorized articles on working with [reducers and selectors](https://github.com/markerikson/react-redux-links/blob/master/redux-reducers-selectors.md), [managing side effects](https://github.com/markerikson/react-redux-links/blob/master/redux-side-effects.md), [Redux architecture and best practices](https://github.com/markerikson/react-redux-links/blob/master/redux-architecture.md), and more.\n- Our community has created thousands of Redux-related libraries, addons, and tools. The **[\"Ecosystem\" docs page](https://redux.js.org/introduction/ecosystem)** lists our recommendations, and also there's a complete listing available in the **[Redux addons catalog](https://github.com/markerikson/redux-ecosystem-links)**.\n\n### Help and Discussion\n\nThe **[#redux channel](https://discord.gg/0ZcbPKXt5bZ6au5t)** of the **[Reactiflux Discord community](https://www.reactiflux.com)** is our official resource for all questions related to learning and using Redux. Reactiflux is a great place to hang out, ask questions, and learn - please come and join us there!\n\n## Before Proceeding Further\n\nRedux is a valuable tool for organizing your state, but you should also consider whether it's appropriate for your situation. Please don't use Redux just because someone said you should - instead, please take some time to understand the potential benefits and tradeoffs of using it.\n\nHere are some suggestions on when it makes sense to use Redux:\n\n- You have reasonable amounts of data changing over time\n- You need a single source of truth for your state\n- You find that keeping all your state in a top-level component is no longer sufficient\n\nYes, these guidelines are subjective and vague, but this is for a good reason. The point at which you should integrate Redux into your application is different for every user and different for every application.\n\n> **For more thoughts on how Redux is meant to be used, please see:**<br>\n>\n> - **[When (and when not) to reach for Redux](https://changelog.com/posts/when-and-when-not-to-reach-for-redux)**\n> - **[You Might Not Need Redux](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367)**<br>\n> - **[The Tao of Redux, Part 1 - Implementation and Intent](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/)**<br>\n> - **[The Tao of Redux, Part 2 - Practice and Philosophy](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/)**\n> - **[Redux FAQ](https://redux.js.org/faq)**\n\n## Developer Experience\n\nDan Abramov (author of Redux) wrote Redux while working on his React Europe talk called [\u201cHot Reloading with Time Travel\u201d](https://www.youtube.com/watch?v=xsSnOQynTHs). His goal was to create a state management library with a minimal API but completely predictable behavior. Redux makes it possible to implement logging, hot reloading, time travel, universal apps, record and replay, without any buy-in from the developer.\n\n## Influences\n\nRedux evolves the ideas of [Flux](https://facebook.github.io/flux/), but avoids its complexity by taking cues from [Elm](https://github.com/evancz/elm-architecture-tutorial/).\nEven if you haven't used Flux or Elm, Redux only takes a few minutes to get started with.\n\n## Basic Example\n\nThe whole global state of your app is stored in an object tree inside a single _store_.\nThe only way to change the state tree is to create an _action_, an object describing what happened, and _dispatch_ it to the store.\nTo specify how state gets updated in response to an action, you write pure _reducer_ functions that calculate a new state based on the old state and the action.\n\n```js\nimport { createStore } from 'redux'\n\n/**\n * This is a reducer - a function that takes a current state value and an\n * action object describing \"what happened\", and returns a new state value.\n * A reducer's function signature is: (state, action) => newState\n *\n * The Redux state should contain only plain JS objects, arrays, and primitives.\n * The root state value is usually an object.  It's important that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * You can use any conditional logic you want in a reducer. In this example,\n * we use a switch statement, but it's not required.\n */\nfunction counterReducer(state = { value: 0 }, action) {\n  switch (action.type) {\n    case 'counter/incremented':\n      return { value: state.value + 1 }\n    case 'counter/decremented':\n      return { value: state.value - 1 }\n    default:\n      return state\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nlet store = createStore(counterReducer)\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\nstore.subscribe(() => console.log(store.getState()))\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\nstore.dispatch({ type: 'counter/incremented' })\n// {value: 1}\nstore.dispatch({ type: 'counter/incremented' })\n// {value: 2}\nstore.dispatch({ type: 'counter/decremented' })\n// {value: 1}\n```\n\nInstead of mutating the state directly, you specify the mutations you want to happen with plain objects called _actions_. Then you write a special function called a _reducer_ to decide how every action transforms the entire application's state.\n\nIn a typical Redux app, there is just a single store with a single root reducing function. As your app grows, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. This is exactly like how there is just one root component in a React app, but it is composed out of many small components.\n\nThis architecture might seem like a lot for a counter app, but the beauty of this pattern is how well it scales to large and complex apps. It also enables very powerful developer tools, because it is possible to trace every mutation to the action that caused it. You can record user sessions and reproduce them just by replaying every action.\n\n### Redux Toolkit Example\n\nRedux Toolkit simplifies the process of writing Redux logic and setting up the store. With Redux Toolkit, that same logic looks like:\n\n```js\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nexport const { incremented, decremented } = counterSlice.actions\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n})\n\n// Can still subscribe to the store\nstore.subscribe(() => console.log(store.getState()))\n\n// Still pass action objects to `dispatch`, but they're created for us\nstore.dispatch(incremented())\n// {value: 1}\nstore.dispatch(incremented())\n// {value: 2}\nstore.dispatch(decremented())\n// {value: 1}\n```\n\nRedux Toolkit allows us to write shorter logic that's easier to read, while still following the same Redux behavior and data flow.\n\n## Examples\n\nAlmost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online.\n\n- [**Counter Vanilla**](https://redux.js.org/introduction/examples#counter-vanilla): [Source](https://github.com/reduxjs/redux/tree/master/examples/counter-vanilla)\n- [**Counter**](https://redux.js.org/introduction/examples#counter): [Source](https://github.com/reduxjs/redux/tree/master/examples/counter) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/counter)\n- [**Todos**](https://redux.js.org/introduction/examples#todos): [Source](https://github.com/reduxjs/redux/tree/master/examples/todos) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todos)\n- [**Todos with Undo**](https://redux.js.org/introduction/examples#todos-with-undo): [Source](https://github.com/reduxjs/redux/tree/master/examples/todos-with-undo) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todos-with-undo)\n- [**TodoMVC**](https://redux.js.org/introduction/examples#todomvc): [Source](https://github.com/reduxjs/redux/tree/master/examples/todomvc) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todomvc)\n- [**Shopping Cart**](https://redux.js.org/introduction/examples#shopping-cart): [Source](https://github.com/reduxjs/redux/tree/master/examples/shopping-cart) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/shopping-cart)\n- [**Tree View**](https://redux.js.org/introduction/examples#tree-view): [Source](https://github.com/reduxjs/redux/tree/master/examples/tree-view) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/tree-view)\n- [**Async**](https://redux.js.org/introduction/examples#async): [Source](https://github.com/reduxjs/redux/tree/master/examples/async) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/async)\n- [**Universal**](https://redux.js.org/introduction/examples#universal): [Source](https://github.com/reduxjs/redux/tree/master/examples/universal)\n- [**Real World**](https://redux.js.org/introduction/examples#real-world): [Source](https://github.com/reduxjs/redux/tree/master/examples/real-world) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/real-world)\n\n## Testimonials\n\n> [\u201cLove what you're doing with Redux\u201d](https://twitter.com/jingc/status/616608251463909376)\n> Jing Chen, creator of Flux\n\n> [\u201cI asked for comments on Redux in FB's internal JS discussion group, and it was universally praised. Really awesome work.\u201d](https://twitter.com/fisherwebdev/status/616286955693682688)\n> Bill Fisher, author of Flux documentation\n\n> [\u201cIt's cool that you are inventing a better Flux by not doing Flux at all.\u201d](https://twitter.com/andrestaltz/status/616271392930201604)\n> Andr\u00e9 Staltz, creator of Cycle\n\n## Thanks\n\n- [The Elm Architecture](https://github.com/evancz/elm-architecture-tutorial) for a great intro to modeling state updates with reducers;\n- [Turning the database inside-out](https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/) for blowing my mind;\n- [Developing ClojureScript with Figwheel](https://www.youtube.com/watch?v=j-kj2qwJa_E) for convincing me that re-evaluation should \u201cjust work\u201d;\n- [Webpack](https://webpack.js.org/concepts/hot-module-replacement/) for Hot Module Replacement;\n- [Flummox](https://github.com/acdlite/flummox) for teaching me to approach Flux without boilerplate or singletons;\n- [disto](https://github.com/threepointone/disto) for a proof of concept of hot reloadable Stores;\n- [NuclearJS](https://github.com/optimizely/nuclear-js) for proving this architecture can be performant;\n- [Om](https://github.com/omcljs/om) for popularizing the idea of a single state atom;\n- [Cycle](https://github.com/cyclejs/cycle-core) for showing how often a function is the best tool;\n- [React](https://github.com/facebook/react) for the pragmatic innovation.\n\nSpecial thanks to [Jamie Paton](https://jdpaton.github.io) for handing over the `redux` NPM package name.\n\n## Logo\n\nYou can find the official logo [on GitHub](https://github.com/reduxjs/redux/tree/master/logo).\n\n## Change Log\n\nThis project adheres to [Semantic Versioning](https://semver.org/).\nEvery release, along with the migration instructions, is documented on the GitHub [Releases](https://github.com/reduxjs/redux/releases) page.\n\n## Patrons\n\nThe work on Redux was [funded by the community](https://www.patreon.com/reactdx).\nMeet some of the outstanding companies that made it possible:\n\n- [Webflow](https://github.com/webflow)\n- [Ximedes](https://www.ximedes.com/)\n\n[See the full list of Redux patrons](PATRONS.md), as well as the always-growing list of [people and companies that use Redux](https://github.com/reduxjs/redux/issues/310).\n\n## License\n\n[MIT](LICENSE.md)\n",
    "org": "reduxjs",
    "repo": "redux",
    "number": 4519,
    "commit": "461b0932cf66112105df862d7c018e7488f9f486"
}