{
    "primary_language": "PHP",
    "language_guidelines": "Programming Language guidelines for PHP:\n# General Guidelines:\n**General Guidelines for PHP Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, PHP version requirements, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `composer.json` file. Ensure you have the required PHP version and any extensions installed. Check for system requirements and PHP modules needed.  \n\n3. **PHP Installation**  \n   Ensure you have PHP installed with the required version. Verify installation:  \n   ```sh\n   php --version  \n   ```  \n   For Ubuntu/Debian systems, you can install PHP:  \n   ```sh\n   sudo apt update  \n   sudo apt install php php-cli php-common  \n   ```  \n\n4. **Composer Installation**  \n   Most modern PHP projects use Composer for dependency management. Install Composer if not already available:  \n   ```sh\n   curl -sS https://getcomposer.org/installer | php  \n   sudo mv composer.phar /usr/local/bin/composer  \n   ```  \n   Verify installation:  \n   ```sh\n   composer --version  \n   ```  \n\n5. **Install Dependencies**  \n   Use Composer to install project dependencies:  \n   ```sh\n   composer install  \n   ```  \n   For production environment:  \n   ```sh\n   composer install --no-dev --optimize-autoloader  \n   ```  \n\n6. **Autoloading**  \n   Ensure the autoloader is properly set up. Most projects using Composer will have:  \n   ```php\n   require_once 'vendor/autoload.php';  \n   ```  \n\n7. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.php`, database configuration) and set them up accordingly. Look for example configuration files like `.env.example`.  \n\n8. **Database Setup**  \n   If the project uses a database, set up the database connection and run any migrations:  \n   ```sh\n   php artisan migrate  # For Laravel projects  \n   ```  \n   Or check for SQL files in the project that need to be imported.  \n\n9. **Web Server Setup**  \n   For web applications, you can use PHP's built-in server for development:  \n   ```sh\n   php -S localhost:8000  \n   ```  \n   Or for specific document root:  \n   ```sh\n   php -S localhost:8000 -t public/  \n   ```  \n   For production, configure Apache/Nginx as described in the project documentation.  \n\n10. **Run Tests (if available)**  \n    If the project provides tests, run them to ensure everything is working correctly. Common test commands include:  \n    ```sh\n    ./vendor/bin/phpunit  \n    ```  \n    Or if using Composer scripts:  \n    ```sh\n    composer test  \n    ```  \n\n11. **Code Quality Tools**  \n    Use code quality tools if available in the project:  \n    - PHP CodeSniffer for coding standards:  \n      ```sh\n      ./vendor/bin/phpcs  \n      ```  \n    - PHP Stan for static analysis:  \n      ```sh\n      ./vendor/bin/phpstan analyse  \n      ```  \n    - PHP CS Fixer for code formatting:  \n      ```sh\n      ./vendor/bin/php-cs-fixer fix  \n      ```  \n\n12. **Run the Project**  \n    Follow the instructions in the README to run the project. This could involve:  \n    - Starting a web server  \n    - Running specific PHP scripts  \n    - Using framework-specific commands (e.g., `php artisan serve` for Laravel)  \n\n13. **Common PHP Extensions**  \n    Install commonly required PHP extensions if missing:  \n    ```sh\n    sudo apt install php-mysql php-pgsql php-sqlite3 php-curl php-json php-mbstring php-xml php-zip  \n    ```  \n\n14. **Memory and Execution Limits**  \n    Some projects may require adjusting PHP settings. Check `php.ini` for:  \n    - `memory_limit`  \n    - `max_execution_time`  \n    - `upload_max_filesize`  \n\n15. **Troubleshooting**  \n    If you encounter issues during installation or while running the project:  \n    - Check PHP error logs  \n    - Verify all required PHP extensions are installed  \n    - Ensure proper file permissions  \n    - Refer to the project's issue tracker on GitHub  \n\n16. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  \n\n17. **Framework-Specific Commands**  \n    Be aware of framework-specific tools and commands:  \n    - Laravel: `php artisan`  \n    - Symfony: `php bin/console`  \n    - CakePHP: `bin/cake`  \n    - CodeIgniter: framework-specific setup instructions  \n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: check-pr-maintainer-access.yml\nContent:\nname: check-pr-maintainer-access\n\non:\n  pull_request_target:\n    types:\n      - opened\n\npermissions:\n  pull-requests: write\n\njobs:\n  notify-when-maintainers-cannot-edit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/github-script@v3\n        with:\n          script: |\n            const query = `\n                query($number: Int!) {\n                    repository(owner: \"filamentphp\", name: \"filament\") {\n                        pullRequest(number: $number) {\n                            headRepositoryOwner {\n                                login\n                            }\n                            maintainerCanModify\n                        }\n                    }\n                }\n            `\n\n            const pullNumber = context.issue.number\n            const variables = { number: pullNumber }\n\n            try {\n                console.log(`Check #${pullNumber} for maintainer edit access...`)\n                const result = await github.graphql(query, variables)\n\n                console.log(JSON.stringify(result, null, 2))\n\n                const pullRequest = result.repository.pullRequest\n\n                if (pullRequest.headRepositoryOwner.login === 'filamentphp') {\n                    console.log('PR owned by filamentphp')\n\n                    return\n                }\n\n                if (! pullRequest.maintainerCanModify) {\n                    console.log('PR not owned by filamentphp and does not have maintainer edits enabled')\n\n                    await github.issues.createComment({\n                        issue_number: pullNumber,\n                        owner: 'filamentphp',\n                        repo: 'filament',\n                        body: 'Thanks for submitting a PR!\\n\\nIn order to review and merge PRs most efficiently, we require that all PRs grant maintainer edit access before we review them. If your fork belongs to a GitHub organization, please move the repository to your personal account and try again. If you\\'re already using a personal fork, you can learn how to enable maintainer access [in the GitHub documentation](https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/allowing-changes-to-a-pull-request-branch-created-from-a-fork).'\n                    })\n\n                    await github.issues.update({\n                        issue_number: pullNumber,\n                        owner: 'filamentphp',\n                        repo: context.repo.repo,\n                        state: 'closed'\n                    })\n                }\n            } catch(error) {\n                console.log(error)\n            }\n\nfile: npm-build.yml\nContent:\nname: npm-build\n\non:\n  pull_request:\n    branches:\n      - 3.x\n    types:\n      - closed\n\njobs:\n  npm-build:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == true\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: 3.x\n      - name: Setup Node\n        uses: actions/setup-node@v2\n      - name: Install dependencies\n        run: npm ci\n      - name: Build assets\n        run: npm run build\n      - name: Pull changes\n        run: git pull\n      - name: Commit changes\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          branch: 3.x\n          commit_message: >\n            chore: build assets\n\nfile: tests.yml\nContent:\nname: tests\n\non:\n  push:\n  pull_request:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        php: [8.3, 8.2, 8.1]\n        laravel: [12.*, 11.*, 10.*]\n        dependency-version: [prefer-stable]\n        include:\n          - laravel: 12.*\n            testbench: 10.*\n          - laravel: 11.*\n            testbench: 9.*\n          - laravel: 10.*\n            testbench: 8.*\n        exclude:\n          - laravel: 12.*\n            php: 8.1\n          - laravel: 11.*\n            php: 8.1\n    name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.dependency-version }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.composer/cache/files\n          key: dependencies-laravel-${{ matrix.laravel }}-php-${{ matrix.php }}-composer-${{ hashFiles('composer.json') }}\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: mbstring, pdo, pdo_sqlite\n          coverage: none\n      - name: Install dependencies\n        run: |\n          composer require \"laravel/framework:${{ matrix.laravel }}\" \"orchestra/testbench:${{ matrix.testbench }}\" \"filament/support\" --no-interaction --no-update\n          composer update --${{ matrix.dependency-version }} --prefer-dist --no-interaction\n      - name: Execute tests\n        run: ./vendor/bin/pest\n",
    "readme": "<p align=\"center\">\n    <img src=\"https://github.com/filamentphp/filament/assets/41773797/8d5a0b12-4643-4b5c-964a-56f0db91b90a\" alt=\"Banner\" style=\"width: 100%; max-width: 800px;\" />\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/filamentphp/filament/actions\"><img alt=\"Tests passing\" src=\"https://img.shields.io/badge/Tests-passing-green?style=for-the-badge&logo=github\"></a>\n    <a href=\"https://laravel.com\"><img alt=\"Laravel v10.x\" src=\"https://img.shields.io/badge/Laravel-v10.x-FF2D20?style=for-the-badge&logo=laravel\"></a>\n    <a href=\"https://livewire.laravel.com\"><img alt=\"Livewire v3.x\" src=\"https://img.shields.io/badge/Livewire-v3.x-FB70A9?style=for-the-badge\"></a>\n    <a href=\"https://php.net\"><img alt=\"PHP 8.1\" src=\"https://img.shields.io/badge/PHP-8.1-777BB4?style=for-the-badge&logo=php\"></a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://trendshift.io/repositories/238\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/238\" alt=\"filamentphp%2Ffilament | Trendshift\" style=\"width: 250px; height: 55px;\" /></a>\n</p>\n\nFilament is a collection of full-stack components for accelerated Laravel development. They are beautifully designed, intuitive to use, and fully extensible - the perfect starting point for your next Laravel app. Why waste time building the same features over and over again?\n\n## Packages\n\n### Panel Builder \u2022 [Documentation](https://filamentphp.com/docs/panels) \u2022 [Demo](https://demo.filamentphp.com)\n\nThe Panel Builder is the foundation of Filament. Combining all the packages together, it lets you quickly build Laravel admin panels, customer-facing apps, Software-as-a-Service platforms, and more. Filament makes custom CRUD-driven interfaces feel like a breeze to build and deploy.\n\n```bash\ncomposer require filament/filament\n```\n\n### Form Builder \u2022 [Documentation](https://filamentphp.com/docs/forms)\n\nRendering interactive forms in a Livewire component has never been easier than with our Form Builder. Easily build stunning forms with over 25 components out of the box. It's also fully extensible, so you can add your own custom fields and actions. As well as the Panel Builder, it is seamlessly integrated into action modals, and is used by the Table Builder to filter rows.\n\n```bash\ncomposer require filament/forms\n```\n\n### Table Builder \u2022 [Documentation](https://filamentphp.com/docs/tables)\n\nCraft beautiful, optimized, and interactive datatables for any situation. Drop in to a Livewire component, and you're ready to go. It's also fully extensible, so you can add your own custom columns, filters and actions.\n\n```bash\ncomposer require filament/tables\n```\n\n### Notifications \u2022 [Documentation](https://filamentphp.com/docs/notifications)\n\nAn important part of any application is the ability to notify your users of important events. Our notifications package lets you deliver flash notifications to users from any Livewire request, or even from your JavaScript frontend. In addition, it can fetch notifications from the database and render them in a beautiful slide-over modal, or even receive live notifications from a websockets server.\n\n```bash\ncomposer require filament/notifications\n```\n\n### Actions \u2022 [Documentation](https://filamentphp.com/docs/actions)\n\nActions are buttons that can open modals. They are a very versatile component of many interfaces, avoiding the need for the user to navigate away from the page to complete a task. From confirming a destructive action, to editing an Eloquent record, to importing data from an uploaded CSV file, action modals are a great way to keep the user in the flow of the application. Modals are built upon our Form Builder, so they are built upon the same principles of flexibility and extensibility. Modals can be added to any Livewire component with just a few lines of code, and no HTML or JavaScript.\n\n```bash\ncomposer require filament/actions\n```\n\n### Infolists \u2022 [Documentation](https://filamentphp.com/docs/infolists)\n\nInfolists are a great way to display read-only information to users about a particular record. They have a fully flexible layout, and can be extended with custom components. They are also seamlessly integrated with the Panel Builder, so you can easily add them to your panel resources.\n\n```bash\ncomposer require filament/infolists\n```\n\n### Widgets \u2022 [Documentation](https://filamentphp.com/docs/widgets)\n\nFilament's collection of widgets are built upon Livewire's core principles of real-time reactivity with the server. Combining many widgets lets you quickly build a dashboard for your application, complete with charts and stats, which are able to update live without refreshing the page. They are also seamlessly integrated with any page in the Panel Builder.\n\n```bash\ncomposer require filament/widgets\n```\n\n## Contributing\n\nPlease see our [contributing guide](https://filamentphp.com/docs/support/contributing).\n\n## Need Help?\n\n\ud83d\udc1e If you spot a bug, please [submit a detailed issue](https://github.com/filamentphp/filament/issues/new?assignees=&labels=bug%2Cunconfirmed&template=bug_report.yml), and wait for assistance.\n\n\ud83e\udd14 If you have a question or feature request, please [start a new discussion](https://github.com/filamentphp/filament/discussions/new). We also have a [Discord community](https://filamentphp.com/discord). For quick help, ask questions in the appropriate channel.\n\n\ud83d\udd10 If you discover a vulnerability, please review our [security policy](https://github.com/filamentphp/filament/blob/3.x/SECURITY.md).\n",
    "org": "filamentphp",
    "repo": "filament",
    "number": 17110,
    "commit": "859a37ce686bbea9e5cb7ba9bc21425c0b0cd84e"
}