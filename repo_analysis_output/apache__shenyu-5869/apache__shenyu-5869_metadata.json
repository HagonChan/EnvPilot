{
    "primary_language": "Java",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Java Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for any dependencies listed in the README or in configuration files like `pom.xml` (for Maven) or `build.gradle` (for Gradle). Ensure you have the required JDK version installed.  \n\n3. **Build Tool**  \n   Identify which build tool the project is using: Maven or Gradle. This information should be available in the README or through project configuration files (`pom.xml` for Maven, `build.gradle` for Gradle).  \n\n4. **Build the Project**  \n   Use the appropriate commands based on the build tool:  \n   - For Maven:  \n     ```  \n     mvn clean install  \n     ```  \n   - For Gradle:  \n     ```  \n     gradle build  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., property files, YAML files) and set them up accordingly.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly.  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific class, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: ci\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    strategy:\n      matrix:\n        java: [ 17 ]\n        os: [ ubuntu-latest, windows-latest ]\n        include:\n          - java: 17\n            os: ubuntu-latest\n          - java: 18\n            os: ubuntu-latest\n          - java: 19\n            os: ubuntu-latest\n          - java: 20\n            os: ubuntu-latest\n          - java: 21\n            os: ubuntu-latest\n    runs-on: ${{ matrix.os }}\n    if: (github.repository == 'apache/shenyu')\n    steps:\n      - name: Support longpaths\n        if: ${{ matrix.os == 'windows-latest'}}\n        run: git config --system core.longpaths true\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: '.github/filters.yml'\n          list-files: json\n      - name: Restore ShenYu Maven Repos\n        if: steps.filter.outputs.changed == 'true'\n        id: restore-maven-cache\n        uses: actions/cache/restore@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n      - uses: actions/setup-java@v4\n        if: steps.filter.outputs.changed == 'true'\n        with:\n          java-version: ${{ matrix.java }}\n          distribution: 'temurin'\n      - name: Build with Maven\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw -B clean test -Prelease\n      - uses: codecov/codecov-action@v1\n        with:\n          token: 2760af6a-3405-4882-9e61-04c5176fecfa\n        if: steps.filter.outputs.changed == 'true'\n      - name: Save ShenYu Maven Repos\n        if: steps.filter.outputs.changed == 'true' && steps.restore-maven-cache.outputs.cache-hit != 'true'\n        uses: actions/cache/save@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n\n  check-license-header:\n    name: check-license-header\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      - name: Check License Header\n        uses: apache/skywalking-eyes@9bd5feb86b5817aa6072b008f9866a2c3bbc8587\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  requirement:\n    name: build\n    if: always()\n    needs:\n      - build\n    runs-on: ubuntu-latest\n    steps:\n      - name: checking job status\n        run: |\n          [[ \"${{ needs.build.result }}\" == \"success\" ]] || exit -1\n\n\nfile: integrated-test.yml\nContent:\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: it\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    strategy:\n      matrix:\n        case:\n          - shenyu-integrated-test-apache-dubbo\n          - shenyu-integrated-test-grpc\n          - shenyu-integrated-test-http\n          - shenyu-integrated-test-https\n          - shenyu-integrated-test-motan\n          - shenyu-integrated-test-spring-cloud\n          - shenyu-integrated-test-sofa\n          - shenyu-integrated-test-websocket\n          - shenyu-integrated-test-rewrite\n          - shenyu-integrated-test-combination\n          - shenyu-integrated-test-sdk-apache-dubbo\n          - shenyu-integrated-test-sdk-http\n    runs-on: ubuntu-latest\n    if: (github.repository == 'apache/shenyu')\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      # Copied from https://github.com/jens-maus/RaspberryMatic/blob/ea6b8ce0dd2d53ea88b2766ba8d7f8e1d667281f/.github/workflows/ci.yml#L34-L40\n      # and https://github.com/actions/virtual-environments/issues/709#issuecomment-612569242\n      - name: Free disk space\n        run: |\n          df --human-readable\n          sudo apt clean\n          for image in $(docker image ls --all --quiet); do\n            docker rmi $image\n          done\n          rm --recursive --force \"$AGENT_TOOLSDIRECTORY\"\n          df --human-readable\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: '.github/filters.yml'\n          list-files: json\n      - name: Restore ShenYu Maven Repos\n        if: steps.filter.outputs.changed == 'true'\n        uses: actions/cache/restore@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n      - uses: actions/setup-java@v4\n        if: steps.filter.outputs.changed == 'true'\n        with:\n          java-version: 17\n          distribution: 'temurin'\n      - name: Build with Maven\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw -B clean install -Prelease,docker -Dmaven.javadoc.skip=true -Dmaven.test.skip=true\n      - name: Build examples\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw -B clean install -Pexample -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -am -f ./shenyu-examples/pom.xml\n      - name: Build integrated tests\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw -B clean install -Pit -DskipTests -f ./shenyu-integrated-test/pom.xml\n      - name: Start docker compose\n        if: steps.filter.outputs.changed == 'true'\n        run: docker compose -f ./shenyu-integrated-test/${{ matrix.case }}/docker-compose.yml up -d\n      - name: Wait for docker compose start up completely\n        if: steps.filter.outputs.changed == 'true'\n        run: bash ./shenyu-integrated-test/${{ matrix.case }}/script/healthcheck.sh\n      - name: Disk space info\n        run: |\n          df --human-readable\n      - name: Run test\n        id: test\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw test -Pit -f ./shenyu-integrated-test/${{ matrix.case }}/pom.xml\n        continue-on-error: true\n      - name: Check test result\n        if: steps.filter.outputs.changed == 'true'\n        run: |\n          docker compose -f ./shenyu-integrated-test/${{ matrix.case }}/docker-compose.yml logs --tail=\"all\"\n          if [[ ${{steps.test.outcome}} == \"failure\" ]]; then\n            echo \"Test Failed\"\n            exit 1\n          else\n            echo \"Test Successful\"\n            exit 0\n          fi\nfile: integrated-test-k8s-ingress.yml\nContent:\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: it-k8s\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    strategy:\n      matrix:\n        case:\n          - shenyu-integrated-test-k8s-ingress-http\n          - shenyu-integrated-test-k8s-ingress-apache-dubbo\n          - shenyu-integrated-test-k8s-ingress-motan\n          - shenyu-integrated-test-k8s-ingress-spring-cloud\n          - shenyu-integrated-test-k8s-ingress-websocket\n          - shenyu-integrated-test-k8s-ingress-grpc\n#          - shenyu-integrated-test-k8s-ingress-sofa\n    runs-on: ubuntu-latest\n    if: github.repository == 'apache/shenyu'\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: '.github/filters.yml'\n          list-files: json\n\n      - name: Clean Space\n        if: steps.filter.outputs.changed == 'true'\n        run: |\n          sudo rm -rf /usr/share/dotnet\n          sudo rm -rf /opt/ghc\n          sudo rm -rf \"/usr/local/share/boost\"\n          sudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\n\n      - name: Cache Maven Repos\n        if: steps.filter.outputs.changed == 'true'\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - uses: actions/setup-java@v4\n        if: steps.filter.outputs.changed == 'true'\n        with:\n          java-version: 17\n          distribution: 'temurin'\n\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17.x\n\n      - name: Install k8s\n        if: steps.filter.outputs.changed == 'true'\n        run: |\n          go install sigs.k8s.io/kind@v0.14.0\n          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.24.14/bin/linux/amd64/kubectl && sudo install kubectl /usr/local/bin/kubectl\n          kind create cluster --image=kindest/node:v1.21.1 --config=./shenyu-integrated-test/${{ matrix.case }}/deploy/kind-config.yaml\n\n      - name: Cache Maven Repos\n        if: steps.filter.outputs.changed == 'true'\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - uses: actions/setup-java@v4\n        if: steps.filter.outputs.changed == 'true'\n        with:\n          java-version: 17\n          distribution: 'temurin'\n\n      - name: Build with Maven\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw -B clean install -Dmaven.javadoc.skip=true -Dmaven.test.skip=true\n\n      - name: Build integrated tests\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw -B clean install -Pit -DskipTests -am -f ./shenyu-integrated-test/pom.xml\n\n      - name: Build examples\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw -B clean install -Pexample -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -am -f ./shenyu-examples/pom.xml\n\n      - name: Build k8s Cluster\n        if: steps.filter.outputs.changed == 'true'\n        run: bash ./shenyu-integrated-test/${{ matrix.case }}/script/build_k8s_cluster.sh\n\n      - name: Wait for k8s Cluster Start up\n        if: steps.filter.outputs.changed == 'true'\n        timeout-minutes: 15\n        run: |\n          bash ./shenyu-integrated-test/${{ matrix.case }}/script/healthcheck.sh\n\n      - name: Run test\n        id: test\n        if: steps.filter.outputs.changed == 'true'\n        run: ./mvnw test -Pit -f ./shenyu-integrated-test/${{ matrix.case }}/pom.xml\n        continue-on-error: true\n\n      - name: Cluster Test after Healthcheck\n        if: steps.filter.outputs.changed == 'true'\n        run: |\n          echo \"----------kubectl get all -o wide----------\"\n          kubectl get all -o wide\n          echo \"----------kubectl get all -n shenyu-ingress -o wide----------\"\n          kubectl get all -n shenyu-ingress -o wide\n          echo \"----------kubectl get events --all-namespaces----------\"\n          kubectl get events --all-namespaces\n          echo \"----------kubectl logs -l app=shenyu-ingress-controller -n shenyu-ingress --tail=-1----------\"\n          kubectl logs -l app=shenyu-ingress-controller -n shenyu-ingress --tail=-1\n          if [[ ${{steps.test.outcome}} == \"failure\" ]]; then\n            echo \"Test Failed\"\n            exit 1\n          else\n            echo \"Test Successful\"\n            exit 0\n          fi\n\n",
    "readme": "![Light Logo](https://raw.githubusercontent.com/apache/shenyu-website/main/static/img/logo-light.svg#gh-dark-mode-only)\n![Dark Logo](https://raw.githubusercontent.com/apache/shenyu-website/main/static/img/logo.svg#gh-light-mode-only)\n\n<p align=\"center\">\n  <strong>Scalable, High Performance, Responsive API Gateway Solution for all MicroServices</strong>\n</p>\n<p align=\"center\">\n  <a href=\"https://shenyu.apache.org/\">https://shenyu.apache.org/</a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://shenyu.apache.org/docs/index\" >\n    <img src=\"https://img.shields.io/badge/document-English-blue.svg\" alt=\"EN docs\" />\n  </a>\n  <a href=\"https://shenyu.apache.org/zh/docs/index\">\n    <img src=\"https://img.shields.io/badge/\u6587\u6863-\u7b80\u4f53\u4e2d\u6587-blue.svg\" alt=\"\u7b80\u4f53\u4e2d\u6587\u6587\u6863\" />\n  </a>\n</p>\n\n<p align=\"center\">\n    <a target=\"_blank\" href=\"https://search.maven.org/search?q=g:org.apache.shenyu%20AND%20a:shenyu\">\n        <img src=\"https://img.shields.io/maven-central/v/org.apache.shenyu/shenyu.svg?label=maven%20central\" />\n    </a>\n    <a target=\"_blank\" href=\"https://github.com/apache/shenyu/blob/master/LICENSE\">\n        <img src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg?label=license\" />\n    </a>\n    <a target=\"_blank\" href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\">\n        <img src=\"https://img.shields.io/badge/JDK-8+-green.svg\" />\n    </a>\n    <a target=\"_blank\" href=\"https://github.com/apache/shenyu/actions\">\n        <img src=\"https://github.com/apache/shenyu/workflows/ci/badge.svg\" />\n    </a>\n   <a target=\"_blank\" href='https://github.com/apache/shenyu'>\n        <img src=\"https://img.shields.io/github/forks/apache/shenyu.svg\" alt=\"github forks\"/>\n   </a>\n   <a target=\"_blank\" href='https://github.com/apache/shenyu'>\n        <img src=\"https://img.shields.io/github/stars/apache/shenyu.svg\" alt=\"github stars\"/>\n   </a>\n   <a target=\"_blank\" href='https://github.com/apache/shenyu'>\n        <img src=\"https://img.shields.io/github/contributors/apache/shenyu.svg\" alt=\"github contributors\"/>\n   </a>\n   <a target=\"_blank\" href=\"https://codecov.io/gh/apache/shenyu\">\n        <img src=\"https://codecov.io/gh/apache/shenyu/branch/master/graph/badge.svg\" />\n   </a>\n  <a target=\"_blank\" href=\"https://hub.docker.com/r/apache/shenyu-bootstrap/tags\">\n    <image src=\"https://img.shields.io/docker/pulls/apache/shenyu-bootstrap\" alt=\"Docker Pulls\"/>\n  </a>\n  <a target=\"_blank\" href=\"https://gitpod.io/#https://github.com/apache/shenyu\">\n    <image src=\"https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod&color=green\"/>\n  </a>\n</p>\n<br/>\n\n---\n\n# Architecture\n \n ![](https://shenyu.apache.org/img/architecture/shenyu-architecture-3d.png)  \n \n---- \n\n# Why named Apache ShenYu\n\nShenYu (\u795e\u79b9) is the honorific name of Chinese ancient monarch Xia Yu (also known in later times as Da Yu), \nwho left behind the touching story of the three times he crossed the Yellow River for the benefit of the people and successfully managed the flooding of the river. \nHe is known as one of the three greatest kings of ancient China, along with Yao and Shun.\n\n   * Firstly, the name ShenYu is to promote the traditional virtues of our Chinese civilisation.\n\n   * Secondly, the most important thing about the gateway is the governance of the traffic.\n\n   * Finally, the community will do things in a fair, just, open and meritocratic way, paying tribute to ShenYu while also conforming to the Apache Way.\n\n--- \n\n# Features\n\n* Proxy: Support for Apache\u00ae Dubbo\u2122, Spring Cloud, gRPC, Motan, SOFA, TARS, WebSocket, MQTT\n* Security: Sign, OAuth 2.0, JSON Web Tokens, WAF plugin\n* API governance: Request, response, parameter mapping, Hystrix, RateLimiter plugin\n* Observability: Tracing, metrics, logging plugin\n* Dashboard: Dynamic traffic control, visual backend for user menu permissions\n* Extensions: Plugin hot-swapping, dynamic loading\n* Cluster: NGINX, Docker, Kubernetes\n* Language: provides .NET, Python, Go, Java client for API register\n   \n---  \n\n# Quick Start (docker)\n\n### Create network for Shenyu\n\n```\n> docker network create shenyu\n```\n\n### Run Apache ShenYu Admin\n\n```\n> docker pull apache/shenyu-admin\n> docker run -d --name shenyu-admin-quickstart -p 9095:9095 --net shenyu apache/shenyu-admin\n```\n\n### Run Apache ShenYu Bootstrap\n\n```\n> docker pull apache/shenyu-bootstrap\n> docker run -d --name shenyu-quickstart -p 9195:9195 -e \"shenyu.local.enabled=true\" -e SHENYU_SYNC_WEBSOCKET_URLS=ws://shenyu-admin-quickstart:9095/websocket --net shenyu apache/shenyu-bootstrap\n```                       \n\n### Set router\n\n* Real request  \uff1ahttp://127.0.0.1:8080/helloworld,\n\n```json\n{\n  \"name\" : \"Shenyu\",\n  \"data\" : \"hello world\"\n}\n```\n\n* Set routing rules (Standalone)\n\nAdd `localKey: 123456` to Headers. If you need to customize the localKey, you can use the sha512 tool to generate the key based on plaintext and update the `shenyu.local.sha512Key` property.\n\n```\ncurl --location --request POST 'http://localhost:9195/shenyu/plugin/selectorAndRules' \\\n--header 'Content-Type: application/json' \\\n--header 'localKey: 123456' \\\n--data-raw '{\n    \"pluginName\": \"divide\",\n    \"selectorHandler\": \"[{\\\"upstreamUrl\\\":\\\"127.0.0.1:8080\\\"}]\",\n    \"conditionDataList\": [{\n        \"paramType\": \"uri\",\n        \"operator\": \"match\",\n        \"paramValue\": \"/**\"\n    }],\n    \"ruleDataList\": [{\n        \"ruleHandler\": \"{\\\"loadBalance\\\":\\\"random\\\"}\",\n        \"conditionDataList\": [{\n            \"paramType\": \"uri\",\n            \"operator\": \"match\",\n            \"paramValue\": \"/**\"\n        }]\n    }]\n}'\n```\n\n* Proxy request \uff1ahttp://localhost:9195/helloworld \n\n```json\n{\n  \"name\" : \"Shenyu\",\n  \"data\" : \"hello world\"\n}\n```\n---\n\n# Plugin\n\n Whenever a request comes in, Apache ShenYu will execute it by all enabled plugins through the chain of responsibility.\n \n As the heart of Apache ShenYu, plugins are extensible and hot-pluggable.\n \n Different plugins do different things.\n \n Of course, users can also customize plugins to meet their own needs.\n \n If you want to customize, see [custom-plugin](https://shenyu.apache.org/docs/developer/custom-plugin/) .\n \n---  \n \n# Selector & Rule \n\n  According to your HTTP request headers, selectors and rules are used to route your requests.\n  \n  Selector is your first route, It is coarser grained, for example, at the module level.\n  \n  Rule is your second route and what do you think your request should do. For example a method level in a module.\n  \n  The selector and the rule match only once, and the match is returned. So the coarsest granularity should be sorted last.\n \n---  \n   \n# Data Caching & Data Sync\n \n  Since all data have been cached using ConcurrentHashMap in the JVM, it's very fast.\n  \n  Apache ShenYu dynamically updates the cache by listening to the ZooKeeper node (or WebSocket push, HTTP long polling) when the user changes configuration information in the background management.\n  \n  ![](https://shenyu.apache.org/img/shenyu/dataSync/shenyu-config-processor-en.png)\n  \n  ![](https://shenyu.apache.org/img/shenyu/dataSync/config-strategy-processor-en.png)\n\n---    \n\n# Prerequisite\n \n   * JDK 1.8+\n   \n--- \n        \n# Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/apache/shenyu.svg)](https://starchart.cc/apache/shenyu.svg)\n\n---  \n\n# Contributor and Support\n\n* [How to Contribute](https://shenyu.apache.org/community/contributor-guide)\n* [Mailing Lists](mailto:dev@shenyu.apache.org)\n\n---  \n\n# Known Users\n\nIn order of registration, More access companies are welcome to register at [https://github.com/apache/shenyu/issues/68](https://github.com/apache/shenyu/issues/68) (For open source users only) .\n\nAll Users : [Known Users](https://shenyu.apache.org/community/user-registration)\n",
    "org": "apache",
    "repo": "shenyu",
    "number": 5869,
    "commit": "5b8e7d07f68e36d4457f354d57b4cbf5411ef817"
}