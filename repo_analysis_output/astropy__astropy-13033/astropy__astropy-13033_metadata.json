{
    "primary_language": "Python",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Python Projects**\n\n1. **Read the README**  \n   Always start by reading the project's README file on GitHub. It usually contains important instructions for installation, usage, and any project-specific details. Some projects include a `Dockerfile` script, which you can review and reuse as needed.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in a `requirements.txt` file. Ensure you have the required versions of Python and any other libraries/packages.  \n\n3. **Virtual Environment**  \n   It\u2019s a good practice to create a virtual environment for each Python project to avoid conflicts with system-wide packages. Use the command:  \n   ```sh\n   python3.X -m venv .venv  \n   ```  \n\n4. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files) and set them up accordingly.  \n\n5. **Build the Project (rare cases)**  \n   Some projects might require building before usage, especially if they include C extensions or require compiling assets.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Some projects include a `tox.ini` file, which allows you to run tests with `tox`. Install `tox` first using:  \n   ```sh\n   pip install tox  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a script, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is not necessary.  \n\n10. **Shell Compatibility**  \n   In some shells, the `source` command may not work. In such cases, replace `source` with just `.` (a single dot). For example:  \n   ```sh\n   . .venv/bin/activate  \n   ```  \n\n11. **Avoid Using Conda**  \n   Instead of Conda, prefer the following commands to set up your virtual environment:  \n   ```sh\n   python -m venv .venv  \n   . .venv/bin/activate  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci_cron_daily.yml\nContent:\nname: Daily cron\n\non:\n  schedule:\n    # run every day at 3am UTC\n    - cron: '0 3 * * *'\n  pull_request:\n    # We also want this workflow triggered if the 'Extra CI' label is added\n    # or present when PR is updated\n    types:\n      - synchronize\n      - labeled\n  push:\n    # We want this workflow to always run on release branches as well as\n    # all tags since we want to be really sure we don't introduce\n    # regressions on the release branches, and it's also important to run\n    # this on pre-release and release tags.\n    branches:\n    - 'v*'\n    tags:\n    - '*'\n\nenv:\n  ARCH_ON_CI: \"normal\"\n  IS_CRON: \"true\"\n\njobs:\n  tests:\n    runs-on: ${{ matrix.os }}\n    if: (github.repository == 'astropy/astropy' && (github.event_name == 'schedule' || github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'Extra CI')))\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n\n          - name: Bundling with pyinstaller\n            os: ubuntu-latest\n            python: 3.8\n            toxenv: pyinstaller\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install language-pack-de and tzdata\n      if: ${{ matrix.os == 'ubuntu-latest' }}\n      run: |\n        sudo apt-get update\n        sudo apt-get install language-pack-de tzdata\n    - name: Install Python dependencies\n      run: python -m pip install --upgrade tox\n    - name: Run tests\n      run: tox ${{ matrix.toxargs}} -e ${{ matrix.toxenv}} -- ${{ matrix.toxposargs}}\n\nfile: ci_workflows.yml\nContent:\nname: CI\n\non:\n  push:\n    branches:\n    - main\n    tags:\n    - '*'\n  pull_request:\n\nenv:\n  ARCH_ON_CI: \"normal\"\n  IS_CRON: \"false\"\n\njobs:\n  initial_checks:\n    name: Mandatory checks before CI\n    runs-on: ubuntu-latest\n    steps:\n    - name: Check base branch\n      uses: actions/github-script@v3\n      if: github.event_name == 'pull_request'\n      with:\n        script: |\n          const skip_label = 'skip-basebranch-check';\n          const { default_branch: allowed_basebranch } = context.payload.repository;\n          const pr = context.payload.pull_request;\n          if (pr.user.login === 'meeseeksmachine') {\n            core.info(`Base branch check is skipped since this is auto-backport by ${pr.user.login}`);\n            return;\n          }\n          if (pr.labels.find(lbl => lbl.name === skip_label)) {\n            core.info(`Base branch check is skipped due to the presence of ${skip_label} label`);\n            return;\n          }\n          if (pr.base.ref !== allowed_basebranch) {\n            core.setFailed(`PR opened against ${pr.base.ref}, not ${allowed_basebranch}`);\n          } else {\n            core.info(`PR opened correctly against ${allowed_basebranch}`);\n          }\n\n  tests:\n    name: ${{ matrix.name }}\n    runs-on: ${{ matrix.os }}\n    needs: initial_checks\n    strategy:\n      fail-fast: true\n      matrix:\n        include:\n\n          - name: Code style checks\n            os: ubuntu-latest\n            python: 3.x\n            toxenv: codestyle\n            toxposargs: --all-files -v\n\n          # NOTE: this 2nd coverage test is needed for tests and code that\n          #       run only with minimal dependencies.\n          - name: Python 3.10 with minimal dependencies and full coverage\n            os: ubuntu-latest\n            python: '3.10'\n            toxenv: py310-test-cov\n\n          # NOTE: In the build below we also check that tests do not open and\n          # leave open any files. This has a performance impact on running the\n          # tests, hence why it is not enabled by default.\n          - name: Python 3.9 with all optional dependencies\n            os: ubuntu-latest\n            python: 3.9\n            toxenv: py39-test-alldeps\n            toxargs: -v --develop\n            toxposargs: --open-files\n\n          - name: Python 3.8 with oldest supported version of all dependencies\n            os: ubuntu-18.04\n            python: 3.8\n            toxenv: py38-test-oldestdeps-alldeps-cov-clocale\n            toxposargs: --remote-data=astropy\n\n          - name: Python 3.9 with all optional dependencies (Windows)\n            os: windows-latest\n            python: 3.9\n            toxenv: py39-test-alldeps\n            toxposargs: --durations=50\n\n          - name: Python 3.9 with all optional dependencies (MacOS X)\n            os: macos-latest\n            python: 3.9\n            toxenv: py39-test-alldeps\n            toxposargs: --durations=50\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install language-pack-fr and tzdata\n      if: startsWith(matrix.os, 'ubuntu')\n      run: |\n        sudo apt-get update\n        sudo apt-get install language-pack-fr tzdata\n    - name: Install Python dependencies\n      run: python -m pip install --upgrade tox codecov\n    - name: Run tests\n      run: tox ${{ matrix.toxargs }} -e ${{ matrix.toxenv }} -- ${{ matrix.toxposargs }}\n    # TODO: Do we need --gcov-glob \"*cextern*\" ?\n    - name: Upload coverage to codecov\n      if: ${{ contains(matrix.toxenv,'-cov') }}\n      uses: codecov/codecov-action@v2\n      with:\n        file: ./coverage.xml\n\n  allowed_failures:\n    name: ${{ matrix.name }}\n    runs-on: ${{ matrix.os }}\n    needs: initial_checks\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - name: (Allowed Failure) Python 3.8 with remote data and dev version of key dependencies\n            os: ubuntu-latest\n            python: 3.8\n            toxenv: py38-test-devdeps\n            toxposargs: --remote-data=any\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install language-pack-de and tzdata\n      if: startsWith(matrix.os, 'ubuntu')\n      run: |\n        sudo apt-get update\n        sudo apt-get install language-pack-de tzdata\n    - name: Install Python dependencies\n      run: python -m pip install --upgrade tox codecov\n    - name: Run tests\n      run: tox ${{ matrix.toxargs }} -e ${{ matrix.toxenv }} -- ${{ matrix.toxposargs }}\n\n  parallel_and_32bit:\n    name: 32-bit and parallel\n    runs-on: ubuntu-latest\n    needs: initial_checks\n    container:\n      image: quay.io/pypa/manylinux2014_i686\n    steps:\n    # TODO: Use newer checkout actions when https://github.com/actions/checkout/issues/334 fixed\n    - name: Checkout code\n      uses: actions/checkout@v1\n      with:\n        fetch-depth: 0\n    - name: Write configuration items to standard location to make sure they are ignored in parallel mode\n      run: |\n        mkdir -p $HOME/.astropy/config/\n        printf \"unicode_output = True\\nmax_width = 500\" > $HOME/.astropy/config/astropy.cfg\n    # In addition to testing 32-bit, we also use the 3.8 builds to\n    # test the ability to run the test suite in parallel.\n    # Numpy is pinned to avoid building it from source for numpy 1.21.5\n    - name: Install dependencies for Python 3.8\n      run: /opt/python/cp38-cp38/bin/pip install tox\n    - name: Run tests for Python 3.8\n      run: /opt/python/cp38-cp38/bin/python -m tox -e py38-numpy120-test -- -n=4 --durations=50\n    # We use the 3.8 build to check that running tests twice in a row in the\n    # same Python session works without issues. This catches cases where\n    # running the tests changes the module state permanently. Note that we\n    # shouldn't also test the parallel build here since that enforces a degree\n    # of isolation of tests which will interfere with what we are trying to do\n    # here.\n    # Numpy is pinned to avoid building it from source for numpy 1.21.5\n    - name: Run tests for Python 3.8\n      run: /opt/python/cp38-cp38/bin/python -m tox -e py38-numpy120-test-double\n\nfile: ci_cron_weekly.yml\nContent:\nname: Weekly cron\n\non:\n  schedule:\n    # run every Monday at 6am UTC\n    - cron: '0 6 * * 1'\n  pull_request:\n    # We also want this workflow triggered if the 'Extra CI' label is added\n    # or present when PR is updated\n    types:\n      - synchronize\n      - labeled\n  push:\n    # We want this workflow to always run on release branches as well as\n    # all tags since we want to be really sure we don't introduce\n    # regressions on the release branches, and it's also important to run\n    # this on pre-release and release tags.\n    branches:\n    - 'v*'\n    tags:\n    - '*'\n\nenv:\n  IS_CRON: 'true'\n\njobs:\n  tests:\n    runs-on: ${{ matrix.os }}\n    if: (github.repository == 'astropy/astropy' && (github.event_name == 'schedule' || github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'Extra CI')))\n    env:\n      ARCH_ON_CI: \"normal\"\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n\n          # We check numpy-dev also in a job that only runs from cron, so that\n          # we can spot issues sooner. We do not use remote data here, since\n          # that gives too many false positives due to URL timeouts. We also\n          # install all dependencies via pip here so we pick up the latest\n          # releases.\n          - name: Python 3.10 with dev version of key dependencies\n            os: ubuntu-latest\n            python: '3.10'\n            toxenv: py310-test-devdeps\n\n          - name: Documentation link check\n            os: ubuntu-latest\n            python: 3.8\n            toxenv: linkcheck\n\n          # TODO: Uncomment when 3.10 is more mature. Should we use devdeps?\n          # Test against Python dev in cron job.\n          #- name: Python dev with basic dependencies\n          #  os: ubuntu-latest\n          #  python: 3.10-dev\n          #  toxenv: pydev-test\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install language-pack-de and tzdata\n      if: ${{ matrix.os == 'ubuntu-latest' }}\n      run: |\n        sudo apt-get update\n        sudo apt-get install language-pack-de tzdata\n    - name: Install graphviz\n      if: ${{ matrix.toxenv == 'linkcheck' }}\n      run: sudo apt-get install graphviz\n    - name: Install Python dependencies\n      run: python -m pip install --upgrade tox\n    - name: Run tests\n      run: tox ${{ matrix.toxargs}} -e ${{ matrix.toxenv}} -- ${{ matrix.toxposargs}}\n\n\n  tests_more_architectures:\n\n    # The following architectures are emulated and are therefore slow, so\n    # we include them just in the weekly cron. These also serve as a test\n    # of using system libraries and using pytest directly.\n\n    runs-on: ubuntu-20.04\n    name: Python 3.9\n    if: (github.repository == 'astropy/astropy' && (github.event_name == 'schedule' || github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'Extra CI')))\n    env:\n      ARCH_ON_CI: ${{ matrix.arch }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - arch: aarch64\n          - arch: s390x\n          # Uncomment when we ready to fix the failures, see PR 11697\n          #- arch: ppc64le\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - uses: uraimo/run-on-arch-action@v2.1.1\n        name: Run tests\n        id: build\n        with:\n          arch: ${{ matrix.arch }}\n          distro: bullseye\n\n          shell: /bin/bash\n\n          install: |\n            echo \"deb http://deb.debian.org/debian bullseye-backports main\" >> /etc/apt/sources.list\n            apt-get update -q -y\n            apt-get install -q -y git \\\n                                  g++ \\\n                                  pkg-config \\\n                                  python3 \\\n                                  python3-configobj \\\n                                  python3-numpy \\\n                                  python3-ply \\\n                                  python3-venv \\\n                                  cython3 \\\n                                  libwcs7/bullseye-backports \\\n                                  wcslib-dev/bullseye-backports \\\n                                  libcfitsio-dev \\\n                                  liberfa1\n\n          run: |\n            python3 -m venv --system-site-packages tests\n            source tests/bin/activate\n            ASTROPY_USE_SYSTEM_ALL=1 pip3 install -e .[test]\n            python3 -m pytest\n",
    "readme": "=======\nAstropy\n=======\n\n|Actions Status| |CircleCI Status| |Azure Status| |Coverage Status| |PyPI Status| |Documentation Status| |Zenodo|\n\nThe Astropy Project (http://astropy.org/) is a community effort to develop a\nsingle core package for Astronomy in Python and foster interoperability between\nPython astronomy packages. This repository contains the core package which is\nintended to contain much of the core functionality and some common tools needed\nfor performing astronomy and astrophysics with Python.\n\nReleases are `registered on PyPI <https://pypi.org/project/astropy>`_,\nand development is occurring at the\n`project's GitHub page <http://github.com/astropy/astropy>`_.\n\nFor installation instructions, see the `online documentation <https://docs.astropy.org/>`_\nor  `docs/install.rst <docs/install.rst>`_ in this source distribution.\n\nContributing Code, Documentation, or Feedback\n---------------------------------------------\n\nThe Astropy Project is made both by and for its users, so we welcome and\nencourage contributions of many kinds. Our goal is to keep this a positive,\ninclusive, successful, and growing community by abiding with the\n`Astropy Community Code of Conduct <http://www.astropy.org/about.html#codeofconduct>`_.\n\nMore detailed information on contributing to the project or submitting feedback\ncan be found on the `contributions <http://www.astropy.org/contribute.html>`_\npage. A `summary of contribution guidelines <CONTRIBUTING.md>`_ can also be\nused as a quick reference when you are ready to start writing or validating\ncode for submission.\n\nSupporting the Project\n----------------------\n\n|NumFOCUS| |Donate|\n\nThe Astropy Project is sponsored by NumFOCUS, a 501(c)(3) nonprofit in the\nUnited States. You can donate to the project by using the link above, and this\ndonation will support our mission to promote sustainable, high-level code base\nfor the astronomy community, open code development, educational materials, and\nreproducible scientific research.\n\nLicense\n-------\n\nAstropy is licensed under a 3-clause BSD style license - see the\n`LICENSE.rst <LICENSE.rst>`_ file.\n\n.. |Actions Status| image:: https://github.com/astropy/astropy/workflows/CI/badge.svg\n    :target: https://github.com/astropy/astropy/actions\n    :alt: Astropy's GitHub Actions CI Status\n\n.. |CircleCI Status| image::  https://img.shields.io/circleci/build/github/astropy/astropy/main?logo=circleci&label=CircleCI\n    :target: https://circleci.com/gh/astropy/astropy\n    :alt: Astropy's CircleCI Status\n\n.. |Azure Status| image:: https://dev.azure.com/astropy-project/astropy/_apis/build/status/astropy.astropy?repoName=astropy%2Fastropy&branchName=main\n    :target: https://dev.azure.com/astropy-project/astropy\n    :alt: Astropy's Azure Pipelines Status\n\n.. |Coverage Status| image:: https://codecov.io/gh/astropy/astropy/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/astropy/astropy\n    :alt: Astropy's Coverage Status\n\n.. |PyPI Status| image:: https://img.shields.io/pypi/v/astropy.svg\n    :target: https://pypi.org/project/astropy\n    :alt: Astropy's PyPI Status\n\n.. |Zenodo| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.4670728.svg\n   :target: https://doi.org/10.5281/zenodo.4670728\n   :alt: Zenodo DOI\n\n.. |Documentation Status| image:: https://img.shields.io/readthedocs/astropy/latest.svg?logo=read%20the%20docs&logoColor=white&label=Docs&version=stable\n    :target: https://docs.astropy.org/en/stable/?badge=stable\n    :alt: Documentation Status\n\n.. |NumFOCUS| image:: https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A\n    :target: http://numfocus.org\n    :alt: Powered by NumFOCUS\n\n.. |Donate| image:: https://img.shields.io/badge/Donate-to%20Astropy-brightgreen.svg\n    :target: https://numfocus.salsalabs.org/donate-to-astropy/index.html\n\n\nIf you locally cloned this repo before 7 Apr 2021\n-------------------------------------------------\n\nThe primary branch for this repo has been transitioned from ``master`` to\n``main``.  If you have a local clone of this repository and want to keep your\nlocal branch in sync with this repo, you'll need to do the following in your\nlocal clone from your terminal::\n\n   git fetch --all --prune\n   # you can stop here if you don't use your local \"master\"/\"main\" branch\n   git branch -m master main\n   git branch -u origin/main main\n\nIf you are using a GUI to manage your repos you'll have to find the equivalent\ncommands as it's different for different programs. Alternatively, you can just\ndelete your local clone and re-clone!\n",
    "org": "astropy",
    "repo": "astropy",
    "number": 13033,
    "commit": "298ccb478e6bf092953bca67a3d29dc6c35f6752"
}