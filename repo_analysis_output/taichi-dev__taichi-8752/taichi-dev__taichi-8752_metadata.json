{
    "primary_language": "C++",
    "language_guidelines": "Programming Language guidelines for C++:\n# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yaml\nContent:\nname: Build Taichi\non:\n  workflow_call:\n    inputs:\n      build_id:\n        required: true\n        type: string\n      nightly:\n        required: true\n        type: boolean\n      python:\n        required: true\n        type: string\n    secrets:\n      BOT_MINIO_ACCESS_KEY:\n        required: true\n      BOT_MINIO_SECRET_KEY:\n        required: true\n  workflow_dispatch:\n    inputs:\n      build_id:\n        description: 'The build id. e.g.: 20230427-102544-abcdefab'\n        required: true\n        type: string\n      nightly:\n        description: 'Are we building nightly wheels?'\n        required: true\n        default: false\n        type: boolean\n      python:\n        description: 'JSON encoded python versions need building wheel. e.g.: [\"3.7\"]'\n        required: true\n        type: string\n\nconcurrency:\n  group: build-${{ github.event.number || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  TI_CI: \"1\"\n  TI_SKIP_VERSION_CHECK: 'ON'\n  CI_IMAGE_VERSION: '202304251731'\n  # TI_USE_GIT_CACHE: ${{ vars.TI_USE_GIT_CACHE }}\n  TI_USE_GIT_CACHE: '1'  # variables are also not populated on forked PRs\n  NIGHTLY: ${{ inputs.nightly && 'nightly' || '' }}\n\njobs:\n  show_environ:\n    name: Show Environment Variables\n    # Disable this workflow on forks\n    if: github.repository_owner == 'taichi-dev'\n    runs-on: [self-hosted, Linux]\n    steps:\n    - name: Environment Variables\n      run: env\n    - name: Github Object\n      run: |\n        cat <<'EOF'\n        ${{ toJson(github) }}\n        EOF\n\n  build_cpu_mac:\n    name: Build macOS-x86\n    timeout-minutes: 30\n    strategy:\n      fail-fast: false\n      matrix:\n        python: ${{ fromJSON(inputs.python) }}\n        _designated: ['']\n        include:\n        - _designated: ''\n          designated: designated\n    runs-on:\n    - self-hosted\n    - macos-10.15\n    env:\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=ON\n        -DTI_WITH_C_API:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n          submodules: 'recursive'\n\n      - name: Build\n        run: ./build.py ${NIGHTLY:+--nightly} --python=${{ matrix.python }} ${SHOULD_TAG_CONFIG:+--tag-config}\n\n      - name: Upload Built Wheel\n        uses: shallwefootball/s3-upload-action@v1.3.3\n        with:\n          aws_key_id: ${{ secrets.BOT_MINIO_ACCESS_KEY }}\n          aws_secret_access_key: ${{ secrets.BOT_MINIO_SECRET_KEY }}\n          aws_bucket: built-wheels\n          source_dir: dist\n          destination_dir: built-wheels/${{ inputs.build_id }}/${{ !matrix.designated && 'matrix/' || '' }}\n          endpoint: http://botmaster.tgr:9000\n\n  build_linux:\n    name: Build Linux\n    timeout-minutes: 30\n    strategy:\n      fail-fast: false\n      matrix:\n        cuda: ['', cuda]\n        llvm: ['', llvm]\n        gl: ['', gl]\n        vk: ['', vk]\n        python: ${{ fromJSON(inputs.python) }}\n        include:\n        - {cuda: cuda, llvm: llvm, gl: gl, vk: vk, designated: designated}\n        exclude:\n        - {llvm: '', cuda: cuda}\n    runs-on: [self-hosted, online, Linux, build]\n    env:\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_CUDA:BOOL=${{ matrix.cuda && 'ON' || 'OFF' }}\n        -DTI_WITH_LLVM:BOOL=${{ matrix.llvm && 'ON' || 'OFF' }}\n        -DTI_WITH_OPENGL:BOOL=${{ matrix.gl && 'ON' || 'OFF' }}\n        -DTI_WITH_VULKAN:BOOL=${{ matrix.vk && 'ON' || 'OFF' }}\n        -DTI_WITH_METAL:BOOL=OFF\n        -DTI_WITH_BACKTRACE:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: '0'\n\n      - name: Build\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n          ci-docker-run-gpu \\\n            -v $(pwd):/home/dev/taichi \\\n            registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/build.py ${NIGHTLY:+--nightly} --python=${{ matrix.python }} ${SHOULD_TAG_CONFIG:+--tag-config}\n        env:\n          SHOULD_TAG_CONFIG: ${{ !matrix.designated && 'yes' || '' }}\n\n      - name: Upload Built Wheel\n        uses: shallwefootball/s3-upload-action@v1.3.3\n        with:\n          aws_key_id: ${{ secrets.BOT_MINIO_ACCESS_KEY }}\n          aws_secret_access_key: ${{ secrets.BOT_MINIO_SECRET_KEY }}\n          aws_bucket: built-wheels\n          source_dir: dist\n          destination_dir: built-wheels/${{ inputs.build_id }}/${{ !matrix.designated && 'matrix/' || '' }}\n          endpoint: http://botmaster.tgr:9000\n\n  build_amdgpu_linux:\n    name: Build AMDGPU\n    timeout-minutes: 30\n    strategy:\n      fail-fast: false\n      matrix:\n        python: ${{ fromJSON(inputs.python) }}\n        designated: ['']\n    runs-on: [self-hosted, online, Linux, build]\n    env:\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_CUDA:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=OFF\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_AMDGPU:BOOL=ON\n\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: '0'\n\n      - name: Build & Install\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run \\\n            -v $(pwd):/home/dev/taichi \\\n            registry.botmaster.tgr/taichi-build-amdgpu:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/build.py ${NIGHTLY:+--nightly} --python=${{ matrix.python }} --tag-local=amd\n\n      - name: Upload Built Wheel\n        uses: shallwefootball/s3-upload-action@v1.3.3\n        with:\n          aws_key_id: ${{ secrets.BOT_MINIO_ACCESS_KEY }}\n          aws_secret_access_key: ${{ secrets.BOT_MINIO_SECRET_KEY }}\n          aws_bucket: built-wheels\n          source_dir: dist\n          destination_dir: built-wheels/${{ inputs.build_id }}/${{ !matrix.designated && 'matrix/' || '' }}\n          endpoint: http://botmaster.tgr:9000\n\n  build_windows:\n    name: Build Windows\n    strategy:\n      fail-fast: false\n      matrix:\n        cuda: ['', cuda]\n        llvm: ['', llvm]\n        gl: ['', gl]\n        vk: ['', vk]\n        python: ${{ fromJSON(inputs.python) }}\n        include:\n        - {cuda: cuda, llvm: llvm, gl: gl, vk: vk, lto: lto, pdb: pdb, designated: designated}\n        exclude:\n        - {llvm: '', cuda: cuda}\n    runs-on: [self-hosted, online, Windows, build]\n    timeout-minutes: 30\n    env:\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_CUDA:BOOL=${{ matrix.cuda && 'ON' || 'OFF' }}\n        -DTI_WITH_LLVM:BOOL=${{ matrix.llvm && 'ON' || 'OFF' }}\n        -DTI_WITH_OPENGL:BOOL=${{ matrix.gl && 'ON' || 'OFF' }}\n        -DTI_WITH_VULKAN:BOOL=${{ matrix.vk && 'ON' || 'OFF' }}\n        -DTI_WITH_METAL:BOOL=OFF\n        -DTI_WITH_BACKTRACE:BOOL=ON\n        -DTI_WITH_DX11:BOOL=ON\n        -DTI_WITH_DX12:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_C_API:BOOL=ON\n        -DTI_WITH_LTO:BOOL=${{ matrix.lto && 'ON' || 'OFF' }}\n        -DTI_GENERATE_PDB:BOOL=${{ matrix.pdb && 'ON' || 'OFF' }}\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        shell: pwsh\n        run: |\n          $ErrorActionPreference = 'SilentlyContinue'\n          git config --system core.longpaths true\n          git submodule foreach --recursive 'git rev-parse HEAD || rm -rf $PWD'\n          $LASTEXITCODE = 0\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n          submodules: 'recursive'\n\n      - uses: actions/setup-python@v5\n        with:\n          # force a 3.7 is ok, build.py will handle actual python env\n          python-version: 3.7\n\n      - name: Build\n        shell: pwsh\n        run: |\n          $nightlyFlag = $null\n          if ($env:NIGHTLY) { $nightlyFlag = \"--nightly\" }\n          $tagFlag = $null\n          if ($env:SHOULD_TAG_CONFIG) { $tagFlag = \"--tag-config\" }\n          python build.py $nightlyFlag --python=${{ matrix.python }} $tagFlag\n        env:\n          SHOULD_TAG_CONFIG: ${{ !matrix.designated && 'yes' || '' }}\n\n      - name: Upload Built Wheel\n        uses: shallwefootball/s3-upload-action@v1.3.3\n        with:\n          aws_key_id: ${{ secrets.BOT_MINIO_ACCESS_KEY }}\n          aws_secret_access_key: ${{ secrets.BOT_MINIO_SECRET_KEY }}\n          aws_bucket: built-wheels\n          source_dir: dist\n          destination_dir: built-wheels/${{ inputs.build_id }}/${{ !matrix.designated && 'matrix/' || '' }}\n          endpoint: http://botmaster.tgr:9000\n\n      - name: Cleanup Git Cache Configs\n        shell: pwsh\n        if: always()\n        run: |\n          . .github/workflows/scripts/common-utils.ps1\n          UnsetGitCachingProxy\n          exit 0\n\n  build_m1:\n    name: Build M1\n    timeout-minutes: 30\n    strategy:\n      fail-fast: false\n      matrix:\n        python: ${{ fromJSON(inputs.python) }}\n        _designated: ['']\n        exclude:\n        - python: \"3.7\"\n        include:\n        - _designated: ''\n          designated: designated\n    defaults:\n      run:\n        shell: '/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}'\n    runs-on: [self-hosted, online, m1]\n    env:\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_WITH_CUDA:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_C_API=ON\n        -DTI_WITH_STATIC_C_API=ON\n      PLATFORM: 'm1'\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n          submodules: 'recursive'\n\n      - name: Build\n        run: |\n          brew install molten-vk\n          ./build.py ${NIGHTLY:+--nightly} --python=${{ matrix.python }}\n\n      - name: Upload Built Wheel\n        uses: shallwefootball/s3-upload-action@v1.3.3\n        with:\n          aws_key_id: ${{ secrets.BOT_MINIO_ACCESS_KEY }}\n          aws_secret_access_key: ${{ secrets.BOT_MINIO_SECRET_KEY }}\n          aws_bucket: built-wheels\n          source_dir: dist\n          destination_dir: built-wheels/${{ inputs.build_id }}/${{ !matrix.designated && 'matrix/' || '' }}\n          endpoint: http://botmaster.tgr:9000\n\n  build_ios_capi:\n    name: Build iOS C-API Static Library\n    timeout-minutes: 30\n    runs-on: [self-hosted, online, m1]\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n          submodules: 'recursive'\n\n      - name: Build\n        run: .github/workflows/scripts/build.py ios\n\n      - name: Save Compiled Static Library\n        uses: actions/upload-artifact@v4\n        with:\n          name: libtaichi_c_api.iOS.a\n          path: 'dist/C-API-iOS/*.a'\n          retention-days: 7\n\nfile: testing.yml\nContent:\nname: Build and Test\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  push:\n    branches:\n      - master\n      - rc-*\n  schedule:\n    - cron: '0 18 * * *'  # For testing the offline cache, GMT 18 == GMT+8 02\n\nconcurrency:\n  group: ${{ github.event.number || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  TI_CI: \"1\"\n  TI_SKIP_VERSION_CHECK: 'ON'\n  TI_LITE_TEST: ${{ github.event_name == 'pull_request' && ! contains(github.event.pull_request.labels.*.name, 'full-ci') && ! startsWith(github.base_ref, 'rc-') && '1' || '' }}\n  TI_TEST_OFFLINE_CACHE: ${{ github.event.schedule == '0 18 * * *' && '1' || '' }}\n  CI_IMAGE_VERSION: '202507261736'\n  # TI_USE_GIT_CACHE: ${{ vars.TI_USE_GIT_CACHE }}\n  TI_USE_GIT_CACHE: '1'  # variables are also not populated on forked PRs\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  show_environ:\n    name: Show Environment Variables\n    # Disable this workflow on forks\n    if: github.repository_owner == 'taichi-dev'\n    runs-on: [self-hosted, Linux]\n    steps:\n    - name: Environment Variables\n      run: env\n    - name: Github Object\n      run: |\n        cat <<'EOF'\n        ${{ toJson(github) }}\n        EOF\n\n  check_files:\n    name: Check files\n    # Disable this workflow on forks\n    if: github.repository_owner == 'taichi-dev'\n    outputs:\n      run_job: ${{ steps.check_files.outputs.run_job }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n\n      - name: check modified files\n        id: check_files\n        run: |\n          echo \"Concurrency group: ${{ github.event.number || github.run_id }}\"\n          echo \"=============== list modified files ===============\"\n          git diff --name-only @^\n\n          chore_files=( LICENSE CONTRIBUTING.md README.md netlify.toml )\n          chore_dirs=( docs )\n          run_job=false\n\n          for file in $(git diff --name-only @^); do\n            is_chore=false\n\n            for chore_file in ${chore_files[*]}; do\n              [[ ${file} == ${chore_file} ]] && is_chore=true && break\n            done\n\n            for chore_dir in ${chore_dirs[*]}; do\n              [[ ${file} == ${chore_dir}/* ]] && is_chore=true && break\n            done\n\n            if ! ${is_chore}; then\n              run_job=true\n              break\n            fi\n          done\n\n          if ${run_job}; then\n            echo \"run_job=true\"  >> $GITHUB_OUTPUT\n          else\n            echo \"run_job=false\" >> $GITHUB_OUTPUT\n          fi\n\n  check_static_analyzer:\n    name: Check Static Analyzer\n    runs-on: ubuntu-latest\n    needs: check_files\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: '0'\n\n      - name: clang-tidy\n        run: |\n          if [[ ${{needs.check_files.outputs.run_job}} == false ]]; then\n            exit 0\n          fi\n          # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio\n          echo $CR_PAT | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n          docker pull ghcr.io/taichi-dev/taichidev-cpu-ubuntu18.04:v0.3.3\n          docker run -id --user dev --name check_clang_tidy ghcr.io/taichi-dev/taichidev-cpu-ubuntu18.04:v0.3.3 /bin/bash\n          tar -cf - ../${{ github.event.repository.name }} --mode u=+rwx,g=+rwx,o=+rwx --owner 1000 --group 1000 | docker cp - check_clang_tidy:/home/dev/\n          docker exec --user root check_clang_tidy apt-get update\n          docker exec --user root check_clang_tidy apt install -y clang-tidy-10 libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libglew-dev libglfw3-dev\n          docker exec --user dev check_clang_tidy /home/dev/taichi/.github/workflows/scripts/check_clang_tidy.sh \"$CI_SETUP_CMAKE_ARGS\"\n        env:\n          CR_PAT: ${{ secrets.GITHUB_TOKEN }}\n          CI_SETUP_CMAKE_ARGS: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_VULKAN:BOOL=ON -DTI_BUILD_TESTS:BOOL=ON -DTI_WITH_BACKTRACE:BOOL=ON\n\n  #build_and_test_cpu_mac:\n  #  name: Build and Test macos (CPU)\n  #  needs: check_files\n  #  timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 120 || 180 }}\n  #  strategy:\n  #    matrix:\n  #      include:\n  #        - os: macos-10.15\n  #          python: 3.13\n  #          with_cpp_tests: ON\n  #          wanted_archs: 'cpu,vulkan'\n  #  runs-on:\n  #  - self-hosted\n  #  - ${{ matrix.os }}\n  #  env:\n  #    PY: ${{ matrix.python }}\n  #    TAICHI_CMAKE_ARGS: >-\n  #      -DTI_WITH_OPENGL:BOOL=OFF\n  #      -DTI_WITH_VULKAN:BOOL=ON\n  #      -DTI_WITH_C_API=ON\n  #      -DTI_BUILD_TESTS:BOOL=${{ matrix.with_cpp_tests }}\n  #  steps:\n  #    - name: Workaround checkout issues\n  #      run: |\n  #        . .github/workflows/scripts/common-utils.sh\n  #        git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n  #        unset-git-caching-proxy\n\n  #    - uses: actions/checkout@v3\n  #      with:\n  #        fetch-depth: '0'\n  #        submodules: 'recursive'\n\n  #    - name: Prepare Environment\n  #      run: |\n  #        . .github/workflows/scripts/common-utils.sh\n  #        prepare-build-cache\n  #      env:\n  #        PLATFORM: 'macos'\n\n  #    - name: Build & Install\n  #      if: needs.check_files.outputs.run_job == 'true'\n  #      run: |\n  #        # Use the molten-vk v1.1.10 downloaded from taichi assets\n  #        brew uninstall molten-vk -f\n  #        .github/workflows/scripts/build.py\n  #      env:\n  #        CXX: clang++\n\n  #    # [DEBUG] Copy this step around to enable debugging inside Github Action instances.\n  #    #- name: Setup tmate session\n  #    #  uses: mxschmitt/action-tmate@v3\n  #    #  with:\n  #    #    limit-access-to-actor: true\n\n  #    - name: Test\n  #      id: test\n  #      if: needs.check_files.outputs.run_job == 'true'\n  #      run: .github/workflows/scripts/unix_test.sh\n  #      env:\n  #        TI_WANTED_ARCHS: ${{ matrix.wanted_archs }}\n  #        TI_SKIP_CPP_TESTS: Disabled because Vulkan is supported but not working on buildbot4\n\n  #    - name: Save wheel if test failed\n  #      if: failure() && steps.test.conclusion == 'failure'\n  #      uses: actions/upload-artifact@v4\n  #      with:\n  #        name: broken-wheel\n  #        path: dist/*\n  #        retention-days: 7\n\n  build_and_test_gpu_linux:\n    name: Build and Test (GPU)\n    needs: check_files\n    timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 90 || 120 }}\n    strategy:\n      matrix:\n        extra_markers:\n        - sm70\n        - not sm70\n        driver:\n        - driver550\n\n    runs-on:\n    - self-hosted\n    - cn\n    - cuda\n    - vulkan\n    - ${{ matrix.driver }}\n    - ${{ matrix.extra_markers == 'sm70' && 'sm70' || 'Linux' }}\n    env:\n      PY: '3.13'\n      PROJECT_NAME: taichi\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_OPENGL:BOOL=ON\n        -DTI_WITH_VULKAN:BOOL=ON\n        -DTI_WITH_BACKTRACE:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n      TI_WANTED_ARCHS: 'cpu,cuda,vulkan,gles'\n      TI_DEVICE_MEMORY_GB: '1'\n      TI_RUN_RELEASE_TESTS: '1'\n\n    steps:\n      - name: Restart X Server\n        run: |\n          sudo systemctl restart xorg\n\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: '0'\n\n      - name: Prepare Environment\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n          prepare-build-cache\n          echo CI_DOCKER_RUN_EXTRA_ARGS=\"-v $(pwd):/home/dev/taichi\" >> $GITHUB_ENV\n\n      - name: Build & Install\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-gpu --name taichi-build \\\n            registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/.github/workflows/scripts/build.py\n\n      - name: Test\n        id: test\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-gpu --name taichi-test \\\n             registry.botmaster.tgr/taichi-test-cuda:${{ env.CI_IMAGE_VERSION }} \\\n             /home/dev/taichi/.github/workflows/scripts/unix_test.sh\n        env:\n          EXTRA_TEST_MARKERS: ${{ matrix.extra_markers }}\n\n      - name: Save wheel if test failed\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: broken-wheel\n          path: dist/*\n          retention-days: 7\n\n      - name: Save Bad Captures\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: bad-captures\n          path: taichi-release-tests/bad-compare/*\n          retention-days: 7\n\n  build_and_test_amdgpu_linux:\n    name: Build and Test (AMDGPU)\n    needs: check_files\n    timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 90 || 120 }}\n    runs-on: [self-hosted, amdgpu]\n    env:\n      PY: '3.9'\n      PROJECT_NAME: taichi\n      TI_WANTED_ARCHS: 'cpu,amdgpu'\n      TI_DEVICE_MEMORY_GB: '1'\n      TI_RUN_RELEASE_TESTS: '0'\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_CUDA:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=OFF\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_AMDGPU:BOOL=ON\n\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: '0'\n\n      - name: Prepare Environment\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n          prepare-build-cache\n          echo CI_DOCKER_RUN_EXTRA_ARGS=\"-v $(pwd):/home/dev/taichi\" >> $GITHUB_ENV\n\n      - name: Build & Install\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-amdgpu --name taichi-build \\\n            registry.botmaster.tgr/taichi-build-amdgpu:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/.github/workflows/scripts/build.py\n\n      - name: Test\n        id: test\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-amdgpu --name taichi-test \\\n             registry.botmaster.tgr/taichi-test-amdgpu:${{ env.CI_IMAGE_VERSION }} \\\n             /home/dev/taichi/.github/workflows/scripts/unix_test.sh\n\n      - name: Save wheel if test failed\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: broken-wheel\n          path: dist/*\n          retention-days: 7\n\n      - name: Save Bad Captures\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: bad-captures\n          path: taichi-release-tests/bad-compare/*\n          retention-days: 7\n\n\n  build_and_test_windows:\n    name: Build and Test Windows\n    needs: check_files\n    strategy:\n      matrix:\n        extra_markers:\n        - sm70\n        - not sm70\n    runs-on:\n    - self-hosted\n    - cn\n    - windows\n    - cuda\n    - OpenGL\n    - ${{ matrix.extra_markers == 'sm70' && 'sm70' || 'windows' }}\n    timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 90 || 180 }}\n    env:\n      PY: \"3.9\"\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=ON\n        -DTI_WITH_DX11:BOOL=ON\n        -DTI_WITH_DX12:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_BACKTRACE=ON\n        -DTI_WITH_C_API=ON\n      TI_WANTED_ARCHS: cpu,cuda,vulkan\n      TI_SKIP_VERSION_CHECK: ON\n      TI_DEVICE_MEMORY_GB: '1'\n      TI_RUN_RELEASE_TESTS: '1'\n\n    steps:\n      - name: Workaround checkout issues\n        run: |\n          git config --system core.longpaths true\n          git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD'  # no '|| true' here\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n          submodules: 'recursive'\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.9\n\n      - name: Build\n        if: ${{ needs.check_files.outputs.run_job != 'false' }}\n        shell: cmd\n        run: |\n          . .github/workflows/scripts/common-utils.ps1\n          SetGitCachingProxy\n          python .\\.github\\workflows\\scripts\\build.py\n\n      - name: Test\n        id: test\n        shell: pwsh\n        if: ${{ needs.check_files.outputs.run_job != 'false' }}\n        run: |\n          . .github/workflows/scripts/common-utils.ps1\n          SetGitCachingProxy\n          .\\.github\\workflows\\scripts\\win_test.ps1 -libsDir \"$env:LocalAppData/buildbot\"\n        env:\n          EXTRA_TEST_MARKERS: ${{ matrix.extra_markers }}\n\n      - name: Save wheel if test failed\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: broken-wheel\n          path: dist/*\n          retention-days: 7\n\n      - name: Cleanup Git Cache Configs\n        shell: pwsh\n        if: always()\n        run: |\n          . .github/workflows/scripts/common-utils.ps1\n          UnsetGitCachingProxy\n          exit 0\n\n  build_and_test_m1:\n    name: Build and Test (Apple M1)\n    needs: check_files\n    timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 60 || 120 }}\n    strategy:\n      matrix:\n        include:\n          - os: macos-latest\n            python: 3.9\n    defaults:\n      run:\n        # https://github.com/actions/runner/issues/805#issuecomment-844426478\n        shell: '/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}'\n    runs-on: [self-hosted, m1]\n    env:\n      CXX: clang++\n      PY: ${{ matrix.python }}\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_WITH_CUDA:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_C_API=ON\n        -DTI_WITH_STATIC_C_API=ON\n      TI_WANTED_ARCHS: 'cpu,metal,vulkan'\n      PLATFORM: 'm1'\n      TI_RUN_RELEASE_TESTS: '1'\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n          submodules: 'recursive'\n\n      - name: Build\n        if: ${{ needs.check_files.outputs.run_job != 'false' }}\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n          prepare-build-cache\n          brew install molten-vk\n          brew install llvm@15\n          .github/workflows/scripts/build.py\n        env:\n          CXX: clang++\n\n      - name: Check C-API Export Symbols\n        if: ${{ needs.check_files.outputs.run_job != 'false' }}\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n\n          .github/workflows/scripts/aot-demo.sh check-c-api-export-symbols\n\n      - name: Test\n        id: test\n        if: ${{ needs.check_files.outputs.run_job != 'false' }}\n        run: |\n          .github/workflows/scripts/unix_test.sh\n\n      - name: Save wheel if test failed\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: broken-wheel\n          path: dist/*\n          retention-days: 7\n\n      - name: Save Bad Captures\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: bad-captures\n          path: taichi-release-tests/bad-compare/*\n          retention-days: 7\n\n\n  build_ios_capi:\n    name: Build iOS C-API Static Library\n    needs: check_files\n    timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 60 || 120 }}\n    runs-on: [self-hosted, m1]\n    env:\n      PY: \"3.10\"\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n          submodules: 'recursive'\n\n      - name: Build\n        if: ${{ needs.check_files.outputs.run_job != 'false' }}\n        run: .github/workflows/scripts/build.py ios\n\n      - name: Save Compiled Static Library\n        if: ${{ needs.check_files.outputs.run_job != 'false' }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: libtaichi_c_api.iOS.a\n          path: 'dist/C-API-iOS/*.a'\n          retention-days: 7\n\n  build_and_test_docs:\n    name: Build and Test (Docs)\n    needs: check_files\n    timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 90 || 120 }}\n    runs-on: [self-hosted, Linux, cuda, vulkan, cn]\n    env:\n      PY: '3.9'\n      PROJECT_NAME: taichi\n      TI_WANTED_ARCHS: 'cpu,cuda,vulkan'\n      TI_DEVICE_MEMORY_GB: '1'\n      TI_RUN_RELEASE_TESTS: '1'\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=ON\n        -DTI_WITH_BACKTRACE:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_C_API=ON\n\n    steps:\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: '0'\n\n      - name: Check if there is anything Markdown modified but not covered by CI\n        if: ${{ github.event_name == 'pull_request' }}\n        run: |\n          set +e\n          sort docs/cover-in-ci.lst > /tmp/sorted-cover-list\n          git diff --name-only $BASE_SHA $HEAD_SHA | grep '\\.md$' | sort > /tmp/sorted-modified-list\n          diff -u /tmp/sorted-cover-list /tmp/sorted-modified-list | grep '^\\+docs' > /tmp/uncovered-list\n          if [ -s /tmp/uncovered-list ]; then\n            echo Please add modified docs to docs/cover-in-ci.lst!\n            echo\n            cat /tmp/uncovered-list\n            exit 1\n          else\n            echo No modified docs, or modified docs are all covered in the list\n          fi\n        env:\n          BASE_SHA: ${{ github.event.pull_request.base.sha }}\n          HEAD_SHA: ${{ github.event.pull_request.head.sha }}\n\n      - name: Prepare Environment\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n          prepare-build-cache\n          echo CI_DOCKER_RUN_EXTRA_ARGS=\"-v $(pwd):/home/dev/taichi\" >> $GITHUB_ENV\n\n      - name: Build & Install\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-gpu --name taichi-build \\\n            registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/.github/workflows/scripts/build.py\n\n      - name: Test\n        id: test\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-gpu --name taichi-test \\\n             registry.botmaster.tgr/taichi-test-cuda:${{ env.CI_IMAGE_VERSION }} \\\n             /home/dev/taichi/.github/workflows/scripts/unix-test-docs.sh\n\n  # aot_build_and_test_android_apps:\n  #   name: AOT Build and Test Android Apps\n  #   # Skip this job when testing the offline cache\n  #   if: ${{ github.event.schedule != '0 18 * * *' }}\n  #   needs: check_files\n  #   runs-on: [self-hosted, Linux, cn]\n  #   timeout-minutes: 60\n  #   permissions:\n  #     packages: read\n  #     contents: read\n  #   env:\n  #     REDIS_HOST: botmaster.tgr\n  #     PY: '3.9'\n  #   steps:\n  #     - name: Workaround checkout Needed single revision issue\n  #       run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n  #     - uses: actions/checkout@v3\n  #       name: Checkout taichi\n  #       with:\n  #         fetch-depth: '0'\n  #         submodules: \"recursive\"\n\n  #     - name: Prepare Environment\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: >-\n  #         . .github/workflows/scripts/common-utils.sh;\n  #         prepare-build-cache;\n\n  #         TAICHI_WHEEL_DIR=$(mktemp -d);\n  #         echo TAICHI_WHEEL_DIR=$TAICHI_WHEEL_DIR >> $GITHUB_ENV;\n  #         chmod 0777 $TAICHI_WHEEL_DIR;\n\n  #         echo CI_DOCKER_RUN_EXTRA_ARGS=\"\n  #         -e REDIS_HOST\n  #         -v $(pwd):/home/dev/taichi\n  #         -v $TAICHI_WHEEL_DIR:/taichi-wheel\n  #         \" >> $GITHUB_ENV;\n\n  #     - name: Build Host Taichi\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run --name taichi-build-host \\\n  #           -v $TAICHI_WHEEL_DIR:/home/dev/taichi/dist \\\n  #           registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/build.py\n  #       env:\n  #         TAICHI_CMAKE_ARGS: >-\n  #           -DTI_WITH_OPENGL:BOOL=ON\n  #           -DTI_WITH_VULKAN:BOOL=ON\n  #           -DTI_WITH_C_API=OFF\n\n  #     - name: Build For Android\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         git clean -fxd\n  #         ci-docker-run --name taichi-build-android \\\n  #           registry.botmaster.tgr/taichi-build-android:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/build.py android\n  #       env:\n  #         TAICHI_CMAKE_ARGS: >-\n  #           -DTI_WITH_OPENGL:BOOL=ON\n  #           -DTI_WITH_VULKAN:BOOL=ON\n  #           -DTI_WITH_LLVM:BOOL=OFF\n  #           -DTI_WITH_C_API:BOOL=ON\n\n  #     - name: Test For Android AOT\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run-gpu --name taichi-test-android \\\n  #           registry.botmaster.tgr/taichi-test-android:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/aot-demo.sh build-and-smoke-test-android-aot-demo\n\n  #       env:\n  #         TI_DEVICE_MEMORY_GB: '0.1'\n\n  # aot_build_and_test_android_headless_demos:\n  #   name: AOT Build and Test Android Headless Demos\n  #   # Skip this job when testing the offline cache\n  #   if: ${{ github.event.schedule != '0 18 * * *' }}\n  #   needs: check_files\n  #   runs-on: [self-hosted, Linux, cn]\n  #   timeout-minutes: 60\n  #   permissions:\n  #     packages: read\n  #     contents: read\n  #   env:\n  #     REDIS_HOST: botmaster.tgr\n  #     PY: '3.9'\n  #   steps:\n  #     - name: Workaround checkout Needed single revision issue\n  #       run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n  #     - uses: actions/checkout@v3\n  #       name: Checkout taichi\n  #       with:\n  #         fetch-depth: '0'\n  #         submodules: \"recursive\"\n\n  #     - name: Prepare Environment\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: >-\n  #         . .github/workflows/scripts/common-utils.sh;\n  #         prepare-build-cache;\n\n  #         TAICHI_WHEEL_DIR=$(mktemp -d);\n  #         echo TAICHI_WHEEL_DIR=$TAICHI_WHEEL_DIR >> $GITHUB_ENV;\n  #         chmod 0777 $TAICHI_WHEEL_DIR;\n\n  #         echo CI_DOCKER_RUN_EXTRA_ARGS=\"\n  #         -e REDIS_HOST\n  #         -v $(pwd):/home/dev/taichi\n  #         -v $TAICHI_WHEEL_DIR:/taichi-wheel\n  #         \" >> $GITHUB_ENV;\n\n  #     - name: Build Host Taichi\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run --name taichi-build-host \\\n  #           -v $TAICHI_WHEEL_DIR:/home/dev/taichi/dist \\\n  #           registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/build.py\n  #       env:\n  #         TAICHI_CMAKE_ARGS: >-\n  #           -DTI_WITH_OPENGL:BOOL=ON\n  #           -DTI_WITH_VULKAN:BOOL=ON\n  #           -DTI_WITH_C_API=OFF\n\n  #     - name: Build For Android\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         git clean -fxd\n  #         ci-docker-run --name taichi-build-android \\\n  #           registry.botmaster.tgr/taichi-build-android:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/build.py android\n  #       env:\n  #         TAICHI_CMAKE_ARGS: >-\n  #           -DTI_WITH_OPENGL:BOOL=ON\n  #           -DTI_WITH_VULKAN:BOOL=ON\n  #           -DTI_WITH_LLVM:BOOL=OFF\n  #           -DTI_WITH_C_API=ON\n\n  #     - name: Build & Run C-API Headless Demos (Android)\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run-gpu --name taichi-test-capi-headless-demo \\\n  #           registry.botmaster.tgr/taichi-build-android:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/aot-demo.sh build-and-test-headless-demo\n  #       env:\n  #         TI_DEVICE_MEMORY_GB: '0.1'\n\n  # aot_build_and_test_android_unity_examples:\n  #   name: AOT Build and Test Android Unity Examples\n  #   # Skip this job when testing the offline cache\n  #   if: ${{ github.event.schedule != '0 18 * * *' }}\n  #   needs: check_files\n  #   runs-on: [self-hosted, Linux, cn]\n  #   timeout-minutes: 60\n  #   permissions:\n  #     packages: read\n  #     contents: read\n  #   env:\n  #     REDIS_HOST: botmaster.tgr\n  #     PY: '3.9'\n  #   steps:\n  #     - name: Workaround checkout Needed single revision issue\n  #       run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n  #     - uses: actions/checkout@v3\n  #       name: Checkout taichi\n  #       with:\n  #         fetch-depth: '0'\n  #         submodules: \"recursive\"\n\n  #     - name: Prepare Environment\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: >-\n  #         . .github/workflows/scripts/common-utils.sh;\n  #         prepare-build-cache;\n\n  #         TAICHI_WHEEL_DIR=$(mktemp -d);\n  #         echo TAICHI_WHEEL_DIR=$TAICHI_WHEEL_DIR >> $GITHUB_ENV;\n  #         chmod 0777 $TAICHI_WHEEL_DIR;\n\n  #         echo CI_DOCKER_RUN_EXTRA_ARGS=\"\n  #         -e REDIS_HOST\n  #         -v $(pwd):/home/dev/taichi\n  #         -v $TAICHI_WHEEL_DIR:/taichi-wheel\n  #         \" >> $GITHUB_ENV;\n\n  #     - name: Build Host Taichi\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run --name taichi-build-host \\\n  #           -v $TAICHI_WHEEL_DIR:/home/dev/taichi/dist \\\n  #           registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/build.py\n  #       env:\n  #         TAICHI_CMAKE_ARGS: >-\n  #           -DTI_WITH_OPENGL:BOOL=ON\n  #           -DTI_WITH_VULKAN:BOOL=ON\n  #           -DTI_WITH_C_API=OFF\n\n  #     - name: Build For Android\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         git clean -fxd\n  #         ci-docker-run --name taichi-build-android \\\n  #           registry.botmaster.tgr/taichi-build-android:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/build.py android\n  #       env:\n  #         TAICHI_CMAKE_ARGS: >-\n  #           -DTI_WITH_OPENGL:BOOL=ON\n  #           -DTI_WITH_VULKAN:BOOL=ON\n  #           -DTI_WITH_LLVM:BOOL=OFF\n  #           -DTI_WITH_C_API=ON\n\n  #     - name: Prepare Unity Build Environment\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run --name taichi-prepare-unity-build-env \\\n  #           registry.botmaster.tgr/taichi-build-android:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/aot-demo.sh prepare-unity-build-env\n\n  #     - name: Build Taichi-UnityExample\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run --name taichi-build-unity-demo \\\n  #           registry.taichigraphics.com/unityci-editor:ubuntu-2020.3.14f1-android-1-with-secret-sauce \\\n  #           /home/dev/taichi/.github/workflows/scripts/aot-demo.sh build-unity-demo\n\n  #     - name: Run Taichi-UnityExample (C-API)\n  #       if: ${{ needs.check_files.outputs.run_job != 'false' }}\n  #       run: |\n  #         . .github/workflows/scripts/common-utils.sh\n  #         ci-docker-run --name taichi-run-unity-demo \\\n  #           registry.botmaster.tgr/taichi-test-android:${{ env.CI_IMAGE_VERSION }} \\\n  #           /home/dev/taichi/.github/workflows/scripts/aot-demo.sh smoke-test-unity-demo\n\n  aot_build_and_test_gpu_linux:\n    name: AOT Build and Test (GPU)\n    needs: check_files\n    timeout-minutes: ${{ github.event.schedule != '0 18 * * *' && 90 || 120 }}\n    strategy:\n      matrix:\n        tags:\n          - [self-hosted, cuda, vulkan, cn, driver550]\n    env:\n      PY: '3.9'\n      PROJECT_NAME: taichi\n      TAICHI_CMAKE_ARGS: >-\n        -DTI_WITH_OPENGL:BOOL=OFF\n        -DTI_WITH_VULKAN:BOOL=ON\n        -DTI_WITH_BACKTRACE:BOOL=ON\n        -DTI_BUILD_TESTS:BOOL=ON\n        -DTI_WITH_C_API=ON\n\n    runs-on: ${{ matrix.tags }}\n    steps:\n      - name: Restart X Server\n        run: |\n          sudo systemctl restart xorg\n\n      - name: Workaround checkout Needed single revision issue\n        run: git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD' || true\n\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: '0'\n\n      - name: Prepare Environment\n        run: |\n          . .github/workflows/scripts/common-utils.sh\n          prepare-build-cache\n          echo CI_DOCKER_RUN_EXTRA_ARGS=\"-v $(pwd):/home/dev/taichi\" >> $GITHUB_ENV\n\n      - name: Build & Install\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-gpu --name taichi-build \\\n            registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/.github/workflows/scripts/build.py\n\n      - name: Check C-API Export Symbols\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-gpu --name taichi-test-check-c-api-export-symbols \\\n            registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/.github/workflows/scripts/aot-demo.sh check-c-api-export-symbols\n\n      - name: Build & Run C-API Headless Demos (Desktop)\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n          chown -R 1000:1000 .\n          ci-docker-run-gpu --name taichi-test-capi-headless-demo-desktop \\\n            registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n            /home/dev/taichi/.github/workflows/scripts/aot-demo.sh build-and-test-headless-demo-desktop\n        env:\n          TI_DEVICE_MEMORY_GB: '0.1'\n\n      - name: Compatibility Test\n        id: test\n        run: |\n          [[ ${{needs.check_files.outputs.run_job}} == false ]] && exit 0\n          . .github/workflows/scripts/common-utils.sh\n\n          ci-docker-run-gpu --name taichi-test \\\n             registry.botmaster.tgr/taichi-build-cuda:${{ env.CI_IMAGE_VERSION }} \\\n             /home/dev/taichi/.github/workflows/scripts/unix_aot_compat_test.sh\n\n      - name: Save wheel if test failed\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: broken-wheel\n          path: dist/*\n          retention-days: 7\n\n      - name: Save Bad Captures\n        if: failure() && steps.test.conclusion == 'failure'\n        uses: actions/upload-artifact@v4\n        with:\n          name: bad-captures\n          path: taichi-release-tests/bad-compare/*\n          retention-days: 7\n",
    "readme": "<div align=\"center\">\n  <img width=\"500px\" src=\"https://github.com/taichi-dev/taichi/raw/master/misc/logo.png\"/>\n</div>\n\n---\n[![Latest Release](https://img.shields.io/github/v/release/taichi-dev/taichi?color=blue&label=Latest%20Release)](https://github.com/taichi-dev/taichi/releases/latest)\n[![downloads](https://pepy.tech/badge/taichi)](https://pepy.tech/project/taichi)\n[![CI](https://github.com/taichi-dev/taichi/actions/workflows/testing.yml/badge.svg)](https://github.com/taichi-dev/taichi/actions/workflows/testing.yml)\n[![Nightly Release](https://github.com/taichi-dev/taichi/actions/workflows/release.yml/badge.svg)](https://github.com/taichi-dev/taichi/actions/workflows/release.yml)\n<a href=\"https://discord.gg/f25GRdXRfg\"><img alt=\"discord invitation link\" src=\"https://dcbadge.vercel.app/api/server/f25GRdXRfg?style=flat\"></a>\n\n```shell\npip install taichi  # Install Taichi Lang\nti gallery          # Launch demo gallery\n```\n\n## What is Taichi Lang?\n\nTaichi Lang is an open-source, imperative, parallel programming language for high-performance numerical computation. It is embedded in Python and uses just-in-time (JIT) compiler frameworks, for example LLVM, to offload the compute-intensive Python code to the native GPU or CPU instructions.\n\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/fractal.py#L1-L31\"> <img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/fractal_code.png\" height=\"270px\"></a>  <img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif\" height=\"270px\">\n\nThe language has broad applications spanning real-time physical simulation, numerical computation, augmented reality, artificial intelligence, vision and robotics, visual effects in films and games, general-purpose computing, and much more.\n\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/mpm128.py\"><img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/mpm128.gif\" height=\"192px\"></a>\n<a href=\"https://github.com/taichi-dev/quantaichi\"> <img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/smoke_3d.gif\" height=\"192px\"></a>\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/rendering/sdf_renderer.py\"><img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/sdf_renderer.jpg\" height=\"192px\"></a>\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/euler.py\"><img src=\"https://github.com/taichi-dev/public_files/raw/master/taichi/euler.gif\" height=\"192px\"></a>\n\n<a href=\"https://github.com/taichi-dev/quantaichi\"><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/elastic_letters.gif\" height=\"213px\"></a>\n<a href=\"https://github.com/taichi-dev/quantaichi\"><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fluid_with_bunnies.gif\" height=\"213px\"></a>\n\n[...More](#demos)\n\n## Why Taichi Lang?\n\n- Built around Python: Taichi Lang shares almost the same syntax with Python, allowing you to write algorithms with minimal language barrier. It is also well integrated into the Python ecosystem, including NumPy and PyTorch.\n- Flexibility: Taichi Lang provides a set of generic data containers known as *SNode* (/\u02c8sno\u028ad/), an effective mechanism for composing hierarchical, multi-dimensional fields. This can cover many use patterns in numerical simulation (e.g. [spatially sparse computing](https://docs.taichi-lang.org/docs/sparse)).\n- Performance: With the `@ti.kernel` decorator, Taichi Lang's JIT compiler automatically compiles your Python functions into efficient GPU or CPU machine code for parallel execution.\n- Portability: Write your code once and run it everywhere. Currently, Taichi Lang supports most mainstream GPU APIs, such as CUDA and Vulkan.\n- ... and many more features! A cross-platform, Vulkan-based 3D visualizer, [differentiable programming](https://docs.taichi-lang.org/docs/differentiable_programming),  [quantized computation](https://github.com/taichi-dev/quantaichi) (experimental), etc.\n\n## Getting Started\n\n### Installation\n\n<details>\n  <summary>Prerequisites</summary>\n\n<!--TODO: Precise OS versions-->\n\n- Operating systems\n  - Windows\n  - Linux\n  - macOS\n- Python: 3.6 ~ 3.10 (64-bit only)\n- Compute backends\n  - x64/ARM CPUs\n  - CUDA\n  - Vulkan\n  - OpenGL (4.3+)\n  - Apple Metal\n  - WebAssembly (experiemental)\n </details>\n\nUse Python's package installer **pip** to install Taichi Lang:\n\n```bash\npip install --upgrade taichi\n```\n\n*We also provide a nightly package. Note that nightly packages may crash because they are not fully tested.  We cannot guarantee their validity, and you are at your own risk trying out our latest, untested features. The nightly packages can be installed from our self-hosted PyPI (Using self-hosted PyPI allows us to provide more frequent releases over a longer period of time)*\n\n```bash\npip install -i https://pypi.taichi.graphics/simple/ taichi-nightly\n```\n\n### Run your \"Hello, world!\"\n\nHere is how you can program a 2D fractal in Taichi:\n\n```py\n# python/taichi/examples/simulation/fractal.py\n\nimport taichi as ti\n\nti.init(arch=ti.gpu)\n\nn = 320\npixels = ti.field(dtype=float, shape=(n * 2, n))\n\n\n@ti.func\ndef complex_sqr(z):\n    return ti.Vector([z[0]**2 - z[1]**2, z[1] * z[0] * 2])\n\n\n@ti.kernel\ndef paint(t: float):\n    for i, j in pixels:  # Parallelized over all pixels\n        c = ti.Vector([-0.8, ti.cos(t) * 0.2])\n        z = ti.Vector([i / n - 1, j / n - 0.5]) * 2\n        iterations = 0\n        while z.norm() < 20 and iterations < 50:\n            z = complex_sqr(z) + c\n            iterations += 1\n        pixels[i, j] = 1 - iterations * 0.02\n\n\ngui = ti.GUI(\"Julia Set\", res=(n * 2, n))\n\nfor i in range(1000000):\n    paint(i * 0.03)\n    gui.set_image(pixels)\n    gui.show()\n```\n\n*If Taichi Lang is properly installed, you should get the animation below \ud83c\udf89:*\n\n<a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/simulation/fractal.py#L1-L31\"> </a><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif\" height=\"270px\">\n\nSee [Get started](https://docs.taichi-lang.org) for more information.\n\n### Build from source\n\nIf you wish to try our experimental features or build Taichi Lang for your own environments, see [Developer installation](https://docs.taichi-lang.org/docs/dev_install).\n\n## Documentation\n\n- [Technical documents](https://docs.taichi-lang.org/)\n- [API Reference](https://docs.taichi-lang.org/api/)\n- [Blog](https://docs.taichi-lang.org/blog)\n\n## Community activity [![Time period](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_badge.svg)](https://repography.com)\n[![Timeline graph](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_timeline.svg)](https://github.com/taichi-dev/taichi/commits)\n[![Issue status graph](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_issues.svg)](https://github.com/taichi-dev/taichi/issues)\n[![Pull request status graph](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_prs.svg)](https://github.com/taichi-dev/taichi/pulls)\n[![Trending topics](https://images.repography.com/32602247/taichi-dev/taichi/recent-activity/RlhQybvihwEjfE7ngXyQR9tudBDYAvl27v-NVNMxUrg_words.svg)](https://github.com/taichi-dev/taichi/commits)\n\n## Contributing\n\nKudos to all of our amazing contributors! Taichi Lang thrives through open-source. In that spirit, we welcome all kinds of contributions from the community. If you would like to participate, check out the [Contribution Guidelines](CONTRIBUTING.md) first.\n\n<a href=\"https://github.com/taichi-dev/taichi/graphs/contributors\"><img src=\"https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/contributors_taichi-dev_taichi_18.png\" width=\"800px\"></a>\n\n*Contributor avatars are randomly shuffled.*\n\n## License\n\nTaichi Lang is distributed under the terms of Apache License (Version 2.0).\n\nSee [Apache License](https://github.com/taichi-dev/taichi/blob/master/LICENSE) for details.\n\n## Community\n\nFor more information about the events or community, please refer to [this page](https://github.com/taichi-dev/community)\n\n\n### Join our discussions\n\n- [Discord](https://discord.gg/f25GRdXRfg)\n- [GitHub Discussions](https://github.com/taichi-dev/taichi/discussions)\n- [\u592a\u6781\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6587\u8bba\u575b](https://forum.taichi.graphics/)\n\n### Report an issue\n\n- If you spot an technical or documentation issue, file an issue at [GitHub Issues](https://github.com/taichi-dev/taichi/issues)\n- If you spot any security issue, mail directly to <a href = \"mailto:security@taichi.graphics?subject = Taichi Security Problem\">security@taichi.graphics</a>.\n\n### Contact us\n\n- [Discord](https://discord.gg/f25GRdXRfg)\n- [WeChat](https://forum.taichi-lang.cn/t/topic/2884)\n\n## Reference\n\n### Demos\n\n- [Nerf with Taichi](https://github.com/taichi-dev/taichi-nerfs)\n- [Taichi Lang examples](https://github.com/taichi-dev/taichi/tree/master/python/taichi/examples)\n- [Advanced Taichi Lang examples](https://github.com/taichi-dev/advanced_examples)\n- [Awesome Taichi](https://github.com/taichi-dev/awesome-taichi)\n- [DiffTaichi](https://github.com/taichi-dev/difftaichi)\n- [Taichi elements](https://github.com/taichi-dev/taichi_elements)\n- [Taichi Houdini](https://github.com/taichi-dev/taichi_houdini)\n- [More...](misc/links.md)\n\n\n### AOT deployment\n\n- [Taichi AOT demos & tutorial](https://github.com/taichi-dev/taichi-aot-demo/)\n\n\n### Lectures & talks\n\n- SIGGRAPH 2020 course on Taichi basics: [YouTube](https://youtu.be/Y0-76n3aZFA), [Bilibili](https://www.bilibili.com/video/BV1kA411n7jk/), [slides (pdf)](https://yuanming.taichi.graphics/publication/2020-taichi-tutorial/taichi-tutorial.pdf).\n- Chinagraph 2020 \u7528\u592a\u6781\u7f16\u5199\u7269\u7406\u5f15\u64ce: [\u54d4\u54e9\u54d4\u54e9](https://www.bilibili.com/video/BV1gA411j7H5)\n- GAMES 201 \u9ad8\u7ea7\u7269\u7406\u5f15\u64ce\u5b9e\u6218\u6307\u5357 2020: [\u8bfe\u4ef6](https://github.com/taichi-dev/games201)\n- \u592a\u6781\u56fe\u5f62\u8bfe\u7b2c\u4e00\u5b63\uff1a[\u8bfe\u4ef6](https://github.com/taichiCourse01)\n- [TaichiCon](https://github.com/taichi-dev/taichicon): Taichi Developer Conferences\n- More to come...\n\n### Citations\n\nIf you use Taichi Lang in your research, please cite the corresponding papers:\n\n- [**(SIGGRAPH Asia 2019) Taichi: High-Performance Computation on Sparse Data Structures**](https://yuanming.taichi.graphics/publication/2019-taichi/taichi-lang.pdf) [[Video]](https://youtu.be/wKw8LMF3Djo) [[BibTex]](https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/taichi_bibtex.txt) [[Code]](https://github.com/taichi-dev/taichi)\n- [**(ICLR 2020) DiffTaichi: Differentiable Programming for Physical Simulation**](https://arxiv.org/abs/1910.00935) [[Video]](https://www.youtube.com/watch?v=Z1xvAZve9aE) [[BibTex]](https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/difftaichi_bibtex.txt) [[Code]](https://github.com/yuanming-hu/difftaichi)\n- [**(SIGGRAPH 2021) QuanTaichi: A Compiler for Quantized Simulations**](https://yuanming.taichi.graphics/publication/2021-quantaichi/quantaichi.pdf) [[Video]](https://www.youtube.com/watch?v=0jdrAQOxJlY) [[BibTex]](https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/quantaichi_bibtex.txt) [[Code]](https://github.com/taichi-dev/quantaichi)\n",
    "org": "taichi-dev",
    "repo": "taichi",
    "number": 8752,
    "commit": "ba0e81dce559fb63a5958bf82feb1d00c55c02fe"
}