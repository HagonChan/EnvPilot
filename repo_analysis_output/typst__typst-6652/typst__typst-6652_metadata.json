{
    "primary_language": "Rust",
    "language_guidelines": "Programming Language guidelines for Rust:\n# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\nname: Continuous integration\non: [push, pull_request, merge_group]\n\nenv:\n  RUSTFLAGS: \"-Dwarnings\"\n  RUSTDOCFLAGS: \"-Dwarnings\"\n  TYPST_TESTS_EXTENDED: true\n  PKG_CONFIG_i686-unknown-linux-gnu: /usr/bin/i686-linux-gnu-pkgconf\n\njobs:\n  # This allows us to have one branch protection rule for the full test matrix.\n  # See: https://github.com/orgs/community/discussions/4324\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    needs: [test-matrix]\n    if: always()\n    steps:\n      - name: Tests successful\n        if: ${{ !(contains(needs.*.result, 'failure')) }}\n        run: exit 0\n      - name: Tests failing\n        if: ${{ contains(needs.*.result, 'failure') }}\n        run: exit 1\n\n  test-matrix:\n    name: Tests\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        bits: [64]\n        include:\n          - os: ubuntu-latest\n            bits: 32\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v4\n      - if: startsWith(matrix.os, 'ubuntu-') && matrix.bits == 32\n        run: |\n          sudo dpkg --add-architecture i386\n          sudo apt update\n          sudo apt install -y gcc-multilib libssl-dev:i386 pkg-config:i386\n      - uses: dtolnay/rust-toolchain@1.88.0\n        with:\n          targets: ${{ matrix.bits == 32 && 'i686-unknown-linux-gnu' || '' }}\n      - uses: Swatinem/rust-cache@v2\n        with:\n          key: ${{ matrix.bits }}\n      - run: cargo test --workspace --no-run ${{ matrix.bits == 32 && '--target i686-unknown-linux-gnu' || '' }}\n      - run: cargo test --workspace --no-fail-fast ${{ matrix.bits == 32 && '--target i686-unknown-linux-gnu' || '' }}\n      - name: Upload rendered test output\n        if: failure()\n        uses: actions/upload-artifact@v4\n        with:\n          name: tests-rendered-${{ matrix.os }}-${{ matrix.bits }}\n          path: tests/store/render/**\n          retention-days: 3\n      - name: Update test artifacts\n        if: failure()\n        run: |\n          cargo test --workspace --test tests ${{ matrix.bits == 32 && '--target i686-unknown-linux-gnu' || '' }} -- --update\n          echo 'updated_artifacts=1' >> \"$GITHUB_ENV\"\n      - name: Upload updated reference output (for use if the test changes are desired)\n        if: failure() && env.updated_artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: tests-updated-${{ matrix.os }}-${{ matrix.bits }}\n          path: tests/ref/**\n          retention-days: 3\n\n  checks:\n    name: Check clippy, formatting, and documentation\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: dtolnay/rust-toolchain@1.88.0\n        with:\n          components: clippy, rustfmt\n      - uses: Swatinem/rust-cache@v2\n      - run: cargo clippy --workspace --all-targets --all-features\n      - run: cargo clippy --workspace --all-targets --no-default-features\n      - run: cargo fmt --check --all\n      - run: cargo doc --workspace --no-deps\n      - run: git diff --exit-code\n\n  min-version:\n    name: Check minimum Rust version\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: dtolnay/rust-toolchain@1.88.0\n      - uses: Swatinem/rust-cache@v2\n      - run: cargo check --workspace\n\n  fuzz:\n    name: Check fuzzers\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: nightly-2025-05-10\n      - uses: Swatinem/rust-cache@v2\n      - run: cargo install --locked cargo-fuzz@0.12.0\n      - run: cd tests/fuzz && cargo fuzz build --dev\n\n  miri:\n    name: Check unsafe code\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          components: miri\n          toolchain: nightly-2025-05-10\n      - uses: Swatinem/rust-cache@v2\n      - run: cargo miri test -p typst-library test_miri\n",
    "readme": "<h1 align=\"center\">\n  <img alt=\"Typst\" src=\"https://user-images.githubusercontent.com/17899797/226108480-722b770e-6313-40d7-84f2-26bebb55a281.png\">\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://typst.app/docs/\">\n    <img alt=\"Documentation\" src=\"https://img.shields.io/website?down_message=offline&label=docs&up_color=007aff&up_message=online&url=https%3A%2F%2Ftypst.app%2Fdocs\"\n  ></a>\n  <a href=\"https://typst.app/\">\n    <img alt=\"Typst App\" src=\"https://img.shields.io/website?down_message=offline&label=typst.app&up_color=239dad&up_message=online&url=https%3A%2F%2Ftypst.app\"\n  ></a>\n  <a href=\"https://discord.gg/2uDybryKPe\">\n    <img alt=\"Discord Server\" src=\"https://img.shields.io/discord/1054443721975922748?color=5865F2&label=discord&labelColor=555\"\n  ></a>\n  <a href=\"https://github.com/typst/typst/blob/main/LICENSE\">\n    <img alt=\"Apache-2 License\" src=\"https://img.shields.io/badge/license-Apache%202-brightgreen\"\n  ></a>\n  <a href=\"https://typst.app/jobs/\">\n    <img alt=\"Jobs at Typst\" src=\"https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Ftypst.app%2Fassets%2Fdata%2Fshields.json&query=%24.jobs.text&label=jobs&color=%23A561FF&cacheSeconds=1800\"\n  ></a>\n</p>\n\nTypst is a new markup-based typesetting system that is designed to be as powerful\nas LaTeX while being much easier to learn and use. Typst has:\n\n- Built-in markup for the most common formatting tasks\n- Flexible functions for everything else\n- A tightly integrated scripting system\n- Math typesetting, bibliography management, and more\n- Fast compile times thanks to incremental compilation\n- Friendly error messages in case something goes wrong\n\nThis repository contains the Typst compiler and its CLI, which is everything you\nneed to compile Typst documents locally. For the best writing experience,\nconsider signing up to our [collaborative online editor][app] for free.\n\n## Example\nA [gentle introduction][tutorial] to Typst is available in our documentation.\nHowever, if you want to see the power of Typst encapsulated in one image, here\nit is:\n<p align=\"center\">\n <img alt=\"Example\" width=\"900\" src=\"https://user-images.githubusercontent.com/17899797/228031796-ced0e452-fcee-4ae9-92da-b9287764ff25.png\">\n</p>\n\n\nLet's dissect what's going on:\n\n- We use _set rules_ to configure element properties like the size of pages or\n  the numbering of headings. By setting the page height to `auto`, it scales to\n  fit the content. Set rules accommodate the most common configurations. If you\n  need full control, you can also use [show rules][show] to completely redefine\n  the appearance of an element.\n\n- We insert a heading with the `= Heading` syntax. One equals sign creates a top\n  level heading, two create a subheading and so on. Typst has more lightweight\n  markup like this, see the [syntax] reference for a full list.\n\n- [Mathematical equations][math] are enclosed in dollar signs. By adding extra\n  spaces around the contents of an equation, we can put it into a separate block.\n  Multi-letter identifiers are interpreted as Typst definitions and functions\n  unless put into quotes. This way, we don't need backslashes for things like\n  `floor` and `sqrt`. And `phi.alt` applies the `alt` modifier to the `phi` to\n  select a particular symbol variant.\n\n- Now, we get to some [scripting]. To input code into a Typst document, we can\n  write a hash followed by an expression. We define two variables and a\n  recursive function to compute the n-th fibonacci number. Then, we display the\n  results in a center-aligned table. The table function takes its cells\n  row-by-row. Therefore, we first pass the formulas `$F_1$` to `$F_8$` and then\n  the computed fibonacci numbers. We apply the spreading operator (`..`) to both\n  because they are arrays and we want to pass the arrays' items as individual\n  arguments.\n\n<details>\n  <summary>Text version of the code example.</summary>\n\n  ```typst\n  #set page(width: 10cm, height: auto)\n  #set heading(numbering: \"1.\")\n\n  = Fibonacci sequence\n  The Fibonacci sequence is defined through the\n  recurrence relation $F_n = F_(n-1) + F_(n-2)$.\n  It can also be expressed in _closed form:_\n\n  $ F_n = round(1 / sqrt(5) phi.alt^n), quad\n    phi.alt = (1 + sqrt(5)) / 2 $\n\n  #let count = 8\n  #let nums = range(1, count + 1)\n  #let fib(n) = (\n    if n <= 2 { 1 }\n    else { fib(n - 1) + fib(n - 2) }\n  )\n\n  The first #count numbers of the sequence are:\n\n  #align(center, table(\n    columns: count,\n    ..nums.map(n => $F_#n$),\n    ..nums.map(n => str(fib(n))),\n  ))\n  ```\n</details>\n\n## Installation\nTypst's CLI is available from different sources:\n\n- You can get sources and pre-built binaries for the latest release of Typst\n  from the [releases page][releases]. Download the archive for your platform and\n  place it in a directory that is in your `PATH`. To stay up to date with future\n  releases, you can simply run `typst update`.\n\n- You can install Typst through different package managers. Note that the\n  versions in the package managers might lag behind the latest release.\n  - Linux:\n      - View [Typst on Repology][repology]\n      - View [Typst's Snap][snap]\n  - macOS: `brew install typst`\n  - Windows: `winget install --id Typst.Typst`\n\n- If you have a [Rust][rust] toolchain installed, you can install\n  - the latest released Typst version with\n    `cargo install --locked typst-cli`\n  - a development version with\n    `cargo install --git https://github.com/typst/typst --locked typst-cli`\n\n- Nix users can\n  - use the `typst` package with `nix-shell -p typst`\n  - build and run a development version with\n    `nix run github:typst/typst -- --version`.\n\n- Docker users can run a prebuilt image with\n  `docker run ghcr.io/typst/typst:latest --help`.\n\n## Usage\nOnce you have installed Typst, you can use it like this:\n```sh\n# Creates `file.pdf` in working directory.\ntypst compile file.typ\n\n# Creates PDF file at the desired path.\ntypst compile path/to/source.typ path/to/output.pdf\n```\n\nYou can also watch source files and automatically recompile on changes. This is\nfaster than compiling from scratch each time because Typst has incremental\ncompilation.\n```sh\n# Watches source files and recompiles on changes.\ntypst watch file.typ\n```\n\nTypst further allows you to add custom font paths for your project and list all\nof the fonts it discovered:\n```sh\n# Adds additional directories to search for fonts.\ntypst compile --font-path path/to/fonts file.typ\n\n# Lists all of the discovered fonts in the system and the given directory.\ntypst fonts --font-path path/to/fonts\n\n# Or via environment variable (Linux syntax).\nTYPST_FONT_PATHS=path/to/fonts typst fonts\n```\n\nFor other CLI subcommands and options, see below:\n```sh\n# Prints available subcommands and options.\ntypst help\n\n# Prints detailed usage of a subcommand.\ntypst help watch\n```\n\nIf you prefer an integrated IDE-like experience with autocompletion and instant \npreview, you can also check out our [free web app][app]. Alternatively, there is \na community-created language server called \n[Tinymist](https://myriad-dreamin.github.io/tinymist/) which is integrated into \nvarious editor extensions.\n\n## Community\nThe main places where the community gathers are our [Forum][forum] and our\n[Discord server][discord]. The Forum is a great place to ask questions, help\nothers, and share cool things you created with Typst. The Discord server is more\nsuitable for quicker questions, discussions about contributing, or just to chat.\nWe'd be happy to see you there!\n\n[Typst Universe][universe] is where the community shares templates and packages.\nIf you want to share your own creations, you can submit them to our\n[package repository][packages].\n\nIf you had a bad experience in our community, please [reach out to us][contact].\n\n## Contributing\nWe love to see contributions from the community. If you experience bugs, feel\nfree to open an issue. If you would like to implement a new feature or bug fix,\nplease follow the steps outlined in the [contribution guide][contributing].\n\nTo build Typst yourself, first ensure that you have the\n[latest stable Rust][rust] installed. Then, clone this repository and build the\nCLI with the following commands:\n\n```sh\ngit clone https://github.com/typst/typst\ncd typst\ncargo build --release\n```\n\nThe optimized binary will be stored in `target/release/`.\n\nAnother good way to contribute is by [sharing packages][packages] with the\ncommunity.\n\n## Pronunciation and Spelling\nIPA: /ta\u026apst/. \"Ty\" like in **Ty**pesetting and \"pst\" like in Hi**pst**er. When\nwriting about Typst, capitalize its name as a proper noun, with a capital \"T\".\n\n## Design Principles\nAll of Typst has been designed with three key goals in mind: Power,\nsimplicity, and performance. We think it's time for a system that matches the\npower of LaTeX, is easy to learn and use, all while being fast enough to realize\ninstant preview. To achieve these goals, we follow three core design principles:\n\n- **Simplicity through Consistency:**\n  If you know how to do one thing in Typst, you should be able to transfer that\n  knowledge to other things. If there are multiple ways to do the same thing,\n  one of them should be at a different level of abstraction than the other. E.g.\n  it's okay that `= Introduction` and `#heading[Introduction]` do the same thing\n  because the former is just syntax sugar for the latter.\n\n- **Power through Composability:**\n  There are two ways to make something flexible: Have a knob for everything or\n  have a few knobs that you can combine in many ways. Typst is designed with the\n  second way in mind. We provide systems that you can compose in ways we've\n  never even thought of. TeX is also in the second category, but it's a bit\n  low-level and therefore people use LaTeX instead. But there, we don't really\n  have that much composability. Instead, there's a package for everything\n  (`\\usepackage{knob}`).\n\n- **Performance through Incrementality:**\n  All Typst language features must accommodate for incremental compilation.\n  Luckily we have [`comemo`], a system for incremental compilation which does\n  most of the hard work in the background.\n\n## Acknowledgements\n\nWe'd like to thank everyone who is supporting Typst's development, be it via\n[GitHub sponsors] or elsewhere. In particular, special thanks[^1] go to:\n\n- [Posit](https://posit.co/blog/posit-and-typst/) for financing a full-time\n  compiler engineer\n- [NLnet](https://nlnet.nl/) for supporting work on Typst via multiple grants\n  through the [NGI Zero Core](https://nlnet.nl/core) fund:\n  - Work on [HTML export](https://nlnet.nl/project/Typst-HTML/)\n  - Work on [PDF accessibility](https://nlnet.nl/project/Typst-Accessibility/)\n- [Science & Startups](https://www.science-startups.berlin/) for having financed\n  Typst development from January through June 2023 via the Berlin Startup\n  Scholarship\n- [Zerodha](https://zerodha.tech/blog/1-5-million-pdfs-in-25-minutes/) for their\n  generous one-time sponsorship\n\n[^1]: This list only includes contributions for our open-source work that exceed\n    or are expected to exceed \u20ac10K.\n\n[docs]: https://typst.app/docs/\n[app]: https://typst.app/\n[discord]: https://discord.gg/2uDybryKPe\n[forum]: https://forum.typst.app/\n[universe]: https://typst.app/universe/\n[tutorial]: https://typst.app/docs/tutorial/\n[show]: https://typst.app/docs/reference/styling/#show-rules\n[math]: https://typst.app/docs/reference/math/\n[syntax]: https://typst.app/docs/reference/syntax/\n[scripting]: https://typst.app/docs/reference/scripting/\n[rust]: https://rustup.rs/\n[releases]: https://github.com/typst/typst/releases/\n[repology]: https://repology.org/project/typst/versions\n[contact]: https://typst.app/contact\n[architecture]: https://github.com/typst/typst/blob/main/docs/dev/architecture.md\n[contributing]: https://github.com/typst/typst/blob/main/CONTRIBUTING.md\n[packages]: https://github.com/typst/packages/\n[`comemo`]: https://github.com/typst/comemo/\n[snap]: https://snapcraft.io/typst\n[GitHub sponsors]: https://github.com/sponsors/typst/\n",
    "org": "typst",
    "repo": "typst",
    "number": 6652,
    "commit": "e9f1b5825a9d37ca0c173a7b2830ba36a27ca9e0"
}