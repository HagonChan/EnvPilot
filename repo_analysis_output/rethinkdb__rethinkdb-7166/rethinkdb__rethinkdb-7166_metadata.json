{
    "primary_language": "C++",
    "language_guidelines": "Programming Language guidelines for C++:\n# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\nname: \"Build\"\n\n# NOTE: Although it is deprecated, we use Python 2, because all python scripts\n#  are targeting that in the repository. To drop Python 2, we would need to\n#  update every script, which is a big effort. Also, this locks us into a\n#  given Python driver version (rethinkdb-python < 2.5).\n\non:\n  push:\n    branches:\n      - main\n      - v2.4.x\n  pull_request:\n    branches:\n      - \"*\"\n  schedule:\n    - cron: '00 8 * * 1'\n\njobs:\n  # Preflight runs every test and assertion that has no dependency on the build\n  # directory.\n  preflight:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n      - name: cpplint\n        uses: ./.github/actions/tests\n        with:\n          command: | \n            [ ! -d \"${TEST_OUTPUT_DIR}\" ] && mkdir -p ${TEST_OUTPUT_DIR}\n            ./scripts/check_style.sh | tee ${TEST_OUTPUT_DIR}/cpplint.log\n          download_artifacts: false\n\n\n  # Build job runs after the preflight finished successfully. It configures the\n  # build system, then builds the DB.\n  build:\n    runs-on: ubuntu-latest\n    timeout-minutes: 35\n    needs: preflight\n    steps:\n      - uses: actions/checkout@v4\n      - name: apt install\n        env:\n          DEBIAN_FRONTEND: noninteractive\n        run: |\n          sudo apt update && sudo apt install -y tzdata \\\n              && sudo ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n              && sudo dpkg-reconfigure --frontend noninteractive tzdata\n          sudo apt update && sudo apt install -y \\\n              libc6 libcurl4 \\\n              git build-essential protobuf-compiler \\\n              libprotobuf-dev libcurl4-openssl-dev \\\n              libncurses5-dev m4 g++ libssl-dev \\\n              debhelper curl\n\n      - name: configure\n        run: ./configure --fetch boost --fetch gtest --fetch re2 --fetch jemalloc --fetch quickjs\n\n      - name: make support\n        run: make support -j $(python -c 'import multiprocessing; print(multiprocessing.cpu_count())')\n\n      - name: make DEBUG=1\n        run: make DEBUG=1 -j $(python -c 'import multiprocessing; print(multiprocessing.cpu_count())')\n\n      - name: compress build artifacts for upload\n        if: always()\n        run: tar -czf ${{ github.job }}.tar.gz build\n\n      - name: upload build artifact\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: ${{ github.job }}-artifacts\n          path: |\n            config.mk\n            build.tar.gz\n\n  # Execute the test runner for unit tests.\n  unit-tests:\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    needs: build\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n      - name: unit tests\n        uses: ./.github/actions/tests\n        with:\n          command: |\n            export MAX_JOBS=$(python -c 'import multiprocessing; print(multiprocessing.cpu_count())')\n            test/run --verbose --jobs \"${MAX_JOBS}\" -o ${TEST_OUTPUT_DIR} -H unit\n\n  # Execute the test runner for integration tests.\n  # NOTE: integration tests are using the Python driver, hence we have to setup the\n  #  driver and checkout the exact same commit hash as we do for other tests.\n  integration-tests:\n    runs-on: ubuntu-latest\n    timeout-minutes: 45\n    needs: unit-tests\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n      - name: integration tests\n        uses: ./.github/actions/driver-tests\n        with:\n          driver_name: python\n          driver_dist_dir: /tmp/python-driver/rethinkdb\n          test_command: |\n            export PYTHON_DRIVER=/tmp/python-driver/rethinkdb\n            export MAX_JOBS=$(python -c 'import multiprocessing; print(multiprocessing.cpu_count())')\n            test/run --timeout 300 --jobs \"${MAX_JOBS}\" -o ${TEST_OUTPUT_DIR} -H all '!unit' '!cpplint' '!long' '!disabled'\n\n  long-running-tests:\n    runs-on: ubuntu-latest\n    timeout-minutes: 60\n    needs: unit-tests\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n      - name: long running tests\n        uses: ./.github/actions/driver-tests\n        with:\n          driver_name: python\n          driver_dist_dir: /tmp/python-driver/rethinkdb\n          test_command: |\n            export PYTHON_DRIVER=/tmp/python-driver/rethinkdb\n            export MAX_JOBS=$(python -c 'import multiprocessing; print(multiprocessing.cpu_count())')\n            test/run --timeout 900 --jobs \"${MAX_JOBS}\" -o ${TEST_OUTPUT_DIR} -H long '!disabled'\n\n  # Execute the test runner for polyglot tests.\n  # NOTE: We are not running \"language group\" tests (like `py`, `rb`, or `js`) because\n  #  those interpreter versions listed in the groups are way deprecated. Instead, we\n  #  are running one test per language as a sanity check. We should run language groups\n  #  when we ensured that drivers are supporting never interpreter versions.\n  polyglot-tests-python:\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    needs:\n      - integration-tests\n      - long-running-tests\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n      - name: polyglot tests for python\n        uses: ./.github/actions/driver-tests\n        with:\n          driver_name: python\n          driver_dist_dir: /tmp/python-driver/rethinkdb\n          interpreter: py3.12\n          test_target: polyglot\n\n  polyglot-tests-javascript:\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    needs:\n      - integration-tests\n      - long-running-tests\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16.14'\n\n      - name: polyglot tests for javascript\n        uses: ./.github/actions/driver-tests\n        with:\n          driver_name: javascript\n          driver_dist_dir: /tmp/driver/dist\n          repo_url: https://github.com/rethinkdb/rethinkdb-javascript.git\n          # TODO: This commit is pointing after driver extraction, hence it should be the baseline.\n          #  When all tests are passing using this commit hash, update the hash to the latest and\n          #  fix the newly raised issues.\n          commit_hash: c717cb9e2bdab77b55b7a31a5d780ba293c5fadf\n          interpreter: js16.14\n          test_target: polyglot\n          install_command: npm install && npm run build\n\n  polyglot-tests-ruby:\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    needs:\n      - integration-tests\n      - long-running-tests\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.12'\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '2.7'\n\n      - name: polyglot tests for ruby\n        uses: ./.github/actions/driver-tests\n        with:\n          driver_name: ruby\n          driver_dist_dir: /tmp/driver/lib\n          repo_url: https://github.com/rethinkdb/rethinkdb-ruby.git\n          commit_hash: 25781763f1af4e85116c80fd0cc988927e9c6829\n          interpreter: rb2.7\n          test_target: polyglot\n          install_command: bundle update --bundler && bundle install && rake build\n",
    "readme": "<img style=\"width:100%;\" src=\"/github-banner.png\">\n\n[RethinkDB](https://www.rethinkdb.com)\n======================================\n\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3038/badge)](https://bestpractices.coreinfrastructure.org/projects/3038)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/6e0fed97691941b1aa3fc5098bfc9385)](https://www.codacy.com/app/RethinkDB/rethinkdb?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=rethinkdb/rethinkdb&amp;utm_campaign=Badge_Grade)\n\nWhat is RethinkDB?\n------------------\n\n* **Open-source** database for building realtime web applications\n* **NoSQL** database that stores schemaless JSON documents\n* **Distributed** database that is easy to scale\n* **High availability** database with automatic failover and robust fault tolerance\n\nRethinkDB is the first open-source scalable database built for\nrealtime applications. It exposes a new database access model, in\nwhich the developer can tell the database to continuously push updated\nquery results to applications without polling for changes.  RethinkDB\nallows developers to build scalable realtime apps in a fraction of the\ntime with less effort.\n\nTo learn more, check out [rethinkdb.com](https://rethinkdb.com).\n\nNot sure what types of projects RethinkDB can help you build? Here are a few examples:\n\n* Build a [realtime liveblog](https://rethinkdb.com/blog/rethinkdb-pubnub/) with RethinkDB and PubNub\n* Create a [collaborative photo sharing whiteboard](https://www.youtube.com/watch?v=pdPRp3UxL_s)\n* Build an [IRC bot in Go](https://rethinkdb.com/blog/go-irc-bot/) with RethinkDB changefeeds\n* Look at [cats on Instagram in realtime](https://rethinkdb.com/blog/cats-of-instagram/)\n* Watch [how Platzi uses RethinkDB](https://www.youtube.com/watch?v=Nb_UzRYDB40) to educate\n\n\nQuickstart\n----------\n\nFor a thirty-second RethinkDB quickstart, check out\n[rethinkdb.com/docs/quickstart](https://www.rethinkdb.com/docs/quickstart).\n\nOr, get started right away with our ten-minute guide in these languages:\n\n* [**JavaScript**](https://rethinkdb.com/docs/guide/javascript/)\n* [**Python**](https://rethinkdb.com/docs/guide/python/)\n* [**Ruby**](https://rethinkdb.com/docs/guide/ruby/)\n* [**Java**](https://rethinkdb.com/docs/guide/java/)\n\nBesides our four official drivers, we also have many [third-party drivers](https://rethinkdb.com/docs/install-drivers/) supported by the RethinkDB community. Here are a few of them:\n\n* **C#/.NET:** [RethinkDb.Driver](https://github.com/bchavez/RethinkDb.Driver), [rethinkdb-net](https://github.com/mfenniak/rethinkdb-net)\n* **C++:** [librethinkdbxx](https://github.com/AtnNn/librethinkdbxx)\n* **Clojure:** [clj-rethinkdb](https://github.com/apa512/clj-rethinkdb)\n* **Elixir:** [rethinkdb-elixir](https://github.com/rethinkdb/rethinkdb-elixir)\n* **Go:** [GoRethink](https://github.com/dancannon/gorethink)\n* **Haskell:** [haskell-rethinkdb](https://github.com/atnnn/haskell-rethinkdb)\n* **PHP:** [php-rql](https://github.com/danielmewes/php-rql)\n* **Rust:** [reql](https://github.com/rust-rethinkdb/reql)\n* **Scala:** [rethink-scala](https://github.com/kclay/rethink-scala)\n\nLooking to explore what else RethinkDB offers or the specifics of\nReQL? Check out [our RethinkDB docs](https://rethinkdb.com/docs/) and\n[ReQL API](https://rethinkdb.com/api/).\n\nBuilding\n--------\n\nFirst install some dependencies.  For example, on Ubuntu or Debian:\n\n    sudo apt-get install build-essential protobuf-compiler \\\n        # python \\  # for older distros\n        python3 python-is-python3 \\\n        libprotobuf-dev libcurl4-openssl-dev \\\n        libncurses5-dev libjemalloc-dev wget m4 g++ libssl-dev\n\nGenerally, you will need\n\n* GCC or Clang\n* Protocol Buffers\n* jemalloc\n* Ncurses\n* Python 2 or Python 3\n* libcurl\n* libcrypto (OpenSSL)\n* libssl-dev\n\nThen, to build:\n\n    ./configure --allow-fetch\n    # or run ./configure --allow-fetch CXX=clang++\n\n    make -j4\n    # or run make -j4 DEBUG=1\n\n    sudo make install\n    # or run ./build/debug_clang/rethinkdb\n\nSee WINDOWS.md and mk/README.md for build instructions for Windows and\nFreeBSD.\n\nNeed help?\n----------\n\nA great place to start is\n[rethinkdb.com/community](https://rethinkdb.com/community). Here you\ncan find out how to ask us questions, reach out to us, or [report an\nissue](https://github.com/rethinkdb/rethinkdb/issues). You'll be able\nto find all the places we frequent online and at which conference or\nmeetups you might be able to meet us next.\n\nIf you need help right now, you can also find us [on\nSlack](https://join.slack.com/t/rethinkdb/shared_invite/enQtNzAxOTUzNTk1NzMzLWY5ZTA0OTNmMWJiOWFmOGVhNTUxZjQzODQyZjIzNjgzZjdjZDFjNDg1NDY3MjFhYmNhOTY1MDVkNDgzMWZiZWM),\n[Twitter](https://twitter.com/rethinkdb), or IRC at\n[#rethinkdb](irc://chat.freenode.net/#rethinkdb) on Freenode.\n\nContributing\n------------\n\nRethinkDB was built by a dedicated team, but it wouldn't have been\npossible without the support and contributions of hundreds of people\nfrom all over the world. We could use your help too! Check out our\n[contributing guidelines](CONTRIBUTING.md) to get started.\n\nDonors\n------\n\n* [CNCF](https://www.cncf.io/)\n* [Digital Ocean](https://www.digitalocean.com/) provides infrastructure and servers needed for serving mission-critical sites like download.rethinkdb.com or update.rethinkdb.com\n* [Atlassian](https://www.atlassian.com/) provides OSS license to be able to handle internal tickets like vulnerability issues\n* [Netlify](https://www.netlify.com/) OSS license to be able to migrate rethinkdb.com\n* [DNSimple](https://dnsimple.com) provides DNS services for the RethinkDB project\n* [ZeroTier](https://www.zerotier.com) sponsored the development of per-table configurable write aggregation including the ability to set write delay to infinite to create a memory-only table ([PR #6392](https://github.com/rethinkdb/rethinkdb/pull/6392))\n\nLicensing\n---------\n\nRethinkDB is licensed by the Linux Foundation under the open-source\nApache 2.0 license. Portions of the software are licensed by Google\nand others and used with permission or subject to their respective\nlicense agreements.\n\nWhere's the changelog?\n----------------------\nWe keep [a list of changes and feature explanations here](NOTES.md).\n",
    "org": "rethinkdb",
    "repo": "rethinkdb",
    "number": 7166,
    "commit": "a6c7cbc345dac1eac86fe343a380cb14cd2a2980"
}