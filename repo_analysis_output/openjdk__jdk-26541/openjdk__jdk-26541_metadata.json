{
    "primary_language": "Java",
    "language_guidelines": "Programming Language guidelines for Java:\n# General Guidelines:\n**General Guidelines for Java Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for any dependencies listed in the README or in configuration files like `pom.xml` (for Maven) or `build.gradle` (for Gradle). Ensure you have the required JDK version installed.  \n\n3. **Build Tool**  \n   Identify which build tool the project is using: Maven or Gradle. This information should be available in the README or through project configuration files (`pom.xml` for Maven, `build.gradle` for Gradle).  \n\n4. **Build the Project**  \n   Use the appropriate commands based on the build tool:  \n   - For Maven:  \n     ```  \n     mvn clean install  \n     ```  \n   - For Gradle:  \n     ```  \n     gradle build  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., property files, YAML files) and set them up accordingly.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly.  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific class, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build-alpine-linux.yml\nContent:\n#\n# Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n#\n# This code is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License version 2 only, as\n# published by the Free Software Foundation.  Oracle designates this\n# particular file as subject to the \"Classpath\" exception as provided\n# by Oracle in the LICENSE file that accompanied this code.\n#\n# This code is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# version 2 for more details (a copy is included in the LICENSE file that\n# accompanied this code).\n#\n# You should have received a copy of the GNU General Public License version\n# 2 along with this work; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n# or visit www.oracle.com if you need additional information or have any\n# questions.\n#\n\nname: 'Build (alpine-linux)'\n\non:\n  workflow_call:\n    inputs:\n      platform:\n        required: true\n        type: string\n      extra-conf-options:\n        required: false\n        type: string\n      make-target:\n        required: false\n        type: string\n        default: 'product-bundles test-bundles'\n      debug-levels:\n        required: false\n        type: string\n        default: '[ \"debug\", \"release\" ]'\n      apk-extra-packages:\n        required: false\n        type: string\n      configure-arguments:\n        required: false\n        type: string\n      make-arguments:\n        required: false\n        type: string\n      dry-run:\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  build-linux:\n    name: build\n    runs-on: ubuntu-22.04\n    container:\n      image: alpine:3.20\n\n    strategy:\n      fail-fast: false\n      matrix:\n        debug-level: ${{ fromJSON(inputs.debug-levels) }}\n        include:\n          - debug-level: debug\n            flags: --with-debug-level=fastdebug\n            suffix: -debug+\n\n    steps:\n      - name: 'Checkout the JDK source'\n        uses: actions/checkout@v4\n\n      - name: 'Install toolchain and dependencies'\n        run: |\n          apk update\n          apk add alpine-sdk alsa-lib-dev autoconf bash cups-dev cups-libs fontconfig-dev freetype-dev grep libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev libxtst-dev linux-headers wget zip ${{ inputs.apk-extra-packages }}\n\n      - name: 'Get the BootJDK'\n        id: bootjdk\n        uses: ./.github/actions/get-bootjdk\n        with:\n          platform: alpine-linux-x64\n\n      - name: 'Configure'\n        run: >\n          bash configure\n          --with-conf-name=${{ inputs.platform }}\n          ${{ matrix.flags }}\n          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n          --with-zlib=system\n          --with-jmod-compress=zip-1\n          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (\n          echo \"Dumping config.log:\" &&\n          cat config.log &&\n          exit 1)\n\n      - name: 'Build'\n        id: build\n        uses: ./.github/actions/do-build\n        with:\n          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'\n          platform: ${{ inputs.platform }}\n          debug-suffix: '${{ matrix.suffix }}'\n        if: ${{ inputs.dry-run == false }}\n\n      - name: 'Upload bundles'\n        uses: ./.github/actions/upload-bundles\n        with:\n          platform: ${{ inputs.platform }}\n          debug-suffix: '${{ matrix.suffix }}'\n        if: ${{ inputs.dry-run == false }}\n\nfile: build-cross-compile.yml\nContent:\n#\n# Copyright (c) 2022, 2024, Oracle and/or its affiliates. All rights reserved.\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n#\n# This code is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License version 2 only, as\n# published by the Free Software Foundation.  Oracle designates this\n# particular file as subject to the \"Classpath\" exception as provided\n# by Oracle in the LICENSE file that accompanied this code.\n#\n# This code is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# version 2 for more details (a copy is included in the LICENSE file that\n# accompanied this code).\n#\n# You should have received a copy of the GNU General Public License version\n# 2 along with this work; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n# or visit www.oracle.com if you need additional information or have any\n# questions.\n#\n\nname: 'Build (cross-compile)'\n\non:\n  workflow_call:\n    inputs:\n      gcc-major-version:\n        required: true\n        type: string\n      extra-conf-options:\n        required: false\n        type: string\n      configure-arguments:\n        required: false\n        type: string\n      make-arguments:\n        required: false\n        type: string\n      dry-run:\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  build-cross-compile:\n    name: build\n    runs-on: ubuntu-22.04\n\n    strategy:\n      fail-fast: false\n      matrix:\n        target-cpu:\n          - aarch64\n          - arm\n          - s390x\n          - ppc64le\n          - riscv64\n        include:\n          - target-cpu: aarch64\n            gnu-arch: aarch64\n            debian-arch: arm64\n            debian-repository: https://httpredir.debian.org/debian/\n            debian-version: bookworm\n            tolerate-sysroot-errors: false\n          - target-cpu: arm\n            gnu-arch: arm\n            debian-arch: armhf\n            debian-repository: https://httpredir.debian.org/debian/\n            debian-version: bookworm\n            tolerate-sysroot-errors: false\n            gnu-abi: eabihf\n          - target-cpu: s390x\n            gnu-arch: s390x\n            debian-arch: s390x\n            debian-repository: https://httpredir.debian.org/debian/\n            debian-version: bookworm\n            tolerate-sysroot-errors: false\n          - target-cpu: ppc64le\n            gnu-arch: powerpc64le\n            debian-arch: ppc64el\n            debian-repository: https://httpredir.debian.org/debian/\n            debian-version: bookworm\n            tolerate-sysroot-errors: false\n          - target-cpu: riscv64\n            gnu-arch: riscv64\n            debian-arch: riscv64\n            debian-repository: https://httpredir.debian.org/debian/\n            debian-version: sid\n            tolerate-sysroot-errors: true\n\n    steps:\n      - name: 'Checkout the JDK source'\n        uses: actions/checkout@v4\n\n      - name: 'Get the BootJDK'\n        id: bootjdk\n        uses: ./.github/actions/get-bootjdk\n        with:\n          platform: linux-x64\n\n      - name: 'Get GTest'\n        id: gtest\n        uses: ./.github/actions/get-gtest\n\n        # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.\n      - name: 'Install toolchain and dependencies'\n        run: |\n          # Install dependencies using apt-get\n          sudo apt-get update\n          sudo apt-get install --only-upgrade apt\n          sudo apt-get install \\\n              gcc-${{ inputs.gcc-major-version }} \\\n              g++-${{ inputs.gcc-major-version }} \\\n              gcc-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}} \\\n              g++-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}} \\\n              libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-major-version }} 100 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-major-version }}\n\n      - name: 'Check cache for sysroot'\n        id: get-cached-sysroot\n        uses: actions/cache@v4\n        with:\n          path: sysroot\n          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('./.github/workflows/build-cross-compile.yml') }}\n\n      - name: 'Install sysroot dependencies'\n        run: sudo apt-get install debootstrap qemu-user-static\n        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'\n\n      - name: 'Create sysroot'\n        id: create-sysroot\n        run: >\n          sudo debootstrap\n          --no-merged-usr\n          --arch=${{ matrix.debian-arch }}\n          --verbose\n          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype-dev,libpng-dev\n          --resolve-deps\n          --variant=minbase\n          ${{ matrix.debian-version }}\n          sysroot\n          ${{ matrix.debian-repository }}\n        continue-on-error: ${{ matrix.tolerate-sysroot-errors }}\n        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'\n\n      - name: 'Prepare sysroot'\n        run: |\n          # Prepare sysroot and remove unused files to minimize cache\n          sudo chroot sysroot symlinks -cr .\n          sudo chown ${USER} -R sysroot\n          rm -rf sysroot/{dev,proc,run,sys,var}\n          rm -rf sysroot/usr/{sbin,bin,share}\n          rm -rf sysroot/usr/lib/{apt,gcc,udev,systemd}\n          rm -rf sysroot/usr/libexec/gcc\n          # /{bin,sbin,lib}/ are not symbolic links to /usr/{bin,sbin,lib}/ when debootstrap with --no-merged-usr\n          rm -rf sysroot/{sbin,bin}\n          rm -rf sysroot/lib/{udev,systemd}\n        if: steps.create-sysroot.outcome == 'success' && steps.get-cached-sysroot.outputs.cache-hit != 'true'\n\n      - name: 'Remove broken sysroot'\n        run: |\n          sudo rm -rf sysroot/\n        if: steps.create-sysroot.outcome != 'success' && steps.get-cached-sysroot.outputs.cache-hit != 'true'\n\n      - name: 'Configure'\n        run: >\n          bash configure\n          --with-conf-name=linux-${{ matrix.target-cpu }}\n          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n          --with-gtest=${{ steps.gtest.outputs.path }}\n          --with-zlib=system\n          --enable-debug\n          --disable-precompiled-headers\n          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}\n          --with-sysroot=sysroot\n          --with-jmod-compress=zip-1\n          CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}-gcc-${{ inputs.gcc-major-version }}\n          CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}-g++-${{ inputs.gcc-major-version }}\n          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (\n          echo \"Dumping config.log:\" &&\n          cat config.log &&\n          exit 1)\n        if: steps.create-sysroot.outcome == 'success' || steps.get-cached-sysroot.outputs.cache-hit == 'true'\n\n      - name: 'Build'\n        id: build\n        uses: ./.github/actions/do-build\n        with:\n          make-target: 'hotspot ${{ inputs.make-arguments }}'\n          platform: linux-${{ matrix.target-cpu }}\n        if: ((steps.create-sysroot.outcome == 'success' || steps.get-cached-sysroot.outputs.cache-hit == 'true') && inputs.dry-run == false)\n\nfile: build-linux.yml\nContent:\n#\n# Copyright (c) 2022, 2024, Oracle and/or its affiliates. All rights reserved.\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n#\n# This code is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License version 2 only, as\n# published by the Free Software Foundation.  Oracle designates this\n# particular file as subject to the \"Classpath\" exception as provided\n# by Oracle in the LICENSE file that accompanied this code.\n#\n# This code is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# version 2 for more details (a copy is included in the LICENSE file that\n# accompanied this code).\n#\n# You should have received a copy of the GNU General Public License version\n# 2 along with this work; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n# or visit www.oracle.com if you need additional information or have any\n# questions.\n#\n\nname: 'Build (linux)'\n\non:\n  workflow_call:\n    inputs:\n      platform:\n        required: true\n        type: string\n      extra-conf-options:\n        required: false\n        type: string\n      make-target:\n        required: false\n        type: string\n        default: 'product-bundles test-bundles'\n      debug-levels:\n        required: false\n        type: string\n        default: '[ \"debug\", \"release\" ]'\n      gcc-major-version:\n        required: true\n        type: string\n      gcc-package-suffix:\n        required: false\n        type: string\n        default: ''\n      apt-architecture:\n        required: false\n        type: string\n      apt-extra-packages:\n        required: false\n        type: string\n      configure-arguments:\n        required: false\n        type: string\n      make-arguments:\n        required: false\n        type: string\n      dry-run:\n        required: false\n        type: boolean\n        default: false\n      bundle-suffix:\n        required: false\n        type: string\n      static-suffix:\n        required: false\n        type: string\n\njobs:\n  build-linux:\n    name: build\n    runs-on: ubuntu-22.04\n\n    strategy:\n      fail-fast: false\n      matrix:\n        debug-level: ${{ fromJSON(inputs.debug-levels) }}\n\n    steps:\n      - name: 'Checkout the JDK source'\n        uses: actions/checkout@v4\n\n      - name: 'Get the BootJDK'\n        id: bootjdk\n        uses: ./.github/actions/get-bootjdk\n        with:\n          platform: linux-x64\n\n      - name: 'Get JTReg'\n        id: jtreg\n        uses: ./.github/actions/get-jtreg\n\n      - name: 'Get GTest'\n        id: gtest\n        uses: ./.github/actions/get-gtest\n\n      - name: 'Set architecture'\n        id: arch\n        run: |\n          # Set a proper suffix for packages if using a different architecture\n          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then\n            echo 'suffix=:${{ inputs.apt-architecture }}' >> $GITHUB_OUTPUT\n          fi\n\n      # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.\n      - name: 'Install toolchain and dependencies'\n        run: |\n          # Install dependencies using apt-get\n          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then\n            sudo dpkg --add-architecture ${{ inputs.apt-architecture }}\n          fi\n          sudo apt-get update\n          sudo apt-get install --only-upgrade apt\n          sudo apt-get install gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }}\n          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-major-version }} 100 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-major-version }}\n\n      - name: 'Configure'\n        run: >\n          bash configure\n          --with-conf-name=${{ inputs.platform }}\n          ${{ matrix.debug-level == 'debug' && '--with-debug-level=fastdebug' || '' }}\n          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n          --with-jtreg=${{ steps.jtreg.outputs.path }}\n          --with-gtest=${{ steps.gtest.outputs.path }}\n          --with-zlib=system\n          --with-jmod-compress=zip-1\n          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (\n          echo \"Dumping config.log:\" &&\n          cat config.log &&\n          exit 1)\n\n      - name: 'Build'\n        id: build\n        uses: ./.github/actions/do-build\n        with:\n          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'\n          platform: ${{ inputs.platform }}\n          debug-suffix: \"${{ matrix.debug-level == 'debug' && '-debug' || '' }}\"\n        if: ${{ inputs.dry-run == false }}\n\n      - name: 'Upload bundles'\n        uses: ./.github/actions/upload-bundles\n        with:\n          platform: ${{ inputs.platform }}\n          debug-suffix: \"${{ matrix.debug-level == 'debug' && '-debug' || '' }}\"\n          bundle-suffix: ${{ inputs.bundle-suffix }}\n          static-suffix: ${{ inputs.static-suffix }}\n        if: ${{ inputs.dry-run == false }}\n\nfile: build-macos.yml\nContent:\n#\n# Copyright (c) 2022, 2024, Oracle and/or its affiliates. All rights reserved.\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n#\n# This code is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License version 2 only, as\n# published by the Free Software Foundation.  Oracle designates this\n# particular file as subject to the \"Classpath\" exception as provided\n# by Oracle in the LICENSE file that accompanied this code.\n#\n# This code is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# version 2 for more details (a copy is included in the LICENSE file that\n# accompanied this code).\n#\n# You should have received a copy of the GNU General Public License version\n# 2 along with this work; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n# or visit www.oracle.com if you need additional information or have any\n# questions.\n#\n\nname: 'Build (macos)'\n\non:\n  workflow_call:\n    inputs:\n      platform:\n        required: true\n        type: string\n      runs-on:\n        required: true\n        type: string\n      extra-conf-options:\n        required: false\n        type: string\n      make-target:\n        required: false\n        type: string\n        default: 'product-bundles test-bundles'\n      debug-levels:\n        required: false\n        type: string\n        default: '[ \"debug\", \"release\" ]'\n      xcode-toolset-version:\n        required: true\n        type: string\n      configure-arguments:\n        required: false\n        type: string\n      make-arguments:\n        required: false\n        type: string\n      dry-run:\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  build-macos:\n    name: build\n    runs-on: ${{ inputs.runs-on }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        debug-level: ${{ fromJSON(inputs.debug-levels) }}\n        include:\n          - debug-level: debug\n            flags: --with-debug-level=fastdebug\n            suffix: -debug\n\n    steps:\n      - name: 'Checkout the JDK source'\n        uses: actions/checkout@v4\n\n      - name: 'Get the BootJDK'\n        id: bootjdk\n        uses: ./.github/actions/get-bootjdk\n        with:\n          platform: ${{ inputs.platform }}\n\n      - name: 'Get JTReg'\n        id: jtreg\n        uses: ./.github/actions/get-jtreg\n\n      - name: 'Get GTest'\n        id: gtest\n        uses: ./.github/actions/get-gtest\n\n      - name: 'Install toolchain and dependencies'\n        run: |\n          # Run Homebrew installation and xcode-select\n          brew install autoconf make\n          sudo xcode-select --switch /Applications/Xcode_${{ inputs.xcode-toolset-version }}.app/Contents/Developer\n          # This will make GNU make available as 'make' and not only as 'gmake'\n          echo '/usr/local/opt/make/libexec/gnubin' >> $GITHUB_PATH\n\n      - name: 'Configure'\n        run: >\n          bash configure\n          --with-conf-name=${{ inputs.platform }}\n          ${{ matrix.flags }}\n          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n          --with-jtreg=${{ steps.jtreg.outputs.path }}\n          --with-gtest=${{ steps.gtest.outputs.path }}\n          --with-zlib=system\n          --with-jmod-compress=zip-1\n          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (\n          echo \"Dumping config.log:\" &&\n          cat config.log &&\n          exit 1)\n\n      - name: 'Build'\n        id: build\n        uses: ./.github/actions/do-build\n        with:\n          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'\n          platform: ${{ inputs.platform }}\n          debug-suffix: '${{ matrix.suffix }}'\n        if: ${{ inputs.dry-run == false }}\n\n      - name: 'Upload bundles'\n        uses: ./.github/actions/upload-bundles\n        with:\n          platform: ${{ inputs.platform }}\n          debug-suffix: '${{ matrix.suffix }}'\n        if: ${{ inputs.dry-run == false }}\n\nfile: build-windows.yml\nContent:\n#\n# Copyright (c) 2022, 2023, Oracle and/or its affiliates. All rights reserved.\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n#\n# This code is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License version 2 only, as\n# published by the Free Software Foundation.  Oracle designates this\n# particular file as subject to the \"Classpath\" exception as provided\n# by Oracle in the LICENSE file that accompanied this code.\n#\n# This code is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# version 2 for more details (a copy is included in the LICENSE file that\n# accompanied this code).\n#\n# You should have received a copy of the GNU General Public License version\n# 2 along with this work; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n# or visit www.oracle.com if you need additional information or have any\n# questions.\n#\n\nname: 'Build (windows)'\n\non:\n  workflow_call:\n    inputs:\n      platform:\n        required: true\n        type: string\n      extra-conf-options:\n        required: false\n        type: string\n      make-target:\n        required: false\n        type: string\n        default: 'product-bundles test-bundles'\n      debug-levels:\n        required: false\n        type: string\n        default: '[ \"debug\", \"release\" ]'\n      msvc-toolset-version:\n        required: true\n        type: string\n      msvc-toolset-architecture:\n        required: true\n        type: string\n      configure-arguments:\n        required: false\n        type: string\n      make-arguments:\n        required: false\n        type: string\n      dry-run:\n        required: false\n        type: boolean\n        default: false\n\nenv:\n  # These are needed to make the MSYS2 bash work properly\n  MSYS2_PATH_TYPE: minimal\n  CHERE_INVOKING: 1\n\njobs:\n  build-windows:\n    name: build\n    runs-on: windows-2025\n    defaults:\n      run:\n        shell: bash\n\n    strategy:\n      fail-fast: false\n      matrix:\n        debug-level: ${{ fromJSON(inputs.debug-levels) }}\n        include:\n          - debug-level: debug\n            flags: --with-debug-level=fastdebug\n            suffix: -debug\n\n    steps:\n      - name: 'Checkout the JDK source'\n        uses: actions/checkout@v4\n\n      - name: 'Get MSYS2'\n        uses: ./.github/actions/get-msys2\n\n      - name: 'Get the BootJDK'\n        id: bootjdk\n        uses: ./.github/actions/get-bootjdk\n        with:\n          platform: windows-x64\n\n      - name: 'Get JTReg'\n        id: jtreg\n        uses: ./.github/actions/get-jtreg\n\n      - name: 'Get GTest'\n        id: gtest\n        uses: ./.github/actions/get-gtest\n\n      - name: 'Check toolchain installed'\n        id: toolchain-check\n        run: |\n          set +e\n          '/c/Program Files/Microsoft Visual Studio/2022/Enterprise/vc/auxiliary/build/vcvars64.bat' -vcvars_ver=${{ inputs.msvc-toolset-version }}\n          if [ $? -eq 0 ]; then\n            echo \"Toolchain is already installed\"\n            echo \"toolchain-installed=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"Toolchain is not yet installed\"\n            echo \"toolchain-installed=false\" >> $GITHUB_OUTPUT\n          fi\n\n      - name: 'Install toolchain and dependencies'\n        run: |\n          # Run Visual Studio Installer\n          '/c/Program Files (x86)/Microsoft Visual Studio/Installer/vs_installer.exe' \\\n            modify --quiet --installPath 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise' \\\n            --add Microsoft.VisualStudio.Component.VC.${{ inputs.msvc-toolset-version }}.${{ inputs.msvc-toolset-architecture }}\n        if: steps.toolchain-check.outputs.toolchain-installed != 'true'\n\n      - name: 'Configure'\n        run: >\n          bash configure\n          --with-conf-name=${{ inputs.platform }}\n          ${{ matrix.flags }}\n          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n          --with-jtreg=${{ steps.jtreg.outputs.path }}\n          --with-gtest=${{ steps.gtest.outputs.path }}\n          --with-msvc-toolset-version=${{ inputs.msvc-toolset-version }}\n          --with-jmod-compress=zip-1\n          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (\n          echo \"Dumping config.log:\" &&\n          cat config.log &&\n          exit 1)\n        env:\n          # We need a minimal PATH on Windows\n          # Set PATH to \"\", so just GITHUB_PATH is included\n          PATH: ''\n        shell: env /usr/bin/bash --login -eo pipefail {0}\n        if: ${{ inputs.dry-run == false }}\n\n      - name: 'Build'\n        id: build\n        uses: ./.github/actions/do-build\n        with:\n          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'\n          platform: ${{ inputs.platform }}\n          debug-suffix: '${{ matrix.suffix }}'\n        if: ${{ inputs.dry-run == false }}\n\n      - name: 'Upload bundles'\n        uses: ./.github/actions/upload-bundles\n        with:\n          platform: ${{ inputs.platform }}\n          debug-suffix: '${{ matrix.suffix }}'\n        if: ${{ inputs.dry-run == false }}\n\nfile: main.yml\nContent:\n#\n# Copyright (c) 2022, 2024, Oracle and/or its affiliates. All rights reserved.\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n#\n# This code is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License version 2 only, as\n# published by the Free Software Foundation.  Oracle designates this\n# particular file as subject to the \"Classpath\" exception as provided\n# by Oracle in the LICENSE file that accompanied this code.\n#\n# This code is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# version 2 for more details (a copy is included in the LICENSE file that\n# accompanied this code).\n#\n# You should have received a copy of the GNU General Public License version\n# 2 along with this work; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n# or visit www.oracle.com if you need additional information or have any\n# questions.\n#\n\nname: 'OpenJDK GHA Sanity Checks'\n\non:\n  push:\n    branches-ignore:\n      - pr/*\n  workflow_dispatch:\n    inputs:\n      platforms:\n        description: 'Platform(s) to execute on (comma separated, e.g. \"linux-x64, macos, aarch64\")'\n        required: true\n        default: 'linux-x64, linux-x64-variants, linux-cross-compile, alpine-linux-x64, macos-x64, macos-aarch64, windows-x64, windows-aarch64, docs'\n      configure-arguments:\n        description: 'Additional configure arguments'\n        required: false\n      make-arguments:\n        description: 'Additional make arguments'\n        required: false\n      dry-run:\n        description: 'Dry run: skip actual builds and tests'\n        required: false\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n\n  ###\n  ### Determine platforms to include\n  ###\n\n  prepare:\n    name: 'Prepare the run'\n    runs-on: ubuntu-22.04\n    env:\n      # List of platforms to exclude by default\n      EXCLUDED_PLATFORMS: 'alpine-linux-x64'\n    outputs:\n      linux-x64: ${{ steps.include.outputs.linux-x64 }}\n      linux-x64-variants: ${{ steps.include.outputs.linux-x64-variants }}\n      linux-cross-compile: ${{ steps.include.outputs.linux-cross-compile }}\n      alpine-linux-x64: ${{ steps.include.outputs.alpine-linux-x64 }}\n      macos-x64: ${{ steps.include.outputs.macos-x64 }}\n      macos-aarch64: ${{ steps.include.outputs.macos-aarch64 }}\n      windows-x64: ${{ steps.include.outputs.windows-x64 }}\n      windows-aarch64: ${{ steps.include.outputs.windows-aarch64 }}\n      docs: ${{ steps.include.outputs.docs }}\n      dry-run: ${{ steps.include.outputs.dry-run }}\n\n    steps:\n      - name: 'Checkout the scripts'\n        uses: actions/checkout@v4\n        with:\n          sparse-checkout: |\n            .github\n            make/conf/github-actions.conf\n\n      - name: 'Build JTReg'\n        id: jtreg\n        uses: ./.github/actions/build-jtreg\n\n      # TODO: Now that we are checking out the repo scripts, we can put the following code\n      # into a separate file\n      - name: 'Check what jobs to run'\n        id: include\n        run: |\n          # Determine which platform jobs to run\n\n          # Returns 'true' if the input platform list matches any of the platform monikers given as argument,\n          # 'false' otherwise.\n          # arg $1: platform name or names to look for\n\n          # Convert EXCLUDED_PLATFORMS from a comma-separated string to an array\n          IFS=',' read -r -a excluded_array <<< \"$EXCLUDED_PLATFORMS\"\n\n          function check_platform() {\n            if [[ $GITHUB_EVENT_NAME == workflow_dispatch ]]; then\n              input='${{ github.event.inputs.platforms }}'\n            elif [[ $GITHUB_EVENT_NAME == push ]]; then\n              if [[ '${{ !secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/') }}' == 'false' ]]; then\n                # If JDK_SUBMIT_FILTER is set, and this is not a \"submit/\" branch, don't run anything\n                >&2 echo 'JDK_SUBMIT_FILTER is set and not a \"submit/\" branch'\n                echo 'false'\n                return\n              else\n                input='${{ secrets.JDK_SUBMIT_PLATFORMS }}'\n              fi\n            fi\n\n            normalized_input=\"$(echo ,$input, | tr -d ' ')\"\n            if [[ \"$normalized_input\" == \",,\" ]]; then\n              # For an empty input, assume all platforms should run, except those in the EXCLUDED_PLATFORMS list\n              for excluded in \"${excluded_array[@]}\"; do\n                if [[ \"$1\" == \"$excluded\" ]]; then\n                  echo 'false'\n                  return\n                fi\n              done\n              echo 'true'\n              return\n            else\n              # Check for all acceptable platform names\n              for part in $* ; do\n                if echo \"$normalized_input\" | grep -q -e \",$part,\" ; then\n                  echo 'true'\n                  return\n                fi\n              done\n\n              # If not explicitly included, check against the EXCLUDED_PLATFORMS list\n              for excluded in \"${excluded_array[@]}\"; do\n                if [[ \"$1\" == \"$excluded\" ]]; then\n                  echo 'false'\n                  return\n                fi\n              done\n            fi\n\n            echo 'false'\n          }\n\n          function check_dry_run() {\n            if [[ $GITHUB_EVENT_NAME == workflow_dispatch ]]; then\n              # Take the user-specified one.\n              echo '${{ github.event.inputs.dry-run }}'\n              return\n            elif [[ $GITHUB_EVENT_NAME == push ]]; then\n              # Cut out the real branch name\n              BRANCH=${GITHUB_REF##*/}\n\n              # Dry run rebuilds the caches in current branch, so they can be reused\n              # for any child PR branches. Because of this, we want to trigger this\n              # workflow in master branch, so that actual PR branches can use the cache.\n              # This workflow would trigger every time contributors sync their master\n              # branches in their personal forks.\n              if [[ $BRANCH == \"master\" ]]; then\n                echo 'true'\n                return\n              fi\n\n              # ...same for stabilization branches\n              if [[ $BRANCH =~ \"jdk(.*)\" ]]; then\n                echo 'true'\n                return\n              fi\n            fi\n\n            echo 'false'\n          }\n\n          echo \"linux-x64=$(check_platform linux-x64 linux x64)\" >> $GITHUB_OUTPUT\n          echo \"linux-x64-variants=$(check_platform linux-x64-variants variants)\" >> $GITHUB_OUTPUT\n          echo \"linux-cross-compile=$(check_platform linux-cross-compile cross-compile)\" >> $GITHUB_OUTPUT\n          echo \"alpine-linux-x64=$(check_platform alpine-linux-x64 alpine-linux x64)\" >> $GITHUB_OUTPUT\n          echo \"macos-x64=$(check_platform macos-x64 macos x64)\" >> $GITHUB_OUTPUT\n          echo \"macos-aarch64=$(check_platform macos-aarch64 macos aarch64)\" >> $GITHUB_OUTPUT\n          echo \"windows-x64=$(check_platform windows-x64 windows x64)\" >> $GITHUB_OUTPUT\n          echo \"windows-aarch64=$(check_platform windows-aarch64 windows aarch64)\" >> $GITHUB_OUTPUT\n          echo \"docs=$(check_platform docs)\" >> $GITHUB_OUTPUT\n          echo \"dry-run=$(check_dry_run)\" >> $GITHUB_OUTPUT\n\n  ###\n  ### Build jobs\n  ###\n\n  build-linux-x64:\n    name: linux-x64\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      gcc-major-version: '10'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.linux-x64 == 'true'\n\n  build-linux-x64-hs-nopch:\n    name: linux-x64-hs-nopch\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      make-target: 'hotspot'\n      debug-levels: '[ \"debug\" ]'\n      gcc-major-version: '10'\n      extra-conf-options: '--disable-precompiled-headers'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.linux-x64-variants == 'true'\n\n  build-linux-x64-hs-zero:\n    name: linux-x64-hs-zero\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      make-target: 'hotspot'\n      debug-levels: '[ \"debug\" ]'\n      gcc-major-version: '10'\n      extra-conf-options: '--with-jvm-variants=zero --disable-precompiled-headers'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.linux-x64-variants == 'true'\n\n  build-linux-x64-hs-minimal:\n    name: linux-x64-hs-minimal\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      make-target: 'hotspot'\n      debug-levels: '[ \"debug\" ]'\n      gcc-major-version: '10'\n      extra-conf-options: '--with-jvm-variants=minimal --disable-precompiled-headers'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.linux-x64-variants == 'true'\n\n  build-linux-x64-hs-optimized:\n    name: linux-x64-hs-optimized\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      make-target: 'hotspot'\n      # Technically this is not the \"debug\" level, but we can't inject a new matrix state for just this job\n      debug-levels: '[ \"debug\" ]'\n      gcc-major-version: '10'\n      extra-conf-options: '--with-debug-level=optimized --disable-precompiled-headers'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.linux-x64-variants == 'true'\n\n  build-linux-x64-static:\n    name: linux-x64-static\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      make-target: 'static-jdk-bundles'\n      # There are issues with fastdebug static build in GHA due to space limit.\n      # Only do release build for now.\n      debug-levels: '[ \"release\" ]'\n      gcc-major-version: '10'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n      static-suffix: \"-static\"\n    if: needs.prepare.outputs.linux-x64 == 'true'\n\n  build-linux-x64-static-libs:\n    name: linux-x64-static-libs\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      make-target: 'static-libs-bundles'\n      # Only build static-libs-bundles for release builds.\n      # For debug builds, building static-libs often exceeds disk space.\n      debug-levels: '[ \"release\" ]'\n      gcc-major-version: '10'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n      # Upload static libs bundles separately to avoid interference with normal linux-x64 bundle.\n      # This bundle is not used by testing jobs, but downstreams use it to check that\n      # dependent projects, e.g. libgraal, builds fine.\n      bundle-suffix: \"-static-libs\"\n    if: needs.prepare.outputs.linux-x64-variants == 'true'\n\n  build-linux-cross-compile:\n    name: linux-cross-compile\n    needs: prepare\n    uses: ./.github/workflows/build-cross-compile.yml\n    with:\n      gcc-major-version: '10'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.linux-cross-compile == 'true'\n\n  build-alpine-linux-x64:\n    name: alpine-linux-x64\n    needs: prepare\n    uses: ./.github/workflows/build-alpine-linux.yml\n    with:\n      platform: alpine-linux-x64\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.alpine-linux-x64 == 'true'\n\n  build-macos-x64:\n    name: macos-x64\n    needs: prepare\n    uses: ./.github/workflows/build-macos.yml\n    with:\n      platform: macos-x64\n      runs-on: 'macos-13'\n      xcode-toolset-version: '14.3.1'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.macos-x64 == 'true'\n\n  build-macos-aarch64:\n    name: macos-aarch64\n    needs: prepare\n    uses: ./.github/workflows/build-macos.yml\n    with:\n      platform: macos-aarch64\n      runs-on: 'macos-14'\n      xcode-toolset-version: '15.4'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.macos-aarch64 == 'true'\n\n  build-windows-x64:\n    name: windows-x64\n    needs: prepare\n    uses: ./.github/workflows/build-windows.yml\n    with:\n      platform: windows-x64\n      msvc-toolset-version: '14.44'\n      msvc-toolset-architecture: 'x86.x64'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.windows-x64 == 'true'\n\n  build-windows-aarch64:\n    name: windows-aarch64\n    needs: prepare\n    uses: ./.github/workflows/build-windows.yml\n    with:\n      platform: windows-aarch64\n      msvc-toolset-version: '14.44'\n      msvc-toolset-architecture: 'arm64'\n      make-target: 'hotspot'\n      extra-conf-options: '--openjdk-target=aarch64-unknown-cygwin'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.windows-aarch64 == 'true'\n\n  build-docs:\n    name: docs\n    needs: prepare\n    uses: ./.github/workflows/build-linux.yml\n    with:\n      platform: linux-x64\n      debug-levels: '[ \"debug\" ]'\n      make-target: 'docs-jdk-bundles'\n      # Make sure we never try to make full docs, since that would require a\n      # build JDK, and we do not need the additional testing of the graphs.\n      extra-conf-options: '--disable-full-docs'\n      gcc-major-version: '10'\n      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n      make-arguments: ${{ github.event.inputs.make-arguments }}\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n    if: needs.prepare.outputs.docs == 'true'\n\n  ###\n  ### Test jobs\n  ###\n\n  test-linux-x64:\n    name: linux-x64\n    needs:\n      - prepare\n      - build-linux-x64\n    uses: ./.github/workflows/test.yml\n    with:\n      platform: linux-x64\n      bootjdk-platform: linux-x64\n      runs-on: ubuntu-22.04\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n      debug-suffix: -debug\n\n  test-linux-x64-static:\n    name: linux-x64-static\n    needs:\n      - prepare\n      - build-linux-x64\n      - build-linux-x64-static\n    uses: ./.github/workflows/test.yml\n    with:\n      platform: linux-x64\n      bootjdk-platform: linux-x64\n      runs-on: ubuntu-22.04\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n      static-suffix: \"-static\"\n\n  test-macos-aarch64:\n    name: macos-aarch64\n    needs:\n      - prepare\n      - build-macos-aarch64\n    uses: ./.github/workflows/test.yml\n    with:\n      platform: macos-aarch64\n      bootjdk-platform: macos-aarch64\n      runs-on: macos-14\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n      xcode-toolset-version: '15.4'\n      debug-suffix: -debug\n\n  test-windows-x64:\n    name: windows-x64\n    needs:\n      - prepare\n      - build-windows-x64\n    uses: ./.github/workflows/test.yml\n    with:\n      platform: windows-x64\n      bootjdk-platform: windows-x64\n      runs-on: windows-2025\n      dry-run: ${{ needs.prepare.outputs.dry-run == 'true' }}\n      debug-suffix: -debug\n\nfile: test.yml\nContent:\n#\n# Copyright (c) 2022, 2024, Oracle and/or its affiliates. All rights reserved.\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n#\n# This code is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License version 2 only, as\n# published by the Free Software Foundation.  Oracle designates this\n# particular file as subject to the \"Classpath\" exception as provided\n# by Oracle in the LICENSE file that accompanied this code.\n#\n# This code is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# version 2 for more details (a copy is included in the LICENSE file that\n# accompanied this code).\n#\n# You should have received a copy of the GNU General Public License version\n# 2 along with this work; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n# or visit www.oracle.com if you need additional information or have any\n# questions.\n#\n\nname: 'Run tests'\n\non:\n  workflow_call:\n    inputs:\n      platform:\n        required: true\n        type: string\n      bootjdk-platform:\n        required: true\n        type: string\n      runs-on:\n        required: true\n        type: string\n      xcode-toolset-version:\n        required: false\n        type: string\n      dry-run:\n        required: false\n        type: boolean\n        default: false\n      debug-suffix:\n        required: false\n        type: string\n      static-suffix:\n        required: false\n        type: string\n\nenv:\n  # These are needed to make the MSYS2 bash work properly\n  MSYS2_PATH_TYPE: minimal\n  CHERE_INVOKING: 1\n\njobs:\n  test:\n    name: test\n    runs-on: ${{ inputs.runs-on }}\n    defaults:\n      run:\n        shell: bash\n\n    strategy:\n      fail-fast: false\n      matrix:\n        test-name:\n          - 'jdk/tier1 part 1'\n          - 'jdk/tier1 part 2'\n          - 'jdk/tier1 part 3'\n          - 'langtools/tier1'\n          - 'hs/tier1 common'\n          - 'hs/tier1 compiler part 1'\n          - 'hs/tier1 compiler part 2'\n          - 'hs/tier1 compiler part 3'\n          - 'hs/tier1 gc'\n          - 'hs/tier1 runtime'\n          - 'hs/tier1 serviceability'\n          - 'lib-test/tier1'\n\n        include:\n          - test-name: 'jdk/tier1 part 1'\n            test-suite: 'test/jdk/:tier1_part1'\n\n          - test-name: 'jdk/tier1 part 2'\n            test-suite: 'test/jdk/:tier1_part2'\n\n          - test-name: 'jdk/tier1 part 3'\n            test-suite: 'test/jdk/:tier1_part3'\n\n          - test-name: 'langtools/tier1'\n            test-suite: 'test/langtools/:tier1'\n\n          - test-name: 'hs/tier1 common'\n            test-suite: 'test/hotspot/jtreg/:tier1_common'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n          - test-name: 'hs/tier1 compiler part 1'\n            test-suite: 'test/hotspot/jtreg/:tier1_compiler_1'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n          - test-name: 'hs/tier1 compiler part 2'\n            test-suite: 'test/hotspot/jtreg/:tier1_compiler_2'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n          - test-name: 'hs/tier1 compiler part 3'\n            test-suite: 'test/hotspot/jtreg/:tier1_compiler_3'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n          - test-name: 'hs/tier1 gc'\n            test-suite: 'test/hotspot/jtreg/:tier1_gc'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n          - test-name: 'hs/tier1 runtime'\n            test-suite: 'test/hotspot/jtreg/:tier1_runtime'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n          - test-name: 'hs/tier1 serviceability'\n            test-suite: 'test/hotspot/jtreg/:tier1_serviceability'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n          - test-name: 'lib-test/tier1'\n            test-suite: 'test/lib-test/:tier1'\n            debug-suffix: ${{ inputs.debug-suffix }}\n\n    steps:\n      - name: 'Checkout the JDK source'\n        uses: actions/checkout@v4\n\n      - name: 'Get MSYS2'\n        uses: ./.github/actions/get-msys2\n        if: runner.os == 'Windows'\n\n      - name: 'Get the BootJDK'\n        id: bootjdk\n        uses: ./.github/actions/get-bootjdk\n        with:\n          platform: ${{ inputs.bootjdk-platform }}\n\n      - name: 'Get JTReg'\n        id: jtreg\n        uses: ./.github/actions/get-jtreg\n\n      - name: 'Get bundles'\n        id: bundles\n        uses: ./.github/actions/get-bundles\n        with:\n          platform: ${{ inputs.platform }}\n          debug-suffix: ${{ matrix.debug-suffix }}\n          static-suffix: ${{ inputs.static-suffix }}\n        if: ${{ inputs.dry-run == false }}\n\n      - name: 'Install dependencies'\n        run: |\n          # On macOS we need to install some dependencies for testing\n          brew install make\n          sudo xcode-select --switch /Applications/Xcode_${{ inputs.xcode-toolset-version }}.app/Contents/Developer\n          # This will make GNU make available as 'make' and not only as 'gmake'\n          echo '/usr/local/opt/make/libexec/gnubin' >> $GITHUB_PATH\n        if: runner.os == 'macOS'\n\n      - name: 'Set PATH'\n        id: path\n        run: |\n          # We need a minimal PATH on Windows\n          # Set PATH to \"\", so just GITHUB_PATH is included\n          if [[ '${{ runner.os }}' == 'Windows' ]]; then\n            echo \"value=\" >> $GITHUB_OUTPUT\n          else\n            echo \"value=$PATH\" >> $GITHUB_OUTPUT\n          fi\n          if [[ '${{ inputs.static-suffix }}' == '-static' ]]; then\n            echo \"static-hotspot-problemlist-path=`pwd`/test/hotspot/jtreg/ProblemList-StaticJdk.txt\" >> $GITHUB_OUTPUT\n            echo \"static-jdk-problemlist-path=`pwd`/test/jdk/ProblemList-StaticJdk.txt\" >> $GITHUB_OUTPUT\n            echo \"static-langtools-problemlist-path=`pwd`/test/langtools/ProblemList-StaticJdk.txt\" >> $GITHUB_OUTPUT\n            echo \"static-lib-test-problemlist-path=`pwd`/test/lib-test/ProblemList-StaticJdk.txt\" >> $GITHUB_OUTPUT\n          fi\n\n      - name: 'Set Extra Options'\n        id: extra-options\n        run: |\n          if [[ '${{ inputs.static-suffix }}' == '-static' ]]; then\n            echo \"test-jdk=JDK_UNDER_TEST=${{ steps.bundles.outputs.static-jdk-path }}\" >> $GITHUB_OUTPUT\n            echo \"compile-jdk=JDK_FOR_COMPILE=${{ steps.bundles.outputs.jdk-path }}\" >> $GITHUB_OUTPUT\n            echo \"extra-problem-lists=EXTRA_PROBLEM_LISTS=${{ steps.path.outputs.static-hotspot-problemlist-path }}%20${{ steps.path.outputs.static-jdk-problemlist-path }}%20${{ steps.path.outputs.static-langtools-problemlist-path }}%20${{ steps.path.outputs.static-lib-test-problemlist-path }}\" >> $GITHUB_OUTPUT\n          fi\n\n      - name: 'Run tests'\n        id: run-tests\n        run: >\n          make test-prebuilt\n          TEST='${{ matrix.test-suite }}'\n          BOOT_JDK=${{ steps.bootjdk.outputs.path }}\n          JT_HOME=${{ steps.jtreg.outputs.path }}\n          JDK_IMAGE_DIR=${{ steps.bundles.outputs.jdk-path }}\n          SYMBOLS_IMAGE_DIR=${{ steps.bundles.outputs.symbols-path }}\n          TEST_IMAGE_DIR=${{ steps.bundles.outputs.tests-path }}\n          ${{ steps.extra-options.outputs.test-jdk }}\n          ${{ steps.extra-options.outputs.compile-jdk }}\n          JTREG='JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash;VERBOSE=fail,error,time;KEYWORDS=!headful;${{ steps.extra-options.outputs.extra-problem-lists }}'\n          && bash ./.github/scripts/gen-test-summary.sh \"$GITHUB_STEP_SUMMARY\" \"$GITHUB_OUTPUT\"\n        env:\n          PATH: ${{ steps.path.outputs.value }}\n        if: ${{ inputs.dry-run == false }}\n\n        # This is a separate step, since if the markdown from a step gets bigger than\n        # 1024 kB it is skipped, but then the short summary above is still generated\n      - name: 'Generate test report'\n        run: bash ./.github/scripts/gen-test-results.sh \"$GITHUB_STEP_SUMMARY\"\n        if: always()\n\n      - name: 'Package test results'\n        id: package\n        run: |\n          # Package test-results and relevant parts of test-support\n          mkdir results\n\n          if [[ -d build/run-test-prebuilt/test-results ]]; then\n            cd build/run-test-prebuilt/test-results/\n            zip -r -9 \"$GITHUB_WORKSPACE/results/test-results.zip\" .\n            cd $GITHUB_WORKSPACE\n          else\n            echo '::warning ::Missing test-results directory'\n          fi\n\n          if [[ -d build/run-test-prebuilt/test-support ]]; then\n            cd build/run-test-prebuilt/test-support/\n            zip -r -9 \"$GITHUB_WORKSPACE/results/test-support.zip\" . -i *.jtr -i */hs_err*.log -i */replay*.log\n            cd $GITHUB_WORKSPACE\n          else\n            echo '::warning ::Missing test-support directory'\n          fi\n\n          artifact_name=\"results-${{ inputs.platform }}-$(echo ${{ matrix.test-name }}${{ inputs.static-suffix }} | tr '/ ' '__')\"\n          echo \"artifact-name=$artifact_name\" >> $GITHUB_OUTPUT\n        if: always()\n\n      - name: 'Upload test results'\n        uses: actions/upload-artifact@v4\n        with:\n          path: results\n          name: ${{ steps.package.outputs.artifact-name }}\n        if: always()\n\n        # This is the best way I found to abort the job with an error message\n      - name: 'Notify about test failures'\n        uses: actions/github-script@v7\n        with:\n          script: core.setFailed('${{ steps.run-tests.outputs.error-message }}')\n        if: steps.run-tests.outputs.failure == 'true'\n",
    "readme": "# Welcome to the JDK!\n\nFor build instructions please see the\n[online documentation](https://openjdk.org/groups/build/doc/building.html),\nor either of these files:\n\n- [doc/building.html](doc/building.html) (html version)\n- [doc/building.md](doc/building.md) (markdown version)\n\nSee <https://openjdk.org/> for more information about the OpenJDK\nCommunity and the JDK and see <https://bugs.openjdk.org> for JDK issue\ntracking.\n",
    "org": "openjdk",
    "repo": "jdk",
    "number": 26541,
    "commit": "fe09e93b8fc3081c944f3824fdaa55cc17e377a8"
}