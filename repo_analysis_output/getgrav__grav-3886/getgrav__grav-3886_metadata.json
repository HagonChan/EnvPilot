{
    "primary_language": "PHP",
    "language_guidelines": "Programming Language guidelines for PHP:\n# General Guidelines:\n**General Guidelines for PHP Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, PHP version requirements, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `composer.json` file. Ensure you have the required PHP version and any extensions installed. Check for system requirements and PHP modules needed.  \n\n3. **PHP Installation**  \n   Ensure you have PHP installed with the required version. Verify installation:  \n   ```sh\n   php --version  \n   ```  \n   For Ubuntu/Debian systems, you can install PHP:  \n   ```sh\n   sudo apt update  \n   sudo apt install php php-cli php-common  \n   ```  \n\n4. **Composer Installation**  \n   Most modern PHP projects use Composer for dependency management. Install Composer if not already available:  \n   ```sh\n   curl -sS https://getcomposer.org/installer | php  \n   sudo mv composer.phar /usr/local/bin/composer  \n   ```  \n   Verify installation:  \n   ```sh\n   composer --version  \n   ```  \n\n5. **Install Dependencies**  \n   Use Composer to install project dependencies:  \n   ```sh\n   composer install  \n   ```  \n   For production environment:  \n   ```sh\n   composer install --no-dev --optimize-autoloader  \n   ```  \n\n6. **Autoloading**  \n   Ensure the autoloader is properly set up. Most projects using Composer will have:  \n   ```php\n   require_once 'vendor/autoload.php';  \n   ```  \n\n7. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.php`, database configuration) and set them up accordingly. Look for example configuration files like `.env.example`.  \n\n8. **Database Setup**  \n   If the project uses a database, set up the database connection and run any migrations:  \n   ```sh\n   php artisan migrate  # For Laravel projects  \n   ```  \n   Or check for SQL files in the project that need to be imported.  \n\n9. **Web Server Setup**  \n   For web applications, you can use PHP's built-in server for development:  \n   ```sh\n   php -S localhost:8000  \n   ```  \n   Or for specific document root:  \n   ```sh\n   php -S localhost:8000 -t public/  \n   ```  \n   For production, configure Apache/Nginx as described in the project documentation.  \n\n10. **Run Tests (if available)**  \n    If the project provides tests, run them to ensure everything is working correctly. Common test commands include:  \n    ```sh\n    ./vendor/bin/phpunit  \n    ```  \n    Or if using Composer scripts:  \n    ```sh\n    composer test  \n    ```  \n\n11. **Code Quality Tools**  \n    Use code quality tools if available in the project:  \n    - PHP CodeSniffer for coding standards:  \n      ```sh\n      ./vendor/bin/phpcs  \n      ```  \n    - PHP Stan for static analysis:  \n      ```sh\n      ./vendor/bin/phpstan analyse  \n      ```  \n    - PHP CS Fixer for code formatting:  \n      ```sh\n      ./vendor/bin/php-cs-fixer fix  \n      ```  \n\n12. **Run the Project**  \n    Follow the instructions in the README to run the project. This could involve:  \n    - Starting a web server  \n    - Running specific PHP scripts  \n    - Using framework-specific commands (e.g., `php artisan serve` for Laravel)  \n\n13. **Common PHP Extensions**  \n    Install commonly required PHP extensions if missing:  \n    ```sh\n    sudo apt install php-mysql php-pgsql php-sqlite3 php-curl php-json php-mbstring php-xml php-zip  \n    ```  \n\n14. **Memory and Execution Limits**  \n    Some projects may require adjusting PHP settings. Check `php.ini` for:  \n    - `memory_limit`  \n    - `max_execution_time`  \n    - `upload_max_filesize`  \n\n15. **Troubleshooting**  \n    If you encounter issues during installation or while running the project:  \n    - Check PHP error logs  \n    - Verify all required PHP extensions are installed  \n    - Ensure proper file permissions  \n    - Refer to the project's issue tracker on GitHub  \n\n16. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  \n\n17. **Framework-Specific Commands**  \n    Be aware of framework-specific tools and commands:  \n    - Laravel: `php artisan`  \n    - Symfony: `php bin/console`  \n    - CakePHP: `bin/cake`  \n    - CodeIgniter: framework-specific setup instructions  \n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yaml\nContent:\nname: Release Builds\n\non:\n  release:\n    types: [published]\n\npermissions: {}\n\njobs:\n  build:\n    permissions:\n      contents: write # for release creation (svenstaro/upload-release-action)\n\n    if: \"!github.event.release.prerelease\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Extract Tag\n        run: echo \"PACKAGE_VERSION=${{ github.ref }}\" >> $GITHUB_ENV\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: 7.3\n          extensions: opcache, gd\n          tools: composer:v2\n          coverage: none\n        env:\n          COMPOSER_TOKEN: ${{ secrets.GLOBAL_TOKEN }}\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get -y update -qq  < /dev/null > /dev/null\n          sudo apt-get -y install -qq git zip < /dev/null > /dev/null\n\n      - name: Retrieval of Builder Scripts\n        run: |\n          # Real Grav URL\n          curl --silent -H \"Authorization: token ${{ secrets.GLOBAL_TOKEN }}\" -H \"Accept: application/vnd.github.v3.raw\" ${{ secrets.BUILD_SCRIPT_URL }} --output build-grav.sh\n\n          # Development Local URL\n          # curl ${{ secrets.BUILD_SCRIPT_URL }} --output build-grav.sh\n\n      - name: Grav Builder\n        run: |\n          bash ./build-grav.sh\n\n      - name: Upload packages to release\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          tag: ${{ env.PACKAGE_VERSION }}\n          file: ./grav-dist/*.zip\n          overwrite: true\n          file_glob: true\n\n  slack:\n    permissions:\n      actions: read # to list jobs for workflow run (technote-space/workflow-conclusion-action)\n\n    name: Slack\n    needs: build\n    runs-on: ubuntu-latest\n    if: always()\n    steps:\n      - uses: technote-space/workflow-conclusion-action@v2\n      - uses: 8398a7/action-slack@v3\n        with:\n          status: failure\n          fields: repo,message,author,action\n          icon_emoji: ':octocat:'\n          author_name: 'Github Action Build'\n          text: '\ud83d\ude9a Automated Build Failure'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GLOBAL_TOKEN }}\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n        if: env.WORKFLOW_CONCLUSION == 'failure'\n\nfile: tests.yaml\nContent:\nname: PHP Tests\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    branches: [ develop ]\n\npermissions:\n  contents: read # to fetch code (actions/checkout)\n\njobs:\n\n  unit-tests:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        php: [8.3, 8.2, 8.1, 8.0, 7.4, 7.3]\n        os: [ubuntu-latest]\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: opcache, gd\n          tools: composer:v2\n          coverage: none\n        env:\n          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n#      - name: Update composer\n#        run: composer update\n#\n#      - name: Validate composer.json and composer.lock\n#        run: composer validate\n\n      - name: Get composer cache directory\n        id: composer-cache\n        run: echo \"::set-output name=dir::$(composer config cache-files-dir)\"\n\n      - name: Cache dependencies\n        uses: actions/cache@v4\n        with:\n          path: ${{ steps.composer-cache.outputs.dir }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer install --prefer-dist --no-progress\n\n      - name: Run test suite\n        run: vendor/bin/codecept run\n\n#  slack:\n#      name: Slack\n#      needs: unit-tests\n#      runs-on: ubuntu-latest\n#      if: always()\n#      steps:\n#        - uses: technote-space/workflow-conclusion-action@v2\n#        - uses: 8398a7/action-slack@v3\n#          with:\n#             status: failure\n#             fields: repo,message,author,action\n#             icon_emoji: ':octocat:'\n#             author_name: 'Github Action Tests'\n#             text: '\ud83d\udca5 Automated Test Failure'\n#          env:\n#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n#            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n#          if: env.WORKFLOW_CONCLUSION == 'failure'\n",
    "readme": "# ![](https://avatars1.githubusercontent.com/u/8237355?v=2&s=50) Grav\n\n[![PHPStan](https://img.shields.io/badge/PHPStan-enabled-brightgreen.svg?style=flat)](https://github.com/phpstan/phpstan)\n[![Discord](https://img.shields.io/discord/501836936584101899.svg?logo=discord&colorB=728ADA&label=Discord%20Chat)](https://chat.getgrav.org)\n [![PHP Tests](https://github.com/getgrav/grav/workflows/PHP%20Tests/badge.svg?branch=develop)](https://github.com/getgrav/grav/actions?query=workflow%3A%22PHP+Tests%22) [![OpenCollective](https://opencollective.com/grav/tiers/backers/badge.svg?label=Backers&color=brightgreen)](#backers) [![OpenCollective](https://opencollective.com/grav/tiers/supporters/badge.svg?label=Supporters&color=brightgreen)](#supporters) [![OpenCollective](https://opencollective.com/grav/tiers/sponsors/badge.svg?label=Sponsors&color=brightgreen)](#sponsors)\n\nGrav is a **Fast**, **Simple**, and **Flexible**, file-based Web-platform.  There is **Zero** installation required.  Just extract the ZIP archive, and you are already up and running.  It follows similar principles to other flat-file CMS platforms, but has a different design philosophy than most. Grav comes with a powerful **Package Management System** to allow for simple installation and upgrading of plugins and themes, as well as simple updating of Grav itself.\n\nThe underlying architecture of Grav is designed to use well-established and _best-in-class_ technologies to ensure that Grav is simple to use and easy to extend. Some of these key technologies include:\n\n* [Twig Templating](https://twig.symfony.com/): for powerful control of the user interface\n* [Markdown](https://en.wikipedia.org/wiki/Markdown): for easy content creation\n* [YAML](https://yaml.org): for simple configuration\n* [Parsedown](https://parsedown.org/): for fast Markdown and Markdown Extra support\n* [Doctrine Cache](https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/caching.html): layer for performance\n* [Pimple Dependency Injection Container](https://github.com/silexphp/Pimple): for extensibility and maintainability\n* [Symfony Event Dispatcher](https://symfony.com/doc/current/components/event_dispatcher/introduction.html): for plugin event handling\n* [Symfony Console](https://symfony.com/doc/current/components/console/introduction.html): for CLI interface\n* [Gregwar Image Library](https://github.com/Gregwar/Image): for dynamic image manipulation\n\n# Requirements\n\n- PHP 7.3.6 or higher. Check the [required modules list](https://learn.getgrav.org/basics/requirements#php-requirements)\n- Check the [Apache](https://learn.getgrav.org/basics/requirements#apache-requirements) or [IIS](https://learn.getgrav.org/basics/requirements#iis-requirements) requirements\n\n# Documentation\n\nThe full documentation can be found from [learn.getgrav.org](https://learn.getgrav.org).\n\n# QuickStart\n\nThese are the options to get Grav:\n\n### Downloading a Grav Package\n\nYou can download a **ready-built** package from the [Downloads page on https://getgrav.org](https://getgrav.org/downloads)\n\n### With Composer\n\nYou can create a new project with the latest **stable** Grav release with the following command:\n\n```bash\ncomposer create-project getgrav/grav ~/webroot/grav\n```\n\n### From GitHub\n\n1. Clone the Grav repository from [https://github.com/getgrav/grav]() to a folder in the webroot of your server, e.g. `~/webroot/grav`. Launch a **terminal** or **console** and navigate to the webroot folder:\n   ```bash\n   cd ~/webroot\n   git clone https://github.com/getgrav/grav.git\n   ```\n\n2. Install the **plugin** and **theme dependencies** by using the [Grav CLI application](https://learn.getgrav.org/advanced/grav-cli) `bin/grav`:\n   ```bash\n   cd ~/webroot/grav\n   bin/grav install\n   ```\n\nCheck out the [install procedures](https://learn.getgrav.org/basics/installation) for more information.\n\n# Adding Functionality\n\nYou can download [plugins](https://getgrav.org/downloads/plugins) or [themes](https://getgrav.org/downloads/themes) manually from the appropriate tab on the [Downloads page on https://getgrav.org](https://getgrav.org/downloads), but the preferred solution is to use the [Grav Package Manager](https://learn.getgrav.org/advanced/grav-gpm) or `GPM`:\n\n```bash\nbin/gpm index\n```\n\nThis will display all the available plugins and then you can install one or more with:\n\n```bash\nbin/gpm install <plugin/theme>\n```\n\n# Updating\n\nTo update Grav you should use the [Grav Package Manager](https://learn.getgrav.org/advanced/grav-gpm) or `GPM`:\n\n```bash\nbin/gpm selfupgrade\n```\n\nTo update plugins and themes:\n\n```bash\nbin/gpm update\n```\n\n## Upgrading from older version\n\n* [Upgrading to Grav 1.7](https://learn.getgrav.org/16/advanced/grav-development/grav-17-upgrade-guide)\n* [Upgrading to Grav 1.6](https://learn.getgrav.org/16/advanced/grav-development/grav-16-upgrade-guide)\n* [Upgrading from Grav <1.6](https://learn.getgrav.org/16/advanced/grav-development/grav-15-upgrade-guide)\n\n# Contributing\nWe appreciate any contribution to Grav, whether it is related to bugs, grammar, or simply a suggestion or improvement! Please refer to the [Contributing guide](CONTRIBUTING.md) for more guidance on this topic.\n\n## Security issues\nIf you discover a possible security issue related to Grav or one of its plugins, please email the core team at contact@getgrav.org and we'll address it as soon as possible.\n\n# Getting Started\n\n* [What is Grav?](https://learn.getgrav.org/basics/what-is-grav)\n* [Install](https://learn.getgrav.org/basics/installation) Grav in few seconds\n* Understand the [Configuration](https://learn.getgrav.org/basics/grav-configuration)\n* Take a peek at our available free [Skeletons](https://getgrav.org/downloads/skeletons)\n* If you have questions, jump on our [Discord Chat Server](https://chat.getgrav.org)!\n* Have fun!\n\n# Exploring More\n\n* Have a look at our [Basic Tutorial](https://learn.getgrav.org/basics/basic-tutorial)\n* Dive into more [advanced](https://learn.getgrav.org/advanced) functions\n* Learn about the [Grav CLI](https://learn.getgrav.org/cli-console/grav-cli)\n* Review examples in the [Grav Cookbook](https://learn.getgrav.org/cookbook)\n* More [Awesome Grav Stuff](https://github.com/getgrav/awesome-grav)\n\n# Backers\nSupport Grav with a monthly donation to help us continue development. [[Become a backer](https://opencollective.com/grav/contribute)]\n\n<img src=\"https://opencollective.com/grav/tiers/backers.svg?avatarHeight=36&width=600\" />\n\n\n# Supporters\nSupport Grav with a monthly donation to help us continue development. [[Become a supporter](https://opencollective.com/grav/contribute)]\n\n<img src=\"https://opencollective.com/grav/tiers/supporters.svg?avatarHeight=36&width=600\" />\n\n\n# Sponsors\nSupport Grav with a yearly donation to help us continue development. [[Become a sponsor](https://opencollective.com/grav/contribute)]\n\n<img src=\"https://opencollective.com/grav/tiers/sponsors.svg?avatarHeight=36&width=600\" />\n\n# License\n\nSee [LICENSE](LICENSE.txt)\n\n\n[gitflow-model]: http://nvie.com/posts/a-successful-git-branching-model/\n[gitflow-extensions]: https://github.com/nvie/gitflow\n\n# Running Tests\n\nFirst install the dev dependencies by running `composer install` from the Grav root.\n\nThen `composer test` will run the Unit Tests, which should be always executed successfully on any site.\nWindows users should use the `composer test-windows` command.\nYou can also run a single unit test file, e.g. `composer test tests/unit/Grav/Common/AssetsTest.php`\n\nTo run phpstan tests, you should run:\n\n* `composer phpstan` for global tests\n* `composer phpstan-framework` for more strict tests\n* `composer phpstan-plugins` to test all installed plugins\n",
    "org": "getgrav",
    "repo": "grav",
    "number": 3886,
    "commit": "2620e836d4ac0ad495173efdfe98d0a2db94f92c"
}