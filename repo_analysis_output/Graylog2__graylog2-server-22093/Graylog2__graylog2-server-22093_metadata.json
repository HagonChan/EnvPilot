{
    "primary_language": "Java",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Java Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for any dependencies listed in the README or in configuration files like `pom.xml` (for Maven) or `build.gradle` (for Gradle). Ensure you have the required JDK version installed.  \n\n3. **Build Tool**  \n   Identify which build tool the project is using: Maven or Gradle. This information should be available in the README or through project configuration files (`pom.xml` for Maven, `build.gradle` for Gradle).  \n\n4. **Build the Project**  \n   Use the appropriate commands based on the build tool:  \n   - For Maven:  \n     ```  \n     mvn clean install  \n     ```  \n   - For Gradle:  \n     ```  \n     gradle build  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., property files, YAML files) and set them up accordingly.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly.  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific class, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: dispatch-pr-build.yml\nContent:\nname: Request dispatched PR Build\n\non:\n  pull_request:\n    types: [ opened, reopened, synchronize, edited ]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  dispatchedPR:\n    name: Dispatch wait and check\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check if PR edit changed deps string\n        if: ${{ github.event.action == 'edited' }}\n        id: pr-string-changed\n        continue-on-error: true\n        run: |\n          old_pr_string=$(grep -P '^/(jenkins-pr-deps|jpd|prd)' <<< \"$OLD_PR_BODY\" | \\\n            grep -ioP '(Graylog2/\\S+?#|https?://github.com/Graylog2/\\S+?/pull/)[0-9]+' || true)\n          new_pr_string=$(grep -P '^/(jenkins-pr-deps|jpd|prd)' <<< \"$NEW_PR_BODY\" | \\\n            grep -ioP '(Graylog2/\\S+?#|https?://github.com/Graylog2/\\S+?/pull/)[0-9]+' || true)\n          if [ \"$old_pr_string\" != \"$new_pr_string\" ]; then\n            echo \"PR deps string change detected: \\\"$old_pr_string\\\" -> \\\"$new_pr_string\\\"\"\n            echo \"Re-triggering PR build...\"\n            exit 0\n          fi\n          exit 1\n        env:\n          OLD_PR_BODY: \"${{ github.event.changes.body.from }}\"\n          NEW_PR_BODY: \"${{ github.event.pull_request.body }}\"\n\n      - name: Dispatch job to graylog-project-internal\n        if: ${{ github.event.action != 'edited' || steps.pr-string-changed.outcome == 'success' }}\n        run: >\n          gh workflow run -R Graylog2/graylog-project-internal pr-build.yml --ref master\n          -f caller_repo=${{ github.repository }}\n          -f caller_pr_nr=${{ github.event.number }}\n          -f caller_base_branch=${{ github.base_ref || github.ref_name }}\n          -f caller_head_branch=${{ github.head_ref }}\n          -f head_sha=${{ github.event.pull_request.head.sha }}\n          -f initial_actor=\"${{ github.actor }}/${{ github.triggering_actor }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_GRAYLOG_PROJECT_INTERNAL_WORKFLOW_RW }}\n\n      - name: Give dispatched build time to add its status\n        run: sleep 20\n        # This is mostly cosmetic. If this workflow finishes before the dispatched\n        # build creates the status on the PR, the build will show up green for a while.\n\nfile: build.yml\nContent:\nname: Build the repository\n\non: \n  pull_request:\n\n# Cancel running build when new ref gets pushed.\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest-4-cores-public\n    strategy:\n      matrix:\n        java-version: [ 17 ]\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up JDK ${{ matrix.java-version }}\n        uses: actions/setup-java@v3\n        with:\n          java-version: ${{ matrix.java-version }}\n          distribution: temurin\n      - name: License check\n        run: ./mvnw -B --fail-fast license:check\n      - name: Build with Maven\n        run: ./mvnw -B --fail-fast -Pedantic -Dspotbugs.skip -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3 -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 verify javadoc:javadoc\n        env:\n          JAVA_OPTS: -Xmx6G\n          TIMEOUT_MULTIPLIER: 2.0\n\n\n\nfile: dispatch-main-build.yml\nContent:\nname: Request a dispatched main branch build\n\non:\n  push:\n    branches: [ master, main, \"[0-9]+.[0-9]+\" ]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  dispatchedMainBuild:\n    name: Dispatch build\n    runs-on: ubuntu-latest\n\n    steps:\n      # TODO remove later\n      - name: Debug event\n        run: jq . \"$GITHUB_EVENT_PATH\"\n\n      - name: Dispatch build to graylog-project-internal\n        run: >\n          gh workflow run -R Graylog2/graylog-project-internal main-build.yml --ref master\n          -f caller_repo=${{ github.repository }}\n          -f caller_branch=${{ github.base_ref || github.ref_name }}\n          -f head_sha=${{ github.sha }}\n          -f initial_actor=\"${{ github.actor }}/${{ github.triggering_actor }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_GRAYLOG_PROJECT_INTERNAL_WORKFLOW_RW }}\n",
    "readme": "# Graylog\n\n[![License](https://img.shields.io/badge/license-SSPL-green)](https://www.mongodb.com/licensing/server-side-public-license)\n[![Maven Central](https://img.shields.io/maven-central/v/org.graylog2/graylog2-server.svg)](http://mvnrepository.com/artifact/org.graylog2/graylog2-server)\n\nWelcome! _Graylog_ is a free and open log management platform.\n\nYou can read more about the project on our [website](https://www.graylog.org/) and check out the [documentation](http://docs.graylog.org/) on the documentation site.\n\n\n## Issue Tracking\n\nFound a bug? Have an idea for an improvement? Feel free to [add an issue](../../issues).\n\n\n## Contributing\n\nHelp us build the future of log management and be part of a project that is used by thousands of people out there every day.\n\nFollow the [contributors guide](https://www.graylog.org/community) and read [the contributing instructions](CONTRIBUTING.md) to get started.\n\nDo you want to get paid for developing our free and open product? Apply for one of our [jobs](https://www.graylog.org/careers)!\n\n## Staying in Touch\n\nCome chat with us in the [`#graylog` channel on freenode IRC](https://webchat.freenode.net/?channels=%23graylog), the `#graylog` channel on [libera](https://libera.chat/) or create a topic in our [community discussion forums](https://community.graylog.org/).\n\n## License\n\n_Graylog_ is released under version 1 of the [Server Side Public License (SSPL)](LICENSE).\n"
}