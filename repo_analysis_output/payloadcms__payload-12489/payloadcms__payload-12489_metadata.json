{
    "primary_language": "TypeScript",
    "language_guidelines": "",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: main.yml\nContent:\nname: build\n\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n  push:\n    branches:\n      - main\n\nconcurrency:\n  # <workflow_name>-<branch_name>-<true || commit_sha if branch is protected>\n  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref_protected && github.sha || ''}}\n  cancel-in-progress: true\n\nenv:\n  NODE_VERSION: 23.11.0\n  PNPM_VERSION: 9.7.1\n  DO_NOT_TRACK: 1 # Disable Turbopack telemetry\n  NEXT_TELEMETRY_DISABLED: 1 # Disable Next telemetry\n\njobs:\n  changes:\n    runs-on: ubuntu-24.04\n    permissions:\n      pull-requests: read\n    outputs:\n      needs_build: ${{ steps.filter.outputs.needs_build }}\n      needs_tests: ${{ steps.filter.outputs.needs_tests }}\n      templates: ${{ steps.filter.outputs.templates }}\n    steps:\n      # https://github.com/actions/virtual-environments/issues/1187\n      - name: tune linux network\n        run: sudo ethtool -K eth0 tx off rx off\n\n      - uses: actions/checkout@v4\n      - uses: dorny/paths-filter@v3\n        id: filter\n        with:\n          filters: |\n            needs_build:\n              - '.github/workflows/main.yml'\n              - 'packages/**'\n              - 'test/**'\n              - 'pnpm-lock.yaml'\n              - 'package.json'\n              - 'templates/**'\n            needs_tests:\n              - '.github/workflows/main.yml'\n              - 'packages/**'\n              - 'test/**'\n              - 'pnpm-lock.yaml'\n              - 'package.json'\n            templates:\n              - 'templates/**'\n      - name: Log all filter results\n        run: |\n          echo \"needs_build: ${{ steps.filter.outputs.needs_build }}\"\n          echo \"needs_tests: ${{ steps.filter.outputs.needs_tests }}\"\n          echo \"templates: ${{ steps.filter.outputs.templates }}\"\n\n  lint:\n    runs-on: ubuntu-24.04\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - name: Lint\n        run: pnpm lint -- --quiet\n\n  build:\n    needs: changes\n    if: ${{ needs.changes.outputs.needs_build == 'true' }}\n    runs-on: ubuntu-24.04\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - run: pnpm run build:all\n        env:\n          DO_NOT_TRACK: 1 # Disable Turbopack telemetry\n\n      - name: Cache build\n        uses: actions/cache@v4\n        with:\n          path: ./*\n          key: ${{ github.sha }}-${{ github.run_number }}\n\n  tests-unit:\n    runs-on: ubuntu-24.04\n    needs: [changes, build]\n    if: ${{ needs.changes.outputs.needs_tests == 'true' }}\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-run-install: false\n          pnpm-restore-cache: false # Full build is restored below\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - name: Restore build\n        uses: actions/cache@v4\n        with:\n          path: ./*\n          key: ${{ github.sha }}-${{ github.run_number }}\n\n      - name: Unit Tests\n        run: pnpm test:unit\n        env:\n          NODE_OPTIONS: --max-old-space-size=8096\n\n  tests-types:\n    runs-on: ubuntu-24.04\n    needs: [changes, build]\n    if: ${{ needs.changes.outputs.needs_tests == 'true' }}\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-run-install: false\n          pnpm-restore-cache: false # Full build is restored below\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - name: Restore build\n        uses: actions/cache@v4\n        with:\n          path: ./*\n          key: ${{ github.sha }}-${{ github.run_number }}\n\n      - name: Types Tests\n        run: pnpm test:types --target '>=5.7'\n        env:\n          NODE_OPTIONS: --max-old-space-size=8096\n\n  tests-int:\n    runs-on: ubuntu-24.04\n    needs: [changes, build]\n    if: ${{ needs.changes.outputs.needs_tests == 'true' }}\n    name: int-${{ matrix.database }}\n    strategy:\n      fail-fast: false\n      matrix:\n        database:\n          - mongodb\n          - postgres\n          - postgres-custom-schema\n          - postgres-uuid\n          - supabase\n          - sqlite\n          - sqlite-uuid\n    env:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: payloadtests\n      AWS_ENDPOINT_URL: http://127.0.0.1:4566\n      AWS_ACCESS_KEY_ID: localstack\n      AWS_SECRET_ACCESS_KEY: localstack\n      AWS_REGION: us-east-1\n\n    services:\n      postgres:\n        image: ${{ (startsWith(matrix.database, 'postgres') ) && 'postgis/postgis:16-3.4' || '' }}\n        env:\n          # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10\n          POSTGRES_USER: ${{ env.POSTGRES_USER }}\n          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}\n          POSTGRES_DB: ${{ env.POSTGRES_DB }}\n        ports:\n          - 5432:5432\n        # needed because the postgres container does not provide a healthcheck\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-run-install: false\n          pnpm-restore-cache: false # Full build is restored below\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - name: Restore build\n        uses: actions/cache@v4\n        with:\n          path: ./*\n          key: ${{ github.sha }}-${{ github.run_number }}\n\n      - name: Start LocalStack\n        run: pnpm docker:start\n\n      - name: Install Supabase CLI\n        uses: supabase/setup-cli@v1\n        with:\n          version: latest\n        if: matrix.database == 'supabase'\n\n      - name: Initialize Supabase\n        run: |\n          supabase init\n          supabase start\n        if: matrix.database == 'supabase'\n\n      - name: Configure PostgreSQL\n        run: |\n          psql \"postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB\" -c \"CREATE ROLE runner SUPERUSER LOGIN;\"\n          psql \"postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB\" -c \"SELECT version();\"\n          echo \"POSTGRES_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB\" >> $GITHUB_ENV\n        if: startsWith(matrix.database, 'postgres')\n\n      - name: Configure PostgreSQL with custom schema\n        run: |\n          psql \"postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB\" -c \"CREATE SCHEMA custom;\"\n        if: matrix.database == 'postgres-custom-schema'\n\n      - name: Configure Supabase\n        run: |\n          echo \"POSTGRES_URL=postgresql://postgres:postgres@127.0.0.1:54322/postgres\" >> $GITHUB_ENV\n        if: matrix.database == 'supabase'\n\n      - name: Integration Tests\n        run: pnpm test:int\n        env:\n          NODE_OPTIONS: --max-old-space-size=8096\n          PAYLOAD_DATABASE: ${{ matrix.database }}\n          POSTGRES_URL: ${{ env.POSTGRES_URL }}\n\n  tests-e2e:\n    runs-on: ubuntu-24.04\n    needs: [changes, build]\n    if: ${{ needs.changes.outputs.needs_tests == 'true' }}\n    name: e2e-${{ matrix.suite }}\n    strategy:\n      fail-fast: false\n      matrix:\n        # find test -type f -name 'e2e.spec.ts' | sort | xargs dirname | xargs -I {} basename {}\n        suite:\n          - _community\n          - access-control\n          - admin__e2e__general\n          - admin__e2e__list-view\n          - admin__e2e__document-view\n          - admin-bar\n          - admin-root\n          - auth\n          - auth-basic\n          - bulk-edit\n          - joins\n          - field-error-states\n          - fields-relationship\n          - fields__collections__Array\n          - fields__collections__Blocks\n          - fields__collections__Blocks#config.blockreferences.ts\n          - fields__collections__Checkbox\n          - fields__collections__Collapsible\n          - fields__collections__ConditionalLogic\n          - fields__collections__CustomID\n          - fields__collections__Date\n          - fields__collections__Email\n          - fields__collections__Indexed\n          - fields__collections__JSON\n          - fields__collections__Number\n          - fields__collections__Point\n          - fields__collections__Radio\n          - fields__collections__Relationship\n          - fields__collections__Row\n          - fields__collections__Select\n          - fields__collections__Tabs\n          - fields__collections__Tabs2\n          - fields__collections__Text\n          - fields__collections__UI\n          - fields__collections__Upload\n          - hooks\n          - lexical__collections__Lexical__e2e__main\n          - lexical__collections__Lexical__e2e__blocks\n          - lexical__collections__Lexical__e2e__blocks#config.blockreferences.ts\n          - lexical__collections__RichText\n          - query-presets\n          - form-state\n          - live-preview\n          - localization\n          - locked-documents\n          - i18n\n          - plugin-cloud-storage\n          - plugin-form-builder\n          - plugin-import-export\n          - plugin-nested-docs\n          - plugin-seo\n          - sort\n          - versions\n          - uploads\n    env:\n      SUITE_NAME: ${{ matrix.suite }}\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-run-install: false\n          pnpm-restore-cache: false # Full build is restored below\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - name: Restore build\n        uses: actions/cache@v4\n        with:\n          path: ./*\n          key: ${{ github.sha }}-${{ github.run_number }}\n\n      - name: Start LocalStack\n        run: pnpm docker:start\n        if: ${{ matrix.suite == 'plugin-cloud-storage' }}\n\n      - name: Store Playwright's Version\n        run: |\n          # Extract the version number using a more targeted regex pattern with awk\n          PLAYWRIGHT_VERSION=$(pnpm ls @playwright/test --depth=0 | awk '/@playwright\\/test/ {print $2}')\n          echo \"Playwright's Version: $PLAYWRIGHT_VERSION\"\n          echo \"PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION\" >> $GITHUB_ENV\n\n      - name: Cache Playwright Browsers for Playwright's Version\n        id: cache-playwright-browsers\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/ms-playwright\n          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}\n\n      - name: Setup Playwright - Browsers and Dependencies\n        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'\n        run: pnpm exec playwright install --with-deps chromium\n\n      - name: Setup Playwright - Dependencies-only\n        if: steps.cache-playwright-browsers.outputs.cache-hit == 'true'\n        run: pnpm exec playwright install-deps chromium\n\n      - name: E2E Tests\n        run: PLAYWRIGHT_JSON_OUTPUT_NAME=results_${{ matrix.suite }}.json pnpm test:e2e:prod:ci ${{ matrix.suite }}\n        env:\n          PLAYWRIGHT_JSON_OUTPUT_NAME: results_${{ matrix.suite }}.json\n          NEXT_TELEMETRY_DISABLED: 1\n\n      - uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: test-results-${{ matrix.suite }}\n          path: test/test-results/\n          if-no-files-found: ignore\n          retention-days: 1\n\n      # Disabled until this is fixed: https://github.com/daun/playwright-report-summary/issues/156\n      # - uses: daun/playwright-report-summary@v3\n      #   with:\n      #     report-file: results_${{ matrix.suite }}.json\n      #     report-tag: ${{ matrix.suite }}\n      #     job-summary: true\n\n  # Build listed templates with packed local packages\n  build-templates:\n    runs-on: ubuntu-24.04\n    needs: build\n    strategy:\n      matrix:\n        include:\n          - template: blank\n            database: mongodb\n          - template: website\n            database: mongodb\n          - template: with-payload-cloud\n            database: mongodb\n          - template: with-vercel-mongodb\n            database: mongodb\n          # Postgres\n          - template: with-postgres\n            database: postgres\n          - template: with-vercel-postgres\n            database: postgres\n\n          - template: plugin\n\n          # Re-enable once PG conncection is figured out\n          # - template: with-vercel-website\n          #   database: postgres\n\n    name: ${{ matrix.template }}-${{ matrix.database }}\n\n    env:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: payloadtests\n      MONGODB_VERSION: 6.0\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-run-install: false\n          pnpm-restore-cache: false # Full build is restored below\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - name: Restore build\n        uses: actions/cache@v4\n        with:\n          path: ./*\n          key: ${{ github.sha }}-${{ github.run_number }}\n\n      - name: Start PostgreSQL\n        uses: CasperWA/postgresql-action@v1.2\n        with:\n          postgresql version: '14' # See https://hub.docker.com/_/postgres for available versions\n          postgresql db: ${{ env.POSTGRES_DB }}\n          postgresql user: ${{ env.POSTGRES_USER }}\n          postgresql password: ${{ env.POSTGRES_PASSWORD }}\n        if: matrix.database == 'postgres'\n\n      - name: Wait for PostgreSQL\n        run: sleep 30\n        if: matrix.database == 'postgres'\n\n      - name: Configure PostgreSQL\n        run: |\n          psql \"postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB\" -c \"CREATE ROLE runner SUPERUSER LOGIN;\"\n          psql \"postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB\" -c \"SELECT version();\"\n          echo \"POSTGRES_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB\" >> $GITHUB_ENV\n        if: matrix.database == 'postgres'\n\n      # Avoid dockerhub rate-limiting\n      - name: Cache Docker images\n        uses: ScribeMD/docker-cache@0.5.0\n        with:\n          key: docker-${{ runner.os }}-mongo-${{ env.MONGODB_VERSION }}\n\n      - name: Start MongoDB\n        uses: supercharge/mongodb-github-action@1.12.0\n        with:\n          mongodb-version: 6.0\n        if: matrix.database == 'mongodb'\n\n      - name: Build Template\n        run: |\n          pnpm run script:pack --dest templates/${{ matrix.template }}\n          pnpm run script:build-template-with-local-pkgs ${{ matrix.template }} $POSTGRES_URL\n        env:\n          NODE_OPTIONS: --max-old-space-size=8096\n\n  tests-type-generation:\n    runs-on: ubuntu-24.04\n    needs: [changes, build]\n    if: ${{ needs.changes.outputs.needs_tests == 'true' }}\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Node setup\n        uses: ./.github/actions/setup\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          pnpm-version: ${{ env.PNPM_VERSION }}\n          pnpm-run-install: false\n          pnpm-restore-cache: false # Full build is restored below\n          pnpm-install-cache-key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n\n      - name: Restore build\n        uses: actions/cache@v4\n        with:\n          path: ./*\n          key: ${{ github.sha }}-${{ github.run_number }}\n\n      - name: Generate Payload Types\n        run: pnpm dev:generate-types fields\n\n      - name: Generate GraphQL schema file\n        run: pnpm dev:generate-graphql-schema graphql-schema-gen\n\n  all-green:\n    name: All Green\n    if: always()\n    runs-on: ubuntu-24.04\n    needs:\n      - lint\n      - build\n      - build-templates\n      - tests-unit\n      - tests-int\n      - tests-e2e\n      - tests-types\n      - tests-type-generation\n\n    steps:\n      - if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}\n        run: exit 1\n\n  publish-canary:\n    name: Publish Canary\n    runs-on: ubuntu-24.04\n    if: ${{ needs.all-green.result == 'success' && github.ref_name == 'main' }}\n    needs:\n      - all-green\n\n    steps:\n      # debug github.ref output\n      - run: |\n          echo github.ref: ${{ github.ref }}\n          echo isV3: ${{ github.ref == 'refs/heads/main' }}\n",
    "readme": "<a href=\"https://payloadcms.com\"><img width=\"100%\" src=\"https://l4wlsi8vxy8hre4v.public.blob.vercel-storage.com/github-banner-new-logo.jpg\" alt=\"Payload headless CMS Admin panel built with React\" /></a>\n<br />\n<br />\n\n<p align=\"left\">\n  <a href=\"https://github.com/payloadcms/payload/actions\"><img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/actions/workflow/status/payloadcms/payload/main.yml?style=flat-square\"></a>\n  &nbsp;\n  <a href=\"https://discord.gg/payload\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/967097582721572934?label=Discord&color=7289da&style=flat-square\" /></a>\n  &nbsp;\n  <a href=\"https://www.npmjs.com/package/payload\"><img alt=\"npm\" src=\"https://img.shields.io/npm/dw/payload?style=flat-square\" /></a>\n  &nbsp;\n  <a href=\"https://github.com/payloadcms/payload/graphs/contributors\"><img alt=\"npm\" src=\"https://img.shields.io/github/contributors-anon/payloadcms/payload?color=yellow&style=flat-square\" /></a>\n  &nbsp;\n  <a href=\"https://www.npmjs.com/package/payload\"><img alt=\"npm\" src=\"https://img.shields.io/npm/v/payload?style=flat-square\" /></a>\n  &nbsp;\n  <a href=\"https://twitter.com/payloadcms\"><img src=\"https://img.shields.io/badge/follow-payloadcms-1DA1F2?logo=twitter&style=flat-square\" alt=\"Payload Twitter\" /></a>\n</p>\n<hr/>\n<h4>\n<a target=\"_blank\" href=\"https://payloadcms.com/docs/getting-started/what-is-payload\" rel=\"dofollow\"><strong>Explore the Docs</strong></a>&nbsp;\u00b7&nbsp;<a target=\"_blank\" href=\"https://payloadcms.com/community-help\" rel=\"dofollow\"><strong>Community Help</strong></a>&nbsp;\u00b7&nbsp;<a target=\"_blank\" href=\"https://github.com/payloadcms/payload/discussions/1539\" rel=\"dofollow\"><strong>Roadmap</strong></a>&nbsp;\u00b7&nbsp;<a target=\"_blank\" href=\"https://www.g2.com/products/payload-cms/reviews#reviews\" rel=\"dofollow\"><strong>View G2 Reviews</strong></a>\n</h4>\n<hr/>\n\n> [!IMPORTANT]\n> \ud83c\udf89 <strong>We've released 3.0!</strong> Star this repo or keep an eye on it to follow along.\n\nPayload is the first-ever Next.js native CMS that can install directly in your existing `/app` folder. It's the start of a new era for headless CMS.\n\n<h3>Benefits over a regular CMS</h3>\n<ul>\n  <li>Deploy anywhere, including serverless on Vercel for free</li>\n  <li>Combine your front+backend in the same <code>/app</code> folder if you want</li>\n  <li>Don't sign up for yet another SaaS - Payload is open source</li>\n  <li>Query your database in React Server Components</li>\n  <li>Both admin and backend are 100% extensible</li>\n  <li>No vendor lock-in</li>\n  <li>Never touch ancient WP code again</li>\n  <li>Build faster, never hit a roadblock</li>\n</ul>\n\n## Quickstart\n\nBefore beginning to work with Payload, make sure you have all of the [required software](https://payloadcms.com/docs/getting-started/installation).\n\n```text\npnpx create-payload-app@latest\n```\n\n**If you're new to Payload, you should start with the website template** (`pnpx create-payload-app@latest -t website`). It shows how to do _everything_ - including custom Rich Text blocks, on-demand revalidation, live preview, and more. It comes with a frontend built with Tailwind all in one `/app` folder.\n\n## One-click templates\n\nJumpstart your next project by starting with a pre-made template. These are production-ready, end-to-end solutions designed to get you to market as fast as possible.\n\n### [\ud83c\udf10 Website](https://github.com/payloadcms/payload/tree/main/templates/website)\n\nBuild any kind of website, blog, or portfolio from small to enterprise. Comes with a fully functional front-end built with RSCs and Tailwind.\n\nWe're constantly adding more templates to our [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates). If you maintain your own template, consider adding the `payload-template` topic to your GitHub repository for others to find.\n\n- [Official Templates](https://github.com/payloadcms/payload/tree/main/templates)\n- [Community Templates](https://github.com/topics/payload-template)\n\n## \u2728 Features\n\n- Completely free and open-source\n- Next.js native, built to run inside _your_ `/app` folder\n- Use server components to extend Payload UI\n- Query your database directly in server components, no need for REST / GraphQL\n- Fully TypeScript with automatic types for your data\n- [Auth out of the box](https://payloadcms.com/docs/authentication/overview)\n- [Versions and drafts](https://payloadcms.com/docs/versions/overview)\n- [Localization](https://payloadcms.com/docs/configuration/localization)\n- [Block-based layout builder](https://payloadcms.com/docs/fields/blocks)\n- [Customizable React admin](https://payloadcms.com/docs/admin/overview)\n- [Lexical rich text editor](https://payloadcms.com/docs/fields/rich-text)\n- [Conditional field logic](https://payloadcms.com/docs/fields/overview#conditional-logic)\n- Extremely granular [Access Control](https://payloadcms.com/docs/access-control/overview)\n- [Document and field-level hooks](https://payloadcms.com/docs/hooks/overview) for every action Payload provides\n- Intensely fast API\n- Highly secure thanks to HTTP-only cookies, CSRF protection, and more\n\n<a target=\"_blank\" href=\"https://github.com/payloadcms/payload/discussions\"><strong>Request Feature</strong></a>\n\n## \ud83d\uddd2\ufe0f Documentation\n\nCheck out the [Payload website](https://payloadcms.com/docs/getting-started/what-is-payload) to find in-depth documentation for everything that Payload offers.\n\nMigrating from v2 to v3? Check out the [3.0 Migration Guide](https://github.com/payloadcms/payload/blob/main/docs/migration-guide/overview.mdx) on how to do it.\n\n## \ud83d\ude4b Contributing\n\nIf you want to add contributions to this repository, please follow the instructions in [contributing.md](./CONTRIBUTING.md).\n\n## \ud83d\udcda Examples\n\nThe [Examples Directory](./examples) is a great resource for learning how to setup Payload in a variety of different ways, but you can also find great examples in our blog and throughout our social media.\n\nIf you'd like to run the examples, you can use `create-payload-app` to create a project from one:\n\n```sh\nnpx create-payload-app --example example_name\n```\n\nYou can see more examples at:\n\n- [Examples Directory](./examples)\n- [Payload Blog](https://payloadcms.com/blog)\n- [Payload YouTube](https://www.youtube.com/@payloadcms)\n\n## \ud83d\udd0c Plugins\n\nPayload is highly extensible and allows you to install or distribute plugins that add or remove functionality. There are both officially-supported and community-supported plugins available. If you maintain your own plugin, consider adding the `payload-plugin` topic to your GitHub repository for others to find.\n\n- [Official Plugins](https://github.com/orgs/payloadcms/repositories?q=topic%3Apayload-plugin)\n- [Community Plugins](https://github.com/topics/payload-plugin)\n\n## \ud83d\udea8 Need help?\n\nThere are lots of good conversations and resources in our Github Discussions board and our Discord Server. If you're struggling with something, chances are, someone's already solved what you're up against. :point_down:\n\n- [GitHub Discussions](https://github.com/payloadcms/payload/discussions)\n- [GitHub Issues](https://github.com/payloadcms/payload/issues)\n- [Discord](https://t.co/30APlsQUPB)\n- [Community Help](https://payloadcms.com/community-help)\n\n## \u2b50 Like what we're doing? Give us a star\n\n![payload-github-star](https://cms.payloadcms.com/media/payload-github-star.gif)\n\n## \ud83d\udc4f Thanks to all our contributors\n\n<img align=\"left\" src=\"https://contributors-img.web.app/image?repo=payloadcms/payload\"/>\n"
}