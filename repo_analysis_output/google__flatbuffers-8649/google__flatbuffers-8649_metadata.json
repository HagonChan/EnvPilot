{
    "primary_language": "C++",
    "language_guidelines": "Programming Language guidelines for C++:\n# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\nname: CI\npermissions: read-all\n\non:\n  # For manual tests.\n  workflow_dispatch:\n  push:\n    tags:\n      - \"*\" # new tag version, like `0.8.4` or else\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    # Run daily at 4:45 A.M. to catch dependencies that break us.\n    - cron: '45 4 * * *'\n\njobs:\n  build-linux:\n    permissions:\n      contents: write\n    outputs:\n      digests-gcc: ${{ steps.hash-gcc.outputs.hashes }}\n      digests-clang: ${{ steps.hash-clang.outputs.hashes }}\n    name: Build Linux\n    runs-on: ubuntu-24.04\n    strategy:\n      matrix:\n        cxx: [g++-13, clang++-18]\n      fail-fast: false\n    steps:\n    - uses: actions/checkout@v3\n    - name: cmake\n      run: CXX=${{ matrix.cxx }} cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_STRICT_MODE=ON -DFLATBUFFERS_STATIC_FLATC=ON .\n    - name: build\n      run: make -j\n    - name: test\n      run: ./flattests\n    - name: make flatc executable\n      run: |\n        chmod +x flatc\n        ./flatc --version\n    - name: upload build artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: Linux flatc binary ${{ matrix.cxx }}\n        path: flatc\n    # Below if only for release.\n    - name: Zip file\n      if: startsWith(github.ref, 'refs/tags/')\n      run: zip Linux.flatc.binary.${{ matrix.cxx }}.zip flatc\n    - name: Release zip file\n      uses: softprops/action-gh-release@v1\n      if: startsWith(github.ref, 'refs/tags/')\n      with:\n        files: Linux.flatc.binary.${{ matrix.cxx }}.zip\n    - name: Generate SLSA subjects - clang\n      if: matrix.cxx == 'clang++-18' && startsWith(github.ref, 'refs/tags/')\n      id: hash-clang\n      run: echo \"hashes=$(sha256sum Linux.flatc.binary.${{ matrix.cxx }}.zip | base64 -w0)\" >> $GITHUB_OUTPUT\n    - name: Generate SLSA subjects - gcc\n      if: matrix.cxx == 'g++-13' && startsWith(github.ref, 'refs/tags/')\n      id: hash-gcc\n      run: echo \"hashes=$(sha256sum Linux.flatc.binary.${{ matrix.cxx }}.zip | base64 -w0)\" >> $GITHUB_OUTPUT\n\n  build-linux-no-file-tests:\n    name: Build Linux with -DFLATBUFFERS_NO_FILE_TESTS\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: cmake\n      run: CXX=clang++-18 cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_STRICT_MODE=ON -DFLATBUFFERS_CXX_FLAGS=\"-DFLATBUFFERS_NO_FILE_TESTS\" .\n    - name: build\n      run: make -j\n    - name: test\n      run: ./flattests\n\n  build-linux-out-of-source:\n    name: Build Linux with out-of-source build location\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: make build directory\n      run: mkdir build\n    - name: cmake\n      working-directory: build\n      run: >\n        CXX=clang++-18 cmake .. -G \"Unix Makefiles\" -DFLATBUFFERS_STRICT_MODE=ON\n        -DFLATBUFFERS_BUILD_CPP17=ON -DFLATBUFFERS_CPP_STD=17\n    - name: build\n      working-directory: build\n      run: make -j\n    - name: test\n      working-directory: build\n      run: pwd && ./flattests\n    - name: test C++17\n      working-directory: build\n      run: ./flattests_cpp17\n\n  build-linux-cpp-std:\n    name: Build Linux C++\n    runs-on: ubuntu-24.04\n    strategy:\n      fail-fast: false\n      matrix:\n        std: [11, 14, 17, 20, 23]\n        cxx: [g++-13, clang++-18]\n        exclude:\n          # Clang++15 10.3.0 stdlibc++ doesn't fully support std 23\n          - cxx: clang++-18\n            std: 23\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: cmake\n      run: >\n        CXX=${{ matrix.cxx }} cmake -G \"Unix Makefiles\"\n        -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_STRICT_MODE=ON\n        -DFLATBUFFERS_CPP_STD=${{ matrix.std }}\n        -DFLATBUFFERS_BUILD_CPP17=${{ matrix.std >= 17 && 'On' || 'Off'}}\n    - name: build\n      run: make -j\n    - name: test\n      run: ./flattests\n    - name: test C++17\n      if: matrix.std >= 17\n      run: ./flattests_cpp17\n\n  build-cpp-std:\n    name: Build Windows C++\n    runs-on: windows-2022\n    strategy:\n      matrix:\n        std: [11, 14, 17, 20, 23]\n      fail-fast: false\n    steps:\n    - uses: actions/checkout@v3\n    - name: Add msbuild to PATH\n      uses: microsoft/setup-msbuild@v1.1\n    - name: cmake\n      run: >\n        cmake -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_BUILD_TYPE=Release\n        -DFLATBUFFERS_STRICT_MODE=ON\n        -DFLATBUFFERS_CPP_STD=${{ matrix.std }}\n        -DFLATBUFFERS_BUILD_CPP17=${{ matrix.std >= 17 && 'On' || 'Off'}}\n    - name: build\n      run: msbuild.exe FlatBuffers.sln /p:Configuration=Release /p:Platform=x64\n    - name: test\n      run: Release\\flattests.exe\n    - name: test C++17\n      if: matrix.std >= 17\n      run: Release\\flattests_cpp17.exe\n\n  build-windows:\n    permissions:\n      contents: write\n    outputs:\n      digests: ${{ steps.hash.outputs.hashes }}\n    name: Build Windows 2022\n    runs-on: windows-2022\n    steps:\n    - uses: actions/checkout@v3\n    - name: Add msbuild to PATH\n      uses: microsoft/setup-msbuild@v1.1\n    - name: cmake\n      run: cmake -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_CPP17=ON -DFLATBUFFERS_STRICT_MODE=ON .\n    - name: build\n      run: msbuild.exe FlatBuffers.sln /p:Configuration=Release /p:Platform=x64\n    - name: test\n      run: Release\\flattests.exe\n    - name: upload build artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: Windows flatc binary\n        path: Release\\flatc.exe\n    # Below if only for release.\n    - name: Zip file\n      if: startsWith(github.ref, 'refs/tags/')\n      run: move Release/flatc.exe . && Compress-Archive flatc.exe Windows.flatc.binary.zip\n    - name: Release binary\n      uses: softprops/action-gh-release@v1\n      if: startsWith(github.ref, 'refs/tags/')\n      with:\n        files: Windows.flatc.binary.zip\n    - name: Generate SLSA subjects\n      if: startsWith(github.ref, 'refs/tags/')\n      id: hash\n      shell: bash\n      run: echo \"hashes=$(sha256sum Windows.flatc.binary.zip | base64 -w0)\" >> $GITHUB_OUTPUT\n\n  build-dotnet-windows:\n    name: Build .NET Windows\n    runs-on: windows-2022-64core\n    strategy:\n      matrix:\n        configuration: [\n          '',\n          '-p:UnsafeByteBuffer=true',\n          # Fails two tests currently.\n          #'-p:EnableSpanT=true,UnsafeByteBuffer=true'\n          ]\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET Core SDK\n      uses: actions/setup-dotnet@v4.2.0\n      with:\n        dotnet-version: '8.0.x'\n    - name: Build\n      run: |\n        cd tests\\FlatBuffers.Test\n        dotnet new sln --force --name FlatBuffers.Test\n        dotnet sln FlatBuffers.Test.sln add FlatBuffers.Test.csproj\n        dotnet build -c Release ${{matrix.configuration}} FlatBuffers.Test.sln\n    - name: Run net6.0\n      run: |\n        cd tests\\FlatBuffers.Test\\bin\\Release\\net6.0\n        dir\n        .\\FlatBuffers.Test.exe\n    - name: Run net8.0\n      run: |\n        cd tests\\FlatBuffers.Test\\bin\\Release\\net8.0\n        .\\FlatBuffers.Test.exe\n\n  build-mac-intel:\n    permissions:\n      contents: write\n    outputs:\n      digests: ${{ steps.hash.outputs.hashes }}\n    name: Build Mac (for Intel)\n    runs-on: macos-latest-large\n    steps:\n    - uses: actions/checkout@v3\n    - name: cmake\n      run: cmake -G \"Xcode\" -DCMAKE_OSX_ARCHITECTURES=\"x86_64\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_STRICT_MODE=ON .\n    - name: build\n      run: xcodebuild -toolchain clang -configuration Release -target flattests\n    - name: check that the binary is x86_64\n      run: |\n        info=$(file Release/flatc)\n        echo $info\n        echo $info | grep \"Mach-O 64-bit executable x86_64\"\n    - name: test\n      run: Release/flattests\n    - name: make flatc executable\n      run: |\n        chmod +x Release/flatc\n        Release/flatc --version\n    - name: upload build artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: Mac flatc binary Intel\n        path: Release/flatc\n    # Below if only for release.\n    - name: Zip file\n      if: startsWith(github.ref, 'refs/tags/')\n      run: mv Release/flatc . && zip MacIntel.flatc.binary.zip flatc\n    - name: Release binary\n      uses: softprops/action-gh-release@v1\n      if: startsWith(github.ref, 'refs/tags/')\n      with:\n        files: MacIntel.flatc.binary.zip\n    - name: Generate SLSA subjects\n      if: startsWith(github.ref, 'refs/tags/')\n      id: hash\n      run: echo \"hashes=$(shasum -a 256 MacIntel.flatc.binary.zip | base64)\" >> $GITHUB_OUTPUT\n\n  build-mac-universal:\n    permissions:\n      contents: write\n    outputs:\n      digests: ${{ steps.hash.outputs.hashes }}\n    name: Build Mac (universal build)\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: cmake\n      run: cmake -G \"Xcode\" -DCMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_STRICT_MODE=ON .\n    - name: build\n      run: xcodebuild -toolchain clang -configuration Release -target flattests\n    - name: check that the binary is \"universal\"\n      run: |\n        info=$(file Release/flatc)\n        echo $info\n        echo $info | grep \"Mach-O universal binary with 2 architectures\"\n    - name: test\n      run: Release/flattests\n    - name: make flatc executable\n      run: |\n        chmod +x Release/flatc\n        Release/flatc --version\n    - name: upload build artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: Mac flatc binary Universal\n        path: Release/flatc\n    # Below if only for release.\n    - name: Zip file\n      if: startsWith(github.ref, 'refs/tags/')\n      run: mv Release/flatc . && zip Mac.flatc.binary.zip flatc\n    - name: Release binary\n      uses: softprops/action-gh-release@v1\n      if: startsWith(github.ref, 'refs/tags/')\n      with:\n        files: Mac.flatc.binary.zip\n    - name: Generate SLSA subjects\n      if: startsWith(github.ref, 'refs/tags/')\n      id: hash\n      run: echo \"hashes=$(shasum -a 256 Mac.flatc.binary.zip | base64)\" >> $GITHUB_OUTPUT\n\n  build-android:\n   name: Build Android (on Linux)\n   runs-on: ubuntu-24.04\n   steps:\n   - uses: actions/checkout@v3\n   - name: set up Java\n     uses: actions/setup-java@v3\n     with:\n       distribution: 'temurin'\n       java-version: '11'\n   - name: set up flatc\n     run: |\n       cmake -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF -DFLATBUFFERS_STRICT_MODE=ON .\n       make -j\n       echo \"${PWD}\" >> $GITHUB_PATH\n   - name: build\n     working-directory: android\n     run: gradle clean build\n\n  build-generator:\n    name: Check Generated Code\n    runs-on: ubuntu-24.04\n    strategy:\n      matrix:\n        cxx: [g++-13, clang++-18]\n    steps:\n    - uses: actions/checkout@v3\n    - name: cmake\n      run: CXX=${{ matrix.cxx }} cmake -G \"Unix Makefiles\" -DFLATBUFFERS_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_STRICT_MODE=ON . && make -j\n    - name: Generate\n      run: scripts/check_generate_code.py\n    - name: Generate gRPC\n      run: scripts/check-grpc-generated-code.py\n\n  build-generator-windows:\n    name: Check Generated Code on Windows\n    runs-on: windows-2022\n    steps:\n    - uses: actions/checkout@v3\n    - name: Add msbuild to PATH\n      uses: microsoft/setup-msbuild@v1.1\n    - name: cmake\n      run: cmake -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_CPP17=ON -DFLATBUFFERS_STRICT_MODE=ON .\n    - name: build\n      run: msbuild.exe FlatBuffers.sln /p:Configuration=Release /p:Platform=x64\n    - name: Generate\n      run: python3 scripts/check_generate_code.py --flatc Release\\flatc.exe\n    - name: Generate gRPC\n      run: python3 scripts/check-grpc-generated-code.py --flatc Release\\flatc.exe\n\n  build-benchmarks:\n    name: Build Benchmarks (on Linux)\n    runs-on: ubuntu-24.04\n    strategy:\n      matrix:\n        cxx: [g++-13]\n    steps:\n    - uses: actions/checkout@v3\n    - name: cmake\n      run: CXX=${{ matrix.cxx }} cmake -G \"Unix Makefiles\" -DFLATBUFFERS_CXX_FLAGS=\"-Wno-unused-parameter -fno-aligned-new\" -DFLATBUFFERS_BUILD_BENCHMARKS=ON -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_STRICT_MODE=ON . && make -j\n    - name: Run benchmarks\n      run: ./flatbenchmark --benchmark_repetitions=5 --benchmark_display_aggregates_only=true --benchmark_out_format=console --benchmark_out=benchmarks/results_${{matrix.cxx}}\n    - name: Upload benchmarks results\n      uses: actions/upload-artifact@v4\n      with:\n        name: Linux flatbenchmark results ${{matrix.cxx}}\n        path: benchmarks/results_${{matrix.cxx}}\n\n  build-java:\n    name: Build Java\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: test\n      working-directory: java\n      run: mvn test\n\n  build-kotlin-macos:\n    name: Build Kotlin MacOS\n    runs-on: macos-13\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      # Force Xcode 14.3 since Xcode 15 doesnt support older versions of\n      # kotlin. For Xcode 15, kotlin should be bumpped to 1.9.10\n      # https://stackoverflow.com/a/77150623\n      # For now, run with macos-13 which has this 14.3 installed:\n      # https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md#xcode\n    - name: Set up Xcode version\n      run: sudo xcode-select -s /Applications/Xcode_14.3.app/Contents/Developer\n    - uses: gradle/wrapper-validation-action@v1.0.5\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '11'\n    - name: Build flatc\n      run: |\n       cmake -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF .\n       make -j\n       echo \"${PWD}\" >> $GITHUB_PATH\n    - name: Build\n      working-directory: kotlin\n      run: ./gradlew clean iosSimulatorArm64Test macosX64Test macosArm64Test\n\n  build-kotlin-linux:\n    name: Build Kotlin Linux\n    runs-on: ubuntu-24.04\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '11'\n    - uses: gradle/wrapper-validation-action@v1.0.5\n    - name: Build flatc\n      run: |\n       cmake -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF .\n       make -j\n       echo \"${PWD}\" >> $GITHUB_PATH\n    - name: Build\n      working-directory: kotlin\n      # we are using docker's version of gradle\n      # so no need for wrapper validation or user\n      # gradlew\n      run: gradle jvmMainClasses jvmTest jsTest jsBrowserTest\n\n  build-rust-linux:\n    name: Build Rust Linux\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: test\n      working-directory: tests\n      run: bash RustTest.sh\n\n  build-rust-windows:\n    name: Build Rust Windows\n    runs-on: windows-2022-64core\n    steps:\n    - uses: actions/checkout@v3\n    - name: test\n      working-directory: tests\n      run: ./RustTest.bat\n\n  build-python:\n    name: Build Python\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: flatc\n      # FIXME: make test script not rely on flatc\n      run: cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_INSTALL=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF -DFLATBUFFERS_STRICT_MODE=ON . && make -j\n    - name: test\n      working-directory: tests\n      run: bash PythonTest.sh\n\n  build-go:\n    name: Build Go\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: flatc\n      # FIXME: make test script not rely on flatc\n      run: cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_INSTALL=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF -DFLATBUFFERS_STRICT_MODE=ON . && make -j\n    - name: test\n      working-directory: tests\n      run: bash GoTest.sh\n\n  build-php:\n   name: Build PHP\n   runs-on: ubuntu-24.04\n   steps:\n   - uses: actions/checkout@v3\n   - name: flatc\n     # FIXME: make test script not rely on flatc\n     run: cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_INSTALL=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF -DFLATBUFFERS_STRICT_MODE=ON . && make -j\n   - name: test\n     working-directory: tests\n     run: |\n       php phpTest.php\n       sh phpUnionVectorTest.sh\n\n  build-swift:\n    name: Test Swift\n    strategy:\n      matrix:\n        swift: [\"5.9\", \"5.10\", \"6.1\"]\n    # Only 22.04 has swift at the moment https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md?plain=1#L30\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@v3\n    - uses: vapor/swiftly-action@v0.2\n      with:\n        toolchain: ${{ matrix.swift }}\n    - name: Get swift version\n      run: swift --version\n    - name: test\n      run: |\n        swift build --build-tests\n        swift test\n\n  build-swift-windows:\n    name: Test swift windows\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: SwiftyLab/setup-swift@latest\n        with:\n          swift-version: '6.1'\n      - run: swift build\n      - run: swift test\n\n  build-swift-wasm:\n    name: Test Swift Wasm\n    runs-on: ubuntu-24.04\n    container:\n      image: ghcr.io/swiftwasm/carton:0.20.1\n    steps:\n       - uses: actions/checkout@v3\n       - uses: bytecodealliance/actions/wasmtime/setup@v1\n       - uses: swiftwasm/setup-swiftwasm@v1\n         with:\n           swift-version: \"wasm-6.0.2-RELEASE\"\n       - name: Test\n         working-directory: tests/swift/Wasm.tests\n         run: swift run carton test\n\n  build-ts:\n    name: Build TS\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: flatc\n      # FIXME: make test script not rely on flatc\n      run: cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_INSTALL=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF . && make -j\n    - name: pnpm\n      run: npm install -g pnpm esbuild\n    - name: deps\n      run: pnpm i\n    - name: compile\n      run: pnpm compile\n    - name: test\n      working-directory: tests/ts\n      run: |\n        python3 TypeScriptTest.py\n\n  build-dart:\n    name: Build Dart\n    runs-on: ubuntu-24.04\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dart-lang/setup-dart@v1\n        with:\n          sdk: stable\n      - name: flatc\n        # FIXME: make test script not rely on flatc\n        run: cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_INSTALL=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF -DFLATBUFFERS_STRICT_MODE=ON . && make -j\n      - name: test\n        working-directory: tests\n        run: bash DartTest.sh\n\n  build-nim:\n    name: Build Nim\n    runs-on: ubuntu-24.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: flatc\n      # FIXME: make test script not rely on flatc\n      run: cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_TESTS=OFF -DFLATBUFFERS_INSTALL=OFF -DFLATBUFFERS_BUILD_FLATLIB=OFF -DFLATBUFFERS_BUILD_FLATHASH=OFF . && make -j\n    - uses: jiro4989/setup-nim-action@v1\n    - name: install library\n      working-directory: nim\n      run: nimble -y develop && nimble install\n    - name: test\n      working-directory: tests/nim\n      run: python3 testnim.py\n\n  bazel:\n    name: Bazel\n    runs-on: ubuntu-24.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: bazel build\n        run: >\n          bazel build\n          //:flatc\n          //:flatbuffers\n      - name: bazel test\n        run: >\n          bazel test\n          //tests:flatbuffers_test\n\n  release-digests:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs: [build-linux, build-windows, build-mac-intel, build-mac-universal]\n    outputs:\n      digests: ${{ steps.hash.outputs.digests }}\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Merge results\n        id: hash\n        env:\n          LINUXGCC_DIGESTS: \"${{ needs.build-linux.outputs.digests-gcc }}\"\n          LINUXCLANG_DIGESTS: \"${{ needs.build-linux.outputs.digests-clang }}\"\n          MAC_DIGESTS: \"${{ needs.build-mac-universal.outputs.digests }}\"\n          MACINTEL_DIGESTS: \"${{ needs.build-mac-intel.outputs.digests }}\"\n          WINDOWS_DIGESTS: \"${{ needs.build-windows.outputs.digests }}\"\n        run: |\n          set -euo pipefail\n          echo \"$LINUXGCC_DIGESTS\" | base64 -d > checksums.txt\n          echo \"$LINUXCLANG_DIGESTS\" | base64 -d >> checksums.txt\n          echo \"$MAC_DIGESTS\" | base64 -d >> checksums.txt\n          echo \"$MACINTEL_DIGESTS\" | base64 -d >> checksums.txt\n          echo \"$WINDOWS_DIGESTS\" | base64 -d >> checksums.txt\n          echo \"digests=$(cat checksums.txt | base64 -w0)\" >> $GITHUB_OUTPUT\n\n  provenance:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs: [release-digests]\n    permissions:\n      actions: read   # To read the workflow path.\n      id-token: write # To sign the provenance.\n      contents: write # To add assets to a release.\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.1\n    with:\n      base64-subjects: \"${{ needs.release-digests.outputs.digests }}\"\n      upload-assets: true # Optional: Upload to a new release\n      compile-generator: true # Workaround for https://github.com/slsa-framework/slsa-github-generator/issues/1163\n\nfile: main.yml\nContent:\nname: OSS-Fuzz\npermissions: read-all\n\non:\n  pull_request:\n    branches:\n      - master\n    paths:\n      - include/**\n      - src/**\n      - tests/**.cpp\n      - tests/**.h\njobs:\n Fuzzing:\n   runs-on: ubuntu-latest\n   steps:\n   - name: Build Fuzzers\n     id: build\n     uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flatbuffers'\n       language: c++\n   - name: Run Fuzzers\n     uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flatbuffers'\n       language: c++\n       fuzz-seconds: 60\n   - name: Upload Crash\n     uses: actions/upload-artifact@v4\n     if: failure() && steps.build.outcome == 'success'\n     with:\n       name: artifacts\n       path: ./out/artifacts\n",
    "readme": "![logo](https://flatbuffers.dev/assets/flatbuffers_logo.svg) FlatBuffers\n===========\n\n![Build status](https://github.com/google/flatbuffers/actions/workflows/build.yml/badge.svg?branch=master)\n[![BuildKite status](https://badge.buildkite.com/7979d93bc6279aa539971f271253c65d5e8fe2fe43c90bbb25.svg)](https://buildkite.com/bazel/flatbuffers)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/flatbuffers.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:flatbuffers)\n[![Discord Chat](https://img.shields.io/discord/656202785926152206.svg)](https:///discord.gg/6qgKs3R)\n[![Twitter Follow](https://img.shields.io/twitter/follow/wvo.svg?style=social)](https://twitter.com/wvo)\n[![Twitter Follow](https://img.shields.io/twitter/follow/dbaileychess.svg?style=social)](https://twitter.com/dbaileychess)\n\n\n**FlatBuffers** is a cross platform serialization library architected for\nmaximum memory efficiency. It allows you to directly access serialized data without parsing/unpacking it first, while still having great forwards/backwards compatibility.\n\n## Quick Start\n\n1. Build the compiler for flatbuffers (`flatc`)\n\n    Use `cmake` to create the build files for your platform and then perform the compilation (Linux example).\n\n    ```\n    cmake -G \"Unix Makefiles\"\n    make -j\n    ```\n\n2. Define your flatbuffer schema (`.fbs`)\n\n    Write the [schema](https://flatbuffers.dev/flatbuffers_guide_writing_schema.html) to define the data you want to serialize. See [monster.fbs](https://github.com/google/flatbuffers/blob/master/samples/monster.fbs) for an example.\n\n3. Generate code for your language(s)\n\n    Use the `flatc` compiler to take your schema and generate language-specific code:\n\n    ```\n    ./flatc --cpp --rust monster.fbs\n    ```\n    \n    Which generates `monster_generated.h` and `monster_generated.rs` files.\n\n4. Serialize data\n\n    Use the generated code, as well as the `FlatBufferBuilder` to construct your serialized buffer. ([`C++` example](https://github.com/google/flatbuffers/blob/master/samples/sample_binary.cpp#L24-L56))\n\n5. Transmit/store/save Buffer\n\n    Use your serialized buffer however you want. Send it to someone, save it for later, etc...\n\n6. Read the data\n\n    Use the generated accessors to read the data from the serialized buffer.\n    \n    It doesn't need to be the same language/schema version, FlatBuffers ensures the data is readable across languages and schema versions. See the [`Rust` example](https://github.com/google/flatbuffers/blob/master/samples/sample_binary.rs#L92-L106) reading the data written by `C++`.\n\n## Documentation\n\n**Go to our [landing page][] to browse our documentation.**\n\n## Supported operating systems\n- Windows\n- macOS\n- Linux\n- Android\n- And any others with a recent C++ compiler (C++ 11 and newer)\n\n## Supported programming languages\n\nCode generation and runtime libraries for many popular languages.\n\n1. C\n1. C++ - [snapcraft.io](https://snapcraft.io/flatbuffers)\n1. C# - [nuget.org](https://www.nuget.org/packages/Google.FlatBuffers)\n1. Dart - [pub.dev](https://pub.dev/packages/flat_buffers)\n1. Go - [go.dev](https://pkg.go.dev/github.com/google/flatbuffers)\n1. Java - [Maven](https://search.maven.org/artifact/com.google.flatbuffers/flatbuffers-java)\n1. JavaScript - [NPM](https://www.npmjs.com/package/flatbuffers)\n1. Kotlin\n1. Lobster\n1. Lua\n1. PHP\n1. Python - [PyPI](https://pypi.org/project/flatbuffers/)\n1. Rust - [crates.io](https://crates.io/crates/flatbuffers)\n1. Swift - [swiftpackageindex](https://swiftpackageindex.com/google/flatbuffers)\n1. TypeScript - [NPM](https://www.npmjs.com/package/flatbuffers)\n1. Nim\n\n## Versioning\n\nFlatBuffers does not follow traditional SemVer versioning (see [rationale](https://github.com/google/flatbuffers/wiki/Versioning)) but rather uses a format of the date of the release.\n\n## Contribution\n\n* [FlatBuffers Issues Tracker][] to submit an issue.\n* [stackoverflow.com][] with [`flatbuffers` tag][] for any questions regarding FlatBuffers.\n\n*To contribute to this project,* see [CONTRIBUTING][].\n\n## Community\n\n* [Discord Server](https:///discord.gg/6qgKs3R)\n\n## Security\n\nPlease see our [Security Policy](SECURITY.md) for reporting vulnerabilities.\n\n## Licensing\n*Flatbuffers* is licensed under the Apache License, Version 2.0. See [LICENSE][] for the full license text.\n\n<br>\n\n   [CONTRIBUTING]: http://github.com/google/flatbuffers/blob/master/CONTRIBUTING.md\n   [`flatbuffers` tag]: https://stackoverflow.com/questions/tagged/flatbuffers\n   [FlatBuffers Google Group]: https://groups.google.com/forum/#!forum/flatbuffers\n   [FlatBuffers Issues Tracker]: http://github.com/google/flatbuffers/issues\n   [stackoverflow.com]: http://stackoverflow.com/search?q=flatbuffers\n   [landing page]: https://google.github.io/flatbuffers\n   [LICENSE]: https://github.com/google/flatbuffers/blob/master/LICENSE\n",
    "org": "google",
    "repo": "flatbuffers",
    "number": 8649,
    "commit": "518bf42df82da02b77696027215bda91edbd4102"
}