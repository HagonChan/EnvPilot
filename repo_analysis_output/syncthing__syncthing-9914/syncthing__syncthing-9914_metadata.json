{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build-syncthing.yaml\nContent:\nname: Build Syncthing\n\non:\n  pull_request:\n  push:\n  schedule:\n    # Run nightly build at 05:00 UTC\n    - cron: '00 05 * * *'\n  workflow_dispatch:\n\nenv:\n  # The go version to use for builds. We set check-latest to true when\n  # installing, so we get the latest patch version that matches the\n  # expression.\n  GO_VERSION: \"~1.23.0\"\n\n  # Optimize compatibility on the slow archictures.\n  GO386: softfloat\n  GOARM: \"5\"\n  GOMIPS: softfloat\n\n  # Avoid hilarious amounts of obscuring log output when running tests.\n  LOGGER_DISCARD: \"1\"\n\n  # Our build metadata\n  BUILD_USER: builder\n  BUILD_HOST: github.syncthing.net\n\n# A note on actions and third party code... The actions under actions/ (like\n# `uses: actions/checkout`) are maintained by GitHub, and we need to trust\n# GitHub to maintain their code and infrastructure or we're in deep shit in\n# general. The same doesn't necessarily apply to other actions authors, so\n# some care needs to be taken when adding steps, especially in the paths\n# that lead up to code being packaged and signed.\n\njobs:\n\n  #\n  # Tests for all platforms. Runs a matrix build on Windows, Linux and Mac,\n  # with the list of expected supported Go versions (current, previous).\n  #\n\n  build-test:\n    name: Build and test\n    strategy:\n      fail-fast: false\n      matrix:\n        runner: [\"windows-latest\", \"ubuntu-latest\", \"macos-latest\"]\n        # The oldest version in this list should match what we have in our go.mod.\n        # Variables don't seem to be supported here, or we could have done something nice.\n        go: [\"~1.22.6\", \"~1.23.0\"]\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - name: Set git to use LF\n        if: matrix.runner == 'windows-latest'\n        # Without this, the Windows checkout will happen with CRLF line\n        # endings, which is fine for the source code but messes up tests\n        # that depend on data on disk being as expected. Ideally, those\n        # tests should be fixed, but not today.\n        run: |\n          git config --global core.autocrlf false\n          git config --global core.eol lf\n\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ matrix.go }}\n          cache: true\n          check-latest: true\n\n      - name: Build\n        run: |\n          go run build.go\n\n      - name: Install go-test-json-to-loki\n        run: |\n          go install calmh.dev/go-test-json-to-loki@latest\n\n      - name: Test\n        run: |\n          go version\n          go run build.go test | go-test-json-to-loki\n        env:\n          GOFLAGS: \"-json\"\n          LOKI_URL: ${{ secrets.LOKI_URL }}\n          LOKI_USER: ${{ secrets.LOKI_USER }}\n          LOKI_PASSWORD: ${{ secrets.LOKI_PASSWORD }}\n          LOKI_LABELS: \"go=${{ matrix.go }},runner=${{ matrix.runner }},repo=${{ github.repository }},ref=${{ github.ref }}\"\n\n  #\n  # Meta checks for formatting, copyright, etc\n  #\n\n  correctness:\n    name: Check correctness\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Check correctness\n        run: |\n          go test -v ./meta\n\n  #\n  # The basic checks job is a virtual one that depends on the matrix tests,\n  # the correctness checks, and various builds that we always do. This makes\n  # it easy to have the PR process have a single test as a gatekeeper for\n  # merging, instead of having to add all the matrix tests and update them\n  # each time the version changes. (The top level test is not available for\n  # choosing there, only the matrix \"children\".)\n  #\n\n  basics:\n    name: Basic checks passed\n    runs-on: ubuntu-latest\n    needs:\n      - build-test\n      - correctness\n      - package-linux\n      - package-cross\n      - package-source\n      - package-debian\n      - govulncheck\n    steps:\n      - uses: actions/checkout@v4\n\n  #\n  # Windows\n  #\n\n  package-windows:\n    name: Package for Windows\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/v'))\n    environment: release\n    runs-on: windows-latest\n    steps:\n      - name: Set git to use LF\n        # Without this, the checkout will happen with CRLF line endings,\n        # which is fine for the source code but messes up tests that depend\n        # on data on disk being as expected. Ideally, those tests should be\n        # fixed, but not today.\n        run: |\n          git config --global core.autocrlf false\n          git config --global core.eol lf\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Get actual Go version\n        run: |\n          go version\n          echo \"GO_VERSION=$(go version | sed 's#^.*go##;s# .*##')\" >> $GITHUB_ENV\n\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~\\AppData\\Local\\go-build\n            ~\\go\\pkg\\mod\n          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-package-${{ hashFiles('**/go.sum') }}\n\n      - name: Install dependencies\n        run: |\n          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@v1.4.0\n\n      - name: Create packages\n        run: |\n          $targets = 'syncthing', 'stdiscosrv', 'strelaysrv'\n          $archs = 'amd64', 'arm', 'arm64', '386'\n          foreach ($arch in $archs) {\n            foreach ($tgt in $targets) {\n              go run build.go -goarch $arch zip $tgt\n            }\n          }\n        env:\n          CGO_ENABLED: \"0\"\n          CODESIGN_SIGNTOOL: ${{ secrets.CODESIGN_SIGNTOOL }}\n          CODESIGN_CERTIFICATE_BASE64: ${{ secrets.CODESIGN_CERTIFICATE_BASE64 }}\n          CODESIGN_CERTIFICATE_PASSWORD: ${{ secrets.CODESIGN_CERTIFICATE_PASSWORD }}\n          CODESIGN_TIMESTAMP_SERVER: ${{ secrets.CODESIGN_TIMESTAMP_SERVER }}\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: packages-windows\n          path: \"*.zip\"\n\n  #\n  # Linux\n  #\n\n  package-linux:\n    name: Package for Linux\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Get actual Go version\n        run: |\n          go version\n          echo \"GO_VERSION=$(go version | sed 's#^.*go##;s# .*##')\" >> $GITHUB_ENV\n\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-package-${{ hashFiles('**/go.sum') }}\n\n      - name: Create packages\n        run: |\n          archs=$(go tool dist list | grep linux | sed 's#linux/##')\n          for goarch in $archs ; do\n            for tgt in syncthing stdiscosrv strelaysrv ; do\n              go run build.go -goarch \"$goarch\" tar \"$tgt\"\n            done\n          done\n        env:\n          CGO_ENABLED: \"0\"\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: packages-linux\n          path: |\n            *.tar.gz\n            compat.json\n\n  #\n  # macOS\n  #\n\n  package-macos:\n    name: Package for macOS\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/v'))\n    environment: release\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Get actual Go version\n        run: |\n          go version\n          echo \"GO_VERSION=$(go version | sed 's#^.*go##;s# .*##')\" >> $GITHUB_ENV\n\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-package-${{ hashFiles('**/go.sum') }}\n\n      - name: Import signing certificate\n        run: |\n          # Set up a run-specific keychain, making it available for the\n          # `codesign` tool.\n          umask 066\n          KEYCHAIN_PATH=$RUNNER_TEMP/codesign.keychain\n          KEYCHAIN_PASSWORD=$(uuidgen)\n          security create-keychain -p \"$KEYCHAIN_PASSWORD\" \"$KEYCHAIN_PATH\"\n          security default-keychain -s \"$KEYCHAIN_PATH\"\n          security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" \"$KEYCHAIN_PATH\"\n          security set-keychain-settings -lut 21600 \"$KEYCHAIN_PATH\"\n\n          # Import the certificate\n          CERTIFICATE_PATH=$RUNNER_TEMP/codesign.p12\n          echo \"$DEVELOPER_ID_CERTIFICATE_BASE64\" | base64 -d -o \"$CERTIFICATE_PATH\"\n          security import \"$CERTIFICATE_PATH\" -k \"$KEYCHAIN_PATH\" -P \"$DEVELOPER_ID_CERTIFICATE_PASSWORD\" -T /usr/bin/codesign -T /usr/bin/productsign\n          security set-key-partition-list -S apple-tool:,apple: -s -k actions \"$KEYCHAIN_PATH\"\n\n          # Set the codesign identity for following steps\n          echo \"CODESIGN_IDENTITY=$CODESIGN_IDENTITY\" >> $GITHUB_ENV\n        env:\n          DEVELOPER_ID_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_CERTIFICATE_BASE64 }}\n          DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.DEVELOPER_ID_CERTIFICATE_PASSWORD }}\n          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}\n\n      - name: Create package (amd64)\n        run: |\n          for tgt in syncthing stdiscosrv strelaysrv ; do\n            go run build.go -goarch amd64 zip \"$tgt\"\n          done\n        env:\n          CGO_ENABLED: \"1\"\n\n      - name: Create package (arm64 cross)\n        run: |\n          cat <<EOT > xgo.sh\n          #!/bin/bash\n          CGO_ENABLED=1 \\\n            CGO_CFLAGS=\"-target arm64-apple-macos10.15\" \\\n            CGO_LDFLAGS=\"-target arm64-apple-macos10.15\" \\\n            go \"\\$@\"\n          EOT\n          chmod 755 xgo.sh\n          for tgt in syncthing stdiscosrv strelaysrv ; do\n            go run build.go -gocmd ./xgo.sh -goarch arm64 zip \"$tgt\"\n          done\n        env:\n          CGO_ENABLED: \"1\"\n\n      - name: Create package (universal)\n        run: |\n          rm -rf _tmp\n          mkdir _tmp\n          pushd _tmp\n\n          unzip ../syncthing-macos-amd64-*.zip\n          unzip ../syncthing-macos-arm64-*.zip\n          lipo -create syncthing-macos-amd64-*/syncthing syncthing-macos-arm64-*/syncthing -o syncthing\n\n          amd64=(syncthing-macos-amd64-*)\n          universal=\"${amd64/amd64/universal}\"\n          mv \"$amd64\" \"$universal\"\n          mv syncthing \"$universal\"\n          zip -r \"../$universal.zip\" \"$universal\"\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: packages-macos\n          path: \"*.zip\"\n\n  notarize-macos:\n    name: Notarize for macOS\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/v'))\n    environment: release\n    needs:\n      - package-macos\n    runs-on: macos-latest\n    steps:\n      - name: Download artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: packages-macos\n\n      - name: Notarize binaries\n        run: |\n          APPSTORECONNECT_API_KEY_PATH=\"$RUNNER_TEMP/apikey.p8\"\n          echo \"$APPSTORECONNECT_API_KEY\" | base64 -d -o \"$APPSTORECONNECT_API_KEY_PATH\"\n          for file in *-macos-*.zip ; do\n            xcrun notarytool submit \\\n              -k \"$APPSTORECONNECT_API_KEY_PATH\" \\\n              -d \"$APPSTORECONNECT_API_KEY_ID\" \\\n              -i \"$APPSTORECONNECT_API_KEY_ISSUER\" \\\n              $file\n          done\n        env:\n          APPSTORECONNECT_API_KEY: ${{ secrets.APPSTORECONNECT_API_KEY }}\n          APPSTORECONNECT_API_KEY_ID: ${{ secrets.APPSTORECONNECT_API_KEY_ID }}\n          APPSTORECONNECT_API_KEY_ISSUER: ${{ secrets.APPSTORECONNECT_API_KEY_ISSUER }}\n\n  #\n  # Cross compile other unixes\n  #\n\n  package-cross:\n    name: Package cross compiled\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Get actual Go version\n        run: |\n          go version\n          echo \"GO_VERSION=$(go version | sed 's#^.*go##;s# .*##')\" >> $GITHUB_ENV\n\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-cross-${{ hashFiles('**/go.sum') }}\n\n      - name: Create packages\n        run: |\n          platforms=$(go tool dist list \\\n            | grep -v aix/ppc64 \\\n            | grep -v android/ \\\n            | grep -v darwin/ \\\n            | grep -v ios/ \\\n            | grep -v js/ \\\n            | grep -v linux/ \\\n            | grep -v nacl/ \\\n            | grep -v plan9/ \\\n            | grep -v windows/ \\\n            | grep -v /wasm \\\n          )\n\n          # Build for each platform with errors silenced, because we expect\n          # some oddball platforms to fail. This avoids a bunch of errors in\n          # the GitHub Actions output, instead summarizing each build\n          # failure as a warning.\n          for plat in $platforms; do\n            goos=\"${plat%/*}\"\n            goarch=\"${plat#*/}\"\n            echo \"::group ::$plat\"\n            for tgt in syncthing stdiscosrv strelaysrv ; do\n              if ! go run build.go -goos \"$goos\" -goarch \"$goarch\" tar \"$tgt\" 2>/dev/null; then\n                echo \"::warning ::Failed to build $tgt for $plat\"\n              fi\n            done\n            echo \"::endgroup::\"\n          done\n        env:\n          CGO_ENABLED: \"0\"\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: packages-other\n          path: \"*.tar.gz\"\n\n  #\n  # Source\n  #\n\n  package-source:\n    name: Package source code\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Package source\n        run: |\n          version=$(go run build.go version)\n          echo \"$version\" > RELEASE\n\n          go mod vendor\n          go run build.go assets\n\n          cd ..\n\n          tar c -z -f \"syncthing-source-$version.tar.gz\" \\\n            --exclude .git \\\n            syncthing\n\n          mv \"syncthing-source-$version.tar.gz\" syncthing\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: packages-source\n          path: syncthing-source-*.tar.gz\n\n  #\n  # Sign binaries for auto upgrade, generate ASC signature files\n  #\n\n  sign-for-upgrade:\n    name: Sign for upgrade\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/heads/release-')  || startsWith(github.ref, 'refs/tags/v'))\n    environment: release\n    needs:\n      - package-windows\n      - package-linux\n      - package-macos\n      - package-cross\n      - package-source\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/checkout@v4\n        with:\n          repository: syncthing/release-tools\n          path: tools\n          fetch-depth: 0\n\n      - name: Download artifacts\n        uses: actions/download-artifact@v4\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Install signing tool\n        run: |\n          go install ./cmd/dev/stsigtool\n\n      - name: Sign archives\n        run: |\n          export PRIVATE_KEY=\"$RUNNER_TEMP/privkey.pem\"\n          export PATH=\"$PATH:$(go env GOPATH)/bin\"\n          echo \"$STSIGTOOL_PRIVATE_KEY\" | base64 -d > \"$PRIVATE_KEY\"\n          mkdir packages\n          mv packages-*/* packages\n          pushd packages\n          \"$GITHUB_WORKSPACE/tools/sign-only\"\n          rm -f \"$PRIVATE_KEY\"\n        env:\n          STSIGTOOL_PRIVATE_KEY: ${{ secrets.STSIGTOOL_PRIVATE_KEY }}\n\n      - name: Create shasum files\n        run: |\n          pushd packages\n          files=(*.tar.gz *.zip)\n          sha1sum \"${files[@]}\" > sha1sum.txt\n          sha256sum \"${files[@]}\" > sha256sum.txt\n          popd\n\n          version=$(go run build.go version)\n          echo \"VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Sign shasum files\n        uses: docker://ghcr.io/kastelo/ezapt:latest\n        with:\n          args:\n            sign\n            packages/sha1sum.txt packages/sha256sum.txt\n        env:\n          EZAPT_KEYRING_BASE64: ${{ secrets.APT_GPG_KEYRING_BASE64 }}\n\n      - name: Sign source\n        uses: docker://ghcr.io/kastelo/ezapt:latest\n        with:\n          args:\n            sign --detach --ascii\n            packages/syncthing-source-${{ env.VERSION }}.tar.gz\n        env:\n          EZAPT_KEYRING_BASE64: ${{ secrets.APT_GPG_KEYRING_BASE64 }}\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: packages-signed\n          path: |\n            packages/*.tar.gz\n            packages/*.zip\n            packages/*.asc\n            packages/*.json\n\n  #\n  # Debian\n  #\n\n  package-debian:\n    name: Package for Debian\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Get actual Go version\n        run: |\n          go version\n          echo \"GO_VERSION=$(go version | sed 's#^.*go##;s# .*##')\" >> $GITHUB_ENV\n\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '3.0'\n\n      - name: Install fpm\n        run: |\n          gem install fpm\n\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-debian-${{ hashFiles('**/go.sum') }}\n\n      - name: Package for Debian\n        run: |\n          for arch in amd64 i386 armhf armel arm64 ; do\n            for tgt in syncthing stdiscosrv strelaysrv ; do\n              go run build.go -no-upgrade -installsuffix=no-upgrade -goarch \"$arch\" deb \"$tgt\"\n            done\n          done\n        env:\n          BUILD_USER: debian\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: debian-packages\n          path: \"*.deb\"\n\n  #\n  # Nightlies\n  #\n\n  publish-nightly:\n    name: Publish nightly build\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.ref, 'refs/heads/release-nightly')\n    environment: release\n    needs:\n      - sign-for-upgrade\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          repository: syncthing/release-tools\n          path: tools\n          fetch-depth: 0\n\n      - name: Download artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: packages-signed\n          path: packages\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Create release json\n        run: |\n          cd packages\n          \"$GITHUB_WORKSPACE/tools/generate-release-json\" \"$BASE_URL\" > nightly.json\n        env:\n          BASE_URL: ${{ secrets.NIGHTLY_BASE_URL }}\n\n      - name: Push artifacts\n        uses: docker://docker.io/rclone/rclone:latest\n        env:\n          RCLONE_CONFIG_OBJSTORE_TYPE: s3\n          RCLONE_CONFIG_OBJSTORE_PROVIDER: ${{ secrets.S3_PROVIDER }}\n          RCLONE_CONFIG_OBJSTORE_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}\n          RCLONE_CONFIG_OBJSTORE_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}\n          RCLONE_CONFIG_OBJSTORE_ENDPOINT: ${{ secrets.S3_ENDPOINT }}\n          RCLONE_CONFIG_OBJSTORE_REGION: ${{ secrets.S3_REGION }}\n          RCLONE_CONFIG_OBJSTORE_ACL: public-read\n        with:\n          args: sync packages objstore:${{ secrets.S3_BUCKET }}/nightly\n\n  #\n  # Push release artifacts to Spaces\n  #\n\n  publish-release-files:\n    name: Publish release files\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/tags/v'))\n    environment: release\n    needs:\n      - sign-for-upgrade\n      - package-debian\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - name: Download signed packages\n        uses: actions/download-artifact@v4\n        with:\n          name: packages-signed\n          path: packages\n\n      - name: Download debian packages\n        uses: actions/download-artifact@v4\n        with:\n          name: debian-packages\n          path: packages\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Set version\n        run: |\n          version=$(go run build.go version)\n          echo \"VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Push to object store (${{ env.VERSION }})\n        uses: docker://docker.io/rclone/rclone:latest\n        env:\n          RCLONE_CONFIG_OBJSTORE_TYPE: s3\n          RCLONE_CONFIG_OBJSTORE_PROVIDER: ${{ secrets.S3_PROVIDER }}\n          RCLONE_CONFIG_OBJSTORE_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}\n          RCLONE_CONFIG_OBJSTORE_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}\n          RCLONE_CONFIG_OBJSTORE_ENDPOINT: ${{ secrets.S3_ENDPOINT }}\n          RCLONE_CONFIG_OBJSTORE_REGION: ${{ secrets.S3_REGION }}\n          RCLONE_CONFIG_OBJSTORE_ACL: public-read\n        with:\n          args: sync packages objstore:${{ secrets.S3_BUCKET }}/release/${{ env.VERSION }}\n\n      - name: Push to object store (latest)\n        uses: docker://docker.io/rclone/rclone:latest\n        env:\n          RCLONE_CONFIG_OBJSTORE_TYPE: s3\n          RCLONE_CONFIG_OBJSTORE_PROVIDER: ${{ secrets.S3_PROVIDER }}\n          RCLONE_CONFIG_OBJSTORE_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}\n          RCLONE_CONFIG_OBJSTORE_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}\n          RCLONE_CONFIG_OBJSTORE_ENDPOINT: ${{ secrets.S3_ENDPOINT }}\n          RCLONE_CONFIG_OBJSTORE_REGION: ${{ secrets.S3_REGION }}\n          RCLONE_CONFIG_OBJSTORE_ACL: public-read\n        with:\n          args: sync objstore:${{ secrets.S3_BUCKET }}/release/${{ env.VERSION }} objstore:${{ secrets.S3_BUCKET }}/release/latest\n\n  #\n  # Push Debian/APT archive\n  #\n\n  publish-apt:\n    name: Publish APT\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/v'))\n    environment: release\n    needs:\n      - package-debian\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - name: Download packages\n        uses: actions/download-artifact@v4\n        with:\n          name: debian-packages\n          path: packages\n\n      - name: Set version\n        run: |\n          version=$(go run build.go version)\n          echo \"Version: $version\"\n          echo \"VERSION=$version\" >> $GITHUB_ENV\n\n      # Decide whether packages should go to stable, candidate or nightly\n      - name: Prepare packages\n        run: |\n          kind=stable\n          if [[ $VERSION == *-rc.[0-9] ]] ; then\n            kind=candidate\n          elif [[ $VERSION == *-* ]] ; then\n            kind=nightly\n          fi\n          echo \"Kind: $kind\"\n          mkdir -p packages/syncthing/$kind\n          mv packages/*.deb packages/syncthing/$kind\n\n      - name: Pull archive\n        uses: docker://docker.io/rclone/rclone:latest\n        env:\n          RCLONE_CONFIG_OBJSTORE_TYPE: s3\n          RCLONE_CONFIG_OBJSTORE_PROVIDER: ${{ secrets.S3_PROVIDER }}\n          RCLONE_CONFIG_OBJSTORE_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}\n          RCLONE_CONFIG_OBJSTORE_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}\n          RCLONE_CONFIG_OBJSTORE_ENDPOINT: ${{ secrets.S3_ENDPOINT }}\n          RCLONE_CONFIG_OBJSTORE_REGION: ${{ secrets.S3_REGION }}\n          RCLONE_CONFIG_OBJSTORE_ACL: public-read\n        with:\n          args: sync objstore:syncthing-apt/dists dists\n\n      - name: Update archive\n        uses: docker://ghcr.io/kastelo/ezapt:latest\n        with:\n          args:\n            publish\n            --add packages\n            --dists dists\n        env:\n          EZAPT_KEYRING_BASE64: ${{ secrets.APT_GPG_KEYRING_BASE64 }}\n\n      - name: Push archive\n        uses: docker://docker.io/rclone/rclone:latest\n        env:\n          RCLONE_CONFIG_OBJSTORE_TYPE: s3\n          RCLONE_CONFIG_OBJSTORE_PROVIDER: ${{ secrets.S3_PROVIDER }}\n          RCLONE_CONFIG_OBJSTORE_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}\n          RCLONE_CONFIG_OBJSTORE_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}\n          RCLONE_CONFIG_OBJSTORE_ENDPOINT: ${{ secrets.S3_ENDPOINT }}\n          RCLONE_CONFIG_OBJSTORE_REGION: ${{ secrets.S3_REGION }}\n          RCLONE_CONFIG_OBJSTORE_ACL: public-read\n        with:\n          args: sync dists -v objstore:syncthing-apt/dists\n\n  #\n  # Build and push to Docker Hub\n  #\n\n  docker-syncthing:\n    name: Build and push Docker images\n    runs-on: ubuntu-latest\n    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' || github.ref == 'refs/heads/infrastructure' || startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/v'))\n    environment: docker\n    permissions:\n      contents: read\n      packages: write\n    strategy:\n      matrix:\n        pkg:\n          - syncthing\n          - strelaysrv\n          - stdiscosrv\n        include:\n          - pkg: syncthing\n            dockerfile: Dockerfile\n            image: syncthing/syncthing\n          - pkg: strelaysrv\n            dockerfile: Dockerfile.strelaysrv\n            image: syncthing/relaysrv\n          - pkg: stdiscosrv\n            dockerfile: Dockerfile.stdiscosrv\n            image: syncthing/discosrv\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }} # https://github.com/actions/checkout/issues/882\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: Get actual Go version\n        run: |\n          go version\n          echo \"GO_VERSION=$(go version | sed 's#^.*go##;s# .*##')\" >> $GITHUB_ENV\n\n      - uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-docker-${{ matrix.pkg }}-${{ hashFiles('**/go.sum') }}\n\n      - name: Build binaries\n        run: |\n          for arch in amd64 arm64 arm; do\n            go run build.go -goos linux -goarch \"$arch\" -no-upgrade build ${{ matrix.pkg }}\n            mv ${{ matrix.pkg }} ${{ matrix.pkg }}-linux-\"$arch\"\n          done\n        env:\n          CGO_ENABLED: \"0\"\n          BUILD_USER: docker\n\n      - name: Check if we will be able to push images\n        run: |\n          if [[ \"${{ secrets.DOCKERHUB_TOKEN }}\" != \"\" ]]; then\n            echo \"DOCKER_PUSH=true\" >> $GITHUB_ENV;\n          fi\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        if: env.DOCKER_PUSH == 'true'\n        with:\n          registry: docker.io\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n        if: env.DOCKER_PUSH == 'true'\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Set version tags\n        run: |\n          version=$(go run build.go version)\n          version=${version#v}\n          if [[ $version == @([0-9]|[0-9][0-9]).@([0-9]|[0-9][0-9]).@([0-9]|[0-9][0-9]) ]] ; then\n            echo Release version, pushing to :latest and version tags\n            major=${version%.*.*}\n            minor=${version%.*}\n            tags=docker.io/${{ matrix.image }}:$version,ghcr.io/${{ matrix.image }}:$version,docker.io/${{ matrix.image }}:$major,ghcr.io/${{ matrix.image }}:$major,docker.io/${{ matrix.image }}:$minor,ghcr.io/${{ matrix.image }}:$minor,docker.io/${{ matrix.image }}:latest,ghcr.io/${{ matrix.image }}:latest\n          elif [[ $version == *-rc.@([0-9]|[0-9][0-9]) ]] ; then\n            echo Release candidate, pushing to :rc and version tags\n            tags=docker.io/${{ matrix.image }}:$version,ghcr.io/${{ matrix.image }}:$version,docker.io/${{ matrix.image }}:rc,ghcr.io/${{ matrix.image }}:rc\n          else\n            echo Development version, pushing to :edge\n            tags=docker.io/${{ matrix.image }}:edge,ghcr.io/${{ matrix.image }}:edge\n          fi\n          echo \"DOCKER_TAGS=$tags\" >> $GITHUB_ENV\n          echo \"VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          file: ${{ matrix.dockerfile }}\n          platforms: linux/amd64,linux/arm64,linux/arm/7\n          push: ${{ env.DOCKER_PUSH == 'true' }}\n          tags: ${{ env.DOCKER_TAGS }}\n          labels: |\n            org.opencontainers.image.version=${{ env.VERSION }}\n            org.opencontainers.image.revision=${{ github.sha }}\n\n  #\n  # Check for known vulnerabilities in Go dependencies\n  #\n\n  govulncheck:\n    runs-on: ubuntu-latest\n    name: Run govulncheck\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: false\n          check-latest: true\n\n      - name: run govulncheck\n        run: |\n          go run build.go assets\n          go install golang.org/x/vuln/cmd/govulncheck@latest\n          govulncheck ./...\n\nfile: build-infra-dockers.yaml\nContent:\nname: Build Infrastructure Images\n\non:\n  push:\n    branches:\n      - infrastructure\n      - infra-*\n\nenv:\n  GO_VERSION: \"~1.23.0\"\n  CGO_ENABLED: \"0\"\n  BUILD_USER: docker\n  BUILD_HOST: github.syncthing.net\n\npermissions:\n  contents: read\n  packages: write\n\njobs:\n  docker-syncthing:\n    name: Build and push Docker images\n    if: github.repository == 'syncthing/syncthing'\n    runs-on: ubuntu-latest\n    environment: release\n    strategy:\n      matrix:\n        pkg:\n          - stcrashreceiver\n          - strelaypoolsrv\n          - stupgrades\n          - ursrv\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          check-latest: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Login to GHCR\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build binaries\n        run: |\n          for arch in arm64 amd64; do\n            go run build.go -goos linux -goarch \"$arch\" build ${{ matrix.pkg }}\n            mv ${{ matrix.pkg }} ${{ matrix.pkg }}-linux-\"$arch\"\n          done\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Set Docker tags (all branches)\n        run: |\n          tags=docker.io/syncthing/${{ matrix.pkg }}:${{ github.sha }},ghcr.io/syncthing/infra/${{ matrix.pkg }}:${{ github.sha }}\n          echo \"TAGS=$tags\" >> $GITHUB_ENV\n\n      - name: Set Docker tags (latest)\n        if: github.ref == 'refs/heads/infrastructure'\n        run: |\n          tags=docker.io/syncthing/${{ matrix.pkg }}:latest,ghcr.io/syncthing/infra/${{ matrix.pkg }}:latest,${{ env.TAGS }}\n          echo \"TAGS=$tags\" >> $GITHUB_ENV\n\n      - name: Build and push\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          file: ./Dockerfile.${{ matrix.pkg }}\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ env.TAGS }}\n          labels: |\n            org.opencontainers.image.revision=${{ github.sha }}\n",
    "readme": "[![Syncthing][14]][15]\n\n---\n\n[![MPLv2 License](https://img.shields.io/badge/license-MPLv2-blue.svg?style=flat-square)](https://www.mozilla.org/MPL/2.0/)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/88/badge)](https://bestpractices.coreinfrastructure.org/projects/88)\n[![Go Report Card](https://goreportcard.com/badge/github.com/syncthing/syncthing)](https://goreportcard.com/report/github.com/syncthing/syncthing)\n\n## Goals\n\nSyncthing is a **continuous file synchronization program**. It synchronizes\nfiles between two or more computers. We strive to fulfill the goals below.\nThe goals are listed in order of importance, the most important ones first.\nThis is the summary version of the goal list - for more\ncommentary, see the full [Goals document][13].\n\nSyncthing should be:\n\n1. **Safe From Data Loss**\n\n   Protecting the user's data is paramount. We take every reasonable\n   precaution to avoid corrupting the user's files.\n\n2. **Secure Against Attackers**\n\n   Again, protecting the user's data is paramount. Regardless of our other\n   goals, we must never allow the user's data to be susceptible to\n   eavesdropping or modification by unauthorized parties.\n\n3. **Easy to Use**\n\n   Syncthing should be approachable, understandable, and inclusive.\n\n4. **Automatic**\n\n   User interaction should be required only when absolutely necessary.\n\n5. **Universally Available**\n\n   Syncthing should run on every common computer. We are mindful that the\n   latest technology is not always available to every individual.\n\n6. **For Individuals**\n\n   Syncthing is primarily about empowering the individual user with safe,\n   secure, and easy to use file synchronization.\n\n7. **Everything Else**\n\n   There are many things we care about that don't make it on to the list. It\n   is fine to optimize for these values, as long as they are not in conflict\n   with the stated goals above.\n\n## Getting Started\n\nTake a look at the [getting started guide][2].\n\nThere are a few examples for keeping Syncthing running in the background\non your system in [the etc directory][3]. There are also several [GUI\nimplementations][11] for Windows, Mac, and Linux.\n\n## Docker\n\nTo run Syncthing in Docker, see [the Docker README][16].\n\n## Getting in Touch\n\nThe first and best point of contact is the [Forum][8].\nIf you've found something that is clearly a\nbug, feel free to report it in the [GitHub issue tracker][10].\n\nIf you believe that you\u2019ve found a Syncthing-related security vulnerability,\nplease report it by emailing security@syncthing.net. Do not report it in the\nForum or issue tracker.\n\n## Building\n\nBuilding Syncthing from source is easy. After extracting the source bundle from\na release or checking out git, you just need to run `go run build.go` and the\nbinaries are created in `./bin`. There's [a guide][5] with more details on the\nbuild process.\n\n## Signed Releases\n\nRelease binaries are GPG signed with the key available from\nhttps://syncthing.net/security/. There is also a built-in automatic\nupgrade mechanism (disabled in some distribution channels) which uses a\ncompiled in ECDSA signature. macOS and Windows binaries are also\ncode-signed.\n\n## Documentation\n\nPlease see the Syncthing [documentation site][6] [[source]][17].\n\nAll code is licensed under the [MPLv2 License][7].\n\n[1]: https://docs.syncthing.net/specs/bep-v1.html\n[2]: https://docs.syncthing.net/intro/getting-started.html\n[3]: https://github.com/syncthing/syncthing/blob/main/etc\n[5]: https://docs.syncthing.net/dev/building.html\n[6]: https://docs.syncthing.net/\n[7]: https://github.com/syncthing/syncthing/blob/main/LICENSE\n[8]: https://forum.syncthing.net/\n[10]: https://github.com/syncthing/syncthing/issues\n[11]: https://docs.syncthing.net/users/contrib.html#gui-wrappers\n[13]: https://github.com/syncthing/syncthing/blob/main/GOALS.md\n[14]: assets/logo-text-128.png\n[15]: https://syncthing.net/\n[16]: https://github.com/syncthing/syncthing/blob/main/README-Docker.md\n[17]: https://github.com/syncthing/docs\n"
}