{
    "primary_language": "Rust",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\nname: CI\n\non: [push, pull_request]\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n  build:\n    strategy:\n      matrix:\n        os: [windows-latest, macos-latest]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v4\n      - name: Stable\n        run: cargo test\n      - name: Stable (no default features)\n        run: cargo test -p alacritty_terminal --no-default-features\n      - name: Oldstable\n        run: |\n          rustup default $(cat alacritty/Cargo.toml | grep \"rust-version\" | sed 's/.*\"\\(.*\\)\".*/\\1/')\n          cargo test\n      - name: Clippy\n        run: |\n          rustup component add clippy\n          cargo clippy --all-targets\n  check-macos-x86_64:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install target\n        run: rustup update && rustup target add x86_64-apple-darwin\n      - name: Build\n        run: cargo build --target=x86_64-apple-darwin\n",
    "readme": "<p align=\"center\">\n    <img width=\"200\" alt=\"Alacritty Logo\" src=\"https://raw.githubusercontent.com/alacritty/alacritty/master/extra/logo/compat/alacritty-term%2Bscanlines.png\">\n</p>\n\n<h1 align=\"center\">Alacritty - A fast, cross-platform, OpenGL terminal emulator</h1>\n\n<p align=\"center\">\n  <img alt=\"Alacritty - A fast, cross-platform, OpenGL terminal emulator\"\n       src=\"extra/promo/alacritty-readme.png\">\n</p>\n\n## About\n\nAlacritty is a modern terminal emulator that comes with sensible defaults, but\nallows for extensive [configuration](#configuration). By integrating with other\napplications, rather than reimplementing their functionality, it manages to\nprovide a flexible set of [features](./docs/features.md) with high performance.\nThe supported platforms currently consist of BSD, Linux, macOS and Windows.\n\nThe software is considered to be at a **beta** level of readiness; there are\na few missing features and bugs to be fixed, but it is already used by many as\na daily driver.\n\nPrecompiled binaries are available from the [GitHub releases page](https://github.com/alacritty/alacritty/releases).\n\nJoin [`#alacritty`] on libera.chat if you have questions or looking for a quick help.\n\n[`#alacritty`]: https://web.libera.chat/gamja/?channels=#alacritty\n\n## Features\n\nYou can find an overview over the features available in Alacritty [here](./docs/features.md).\n\n## Further information\n\n- [Announcing Alacritty, a GPU-Accelerated Terminal Emulator](https://jwilm.io/blog/announcing-alacritty/) January 6, 2017\n- [A talk about Alacritty at the Rust Meetup January 2017](https://www.youtube.com/watch?v=qHOdYO3WUTk) January 19, 2017\n- [Alacritty Lands Scrollback, Publishes Benchmarks](https://jwilm.io/blog/alacritty-lands-scrollback/) September 17, 2018\n\n## Installation\n\nAlacritty can be installed by using various package managers on Linux, BSD,\nmacOS and Windows.\n\nPrebuilt binaries for macOS and Windows can also be downloaded from the\n[GitHub releases page](https://github.com/alacritty/alacritty/releases).\n\nFor everyone else, the detailed instructions to install Alacritty can be found\n[here](INSTALL.md).\n\n### Requirements\n\n- At least OpenGL ES 2.0\n- [Windows] ConPTY support (Windows 10 version 1809 or higher)\n\n## Configuration\n\nYou can find the documentation for Alacritty's configuration in `man 5\nalacritty`, or by looking at [the website] if you do not have the manpages\ninstalled.\n\n[the website]: https://alacritty.org/config-alacritty.html\n\nAlacritty doesn't create the config file for you, but it looks for one in the\nfollowing locations:\n\n1. `$XDG_CONFIG_HOME/alacritty/alacritty.toml`\n2. `$XDG_CONFIG_HOME/alacritty.toml`\n3. `$HOME/.config/alacritty/alacritty.toml`\n4. `$HOME/.alacritty.toml`\n\nOn Windows, the config file will be looked for in:\n\n* `%APPDATA%\\alacritty\\alacritty.toml`\n\n## Contributing\n\nA guideline about contributing to Alacritty can be found in the\n[`CONTRIBUTING.md`](CONTRIBUTING.md) file.\n\n## FAQ\n\n**_Is it really the fastest terminal emulator?_**\n\nBenchmarking terminal emulators is complicated. Alacritty uses\n[vtebench](https://github.com/alacritty/vtebench) to quantify terminal emulator\nthroughput and manages to consistently score better than the competition using\nit. If you have found an example where this is not the case, please report a\nbug.\n\nOther aspects like latency or framerate and frame consistency are more difficult\nto quantify. Some terminal emulators also intentionally slow down to save\nresources, which might be preferred by some users.\n\nIf you have doubts about Alacritty's performance or usability, the best way to\nquantify terminal emulators is always to test them with **your** specific\nusecases.\n\n**_Why isn't feature X implemented?_**\n\nAlacritty has many great features, but not every feature from every other\nterminal. This could be for a number of reasons, but sometimes it's just not a\ngood fit for Alacritty. This means you won't find things like tabs or splits\n(which are best left to a window manager or [terminal multiplexer][tmux]) nor\nniceties like a GUI config editor.\n\n[tmux]: https://github.com/tmux/tmux\n\n## License\n\nAlacritty is released under the [Apache License, Version 2.0].\n\n[Apache License, Version 2.0]: https://github.com/alacritty/alacritty/blob/master/LICENSE-APACHE\n"
}