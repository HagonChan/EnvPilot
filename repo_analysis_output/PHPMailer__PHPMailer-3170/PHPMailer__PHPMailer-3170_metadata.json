{
    "primary_language": "PHP",
    "language_guidelines": "Programming Language guidelines for PHP:\n# General Guidelines:\n**General Guidelines for PHP Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, PHP version requirements, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `composer.json` file. Ensure you have the required PHP version and any extensions installed. Check for system requirements and PHP modules needed.  \n\n3. **PHP Installation**  \n   Ensure you have PHP installed with the required version. Verify installation:  \n   ```sh\n   php --version  \n   ```  \n   For Ubuntu/Debian systems, you can install PHP:  \n   ```sh\n   sudo apt update  \n   sudo apt install php php-cli php-common  \n   ```  \n\n4. **Composer Installation**  \n   Most modern PHP projects use Composer for dependency management. Install Composer if not already available:  \n   ```sh\n   curl -sS https://getcomposer.org/installer | php  \n   sudo mv composer.phar /usr/local/bin/composer  \n   ```  \n   Verify installation:  \n   ```sh\n   composer --version  \n   ```  \n\n5. **Install Dependencies**  \n   Use Composer to install project dependencies:  \n   ```sh\n   composer install  \n   ```  \n   For production environment:  \n   ```sh\n   composer install --no-dev --optimize-autoloader  \n   ```  \n\n6. **Autoloading**  \n   Ensure the autoloader is properly set up. Most projects using Composer will have:  \n   ```php\n   require_once 'vendor/autoload.php';  \n   ```  \n\n7. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.php`, database configuration) and set them up accordingly. Look for example configuration files like `.env.example`.  \n\n8. **Database Setup**  \n   If the project uses a database, set up the database connection and run any migrations:  \n   ```sh\n   php artisan migrate  # For Laravel projects  \n   ```  \n   Or check for SQL files in the project that need to be imported.  \n\n9. **Web Server Setup**  \n   For web applications, you can use PHP's built-in server for development:  \n   ```sh\n   php -S localhost:8000  \n   ```  \n   Or for specific document root:  \n   ```sh\n   php -S localhost:8000 -t public/  \n   ```  \n   For production, configure Apache/Nginx as described in the project documentation.  \n\n10. **Run Tests (if available)**  \n    If the project provides tests, run them to ensure everything is working correctly. Common test commands include:  \n    ```sh\n    ./vendor/bin/phpunit  \n    ```  \n    Or if using Composer scripts:  \n    ```sh\n    composer test  \n    ```  \n\n11. **Code Quality Tools**  \n    Use code quality tools if available in the project:  \n    - PHP CodeSniffer for coding standards:  \n      ```sh\n      ./vendor/bin/phpcs  \n      ```  \n    - PHP Stan for static analysis:  \n      ```sh\n      ./vendor/bin/phpstan analyse  \n      ```  \n    - PHP CS Fixer for code formatting:  \n      ```sh\n      ./vendor/bin/php-cs-fixer fix  \n      ```  \n\n12. **Run the Project**  \n    Follow the instructions in the README to run the project. This could involve:  \n    - Starting a web server  \n    - Running specific PHP scripts  \n    - Using framework-specific commands (e.g., `php artisan serve` for Laravel)  \n\n13. **Common PHP Extensions**  \n    Install commonly required PHP extensions if missing:  \n    ```sh\n    sudo apt install php-mysql php-pgsql php-sqlite3 php-curl php-json php-mbstring php-xml php-zip  \n    ```  \n\n14. **Memory and Execution Limits**  \n    Some projects may require adjusting PHP settings. Check `php.ini` for:  \n    - `memory_limit`  \n    - `max_execution_time`  \n    - `upload_max_filesize`  \n\n15. **Troubleshooting**  \n    If you encounter issues during installation or while running the project:  \n    - Check PHP error logs  \n    - Verify all required PHP extensions are installed  \n    - Ensure proper file permissions  \n    - Refer to the project's issue tracker on GitHub  \n\n16. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  \n\n17. **Framework-Specific Commands**  \n    Be aware of framework-specific tools and commands:  \n    - Laravel: `php artisan`  \n    - Symfony: `php bin/console`  \n    - CakePHP: `bin/cake`  \n    - CodeIgniter: framework-specific setup instructions  \n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: tests.yml\nContent:\nname: \"Tests\"\n\non:\n  push:\n  pull_request:\n  # Allow manually triggering the workflow.\n  workflow_dispatch:\n\npermissions:\n  contents: read # to fetch code (actions/checkout)\n\njobs:\n\n  coding-standard:\n    runs-on: ubuntu-22.04\n    name: Coding standards\n\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v4\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: 'latest'\n          coverage: none\n          tools: cs2pr\n\n      # Install dependencies and handle caching in one go.\n      # @link https://github.com/marketplace/actions/install-php-dependencies-with-composer\n      - name: Install Composer dependencies\n        uses: \"ramsey/composer-install@v3\"\n        with:\n          # Bust the cache at least once a month - output format: YYYY-MM.\n          custom-cache-suffix: $(date -u \"+%Y-%m\")\n\n      - name: Check coding standards\n        id: phpcs\n        run: ./vendor/bin/phpcs -s --report-full --report-checkstyle=./phpcs-report.xml\n\n      - name: Show PHPCS results in PR\n        if: ${{ always() && steps.phpcs.outcome == 'failure' }}\n        run: cs2pr ./phpcs-report.xml\n\n  lint:\n    runs-on: ubuntu-22.04\n    strategy:\n      matrix:\n        php: ['5.5', '7.2', '8.0', '8.4']\n        experimental: [false]\n        include:\n          - php: '8.5'\n            experimental: true\n\n    name: \"Lint: PHP ${{ matrix.php }}\"\n    continue-on-error: ${{ matrix.experimental }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Install PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          coverage: none\n          tools: cs2pr\n\n      # Install dependencies and handle caching in one go.\n      # @link https://github.com/marketplace/actions/install-php-dependencies-with-composer\n      - name: Install Composer dependencies\n        uses: \"ramsey/composer-install@v3\"\n        with:\n          # Bust the cache at least once a month - output format: YYYY-MM.\n          custom-cache-suffix: $(date -u \"+%Y-%m\")\n\n      - name: Lint against parse errors\n        if: ${{ matrix.php != '8.5' }}\n        run: composer lint -- --checkstyle | cs2pr\n\n      - name: Lint against future parse errors (PHP 8.5)\n        if: ${{ matrix.php == '8.5' }}\n        run: composer lint\n\n  test:\n    needs: ['coding-standard', 'lint']\n    runs-on: ubuntu-22.04\n    strategy:\n      matrix:\n        php: ['5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3']\n        extensions: ['optimal', 'minimal']\n        coverage: [false]\n        experimental: [false]\n        include:\n          # Run code coverage on high/low PHP.\n          - php: '5.5'\n            extensions: 'optimal'\n            coverage: true\n            experimental: false\n          - php: '5.5'\n            extensions: 'minimal'\n            coverage: true\n            experimental: false\n          - php: '8.4'\n            extensions: 'optimal'\n            coverage: true\n            experimental: false\n          - php: '8.4'\n            extensions: 'minimal'\n            coverage: true\n            experimental: false\n\n          # Experimental builds. These are allowed to fail.\n          - php: '8.5'\n            extensions: 'optimal'\n            coverage: false\n            experimental: true\n          - php: '8.5'\n            extensions: 'minimal'\n            coverage: false\n            experimental: true\n\n    name: \"Test: PHP ${{ matrix.php }} - ${{ matrix.extensions }}\"\n\n    continue-on-error: ${{ matrix.experimental }}\n\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v4\n\n        # About the \"extensions\":\n        #\n        # In a \"normal\" test run, the \"default\" extension set for a PHP version is used\n        # and it is ensured that certain extensions will be available, no matter what.\n        #\n        # For the \"minimal\" test run, all extensions are disabled and then only\n        # a limited set of minimally required extensions are re-enabled.\n        # The minimal set is based on the required extensions from PHPUnit + PHPMailer combined\n        # + Curl for Composer.\n        # Whether Xdebug will be enabled depends on the code coverage settings.\n        #\n        # Also see:\n        # https://github.com/shivammathur/setup-php/?tab=readme-ov-file#heavy_plus_sign-php-extension-support\n        # https://github.com/shivammathur/setup-php/wiki\n      - name: Determine extensions to use\n        id: set_extensions\n        run: |\n          if [[ \"${{ matrix.extensions }}\" == \"optimal\" ]]; then\n            # Optimal.\n            echo 'EXT=imap, mbstring, openssl, intl, ctype, filter, hash' >> $GITHUB_OUTPUT\n            echo 'COMPOSER_OPTIONS=' >> $GITHUB_OUTPUT\n          else\n            # Minimal.\n            echo 'EXT=none, curl, dom, json, libxml, mbstring, tokenizer, xml, xmlwriter, ctype, filter, hash' >> $GITHUB_OUTPUT\n            echo 'COMPOSER_OPTIONS=--ignore-platform-req=ext-simplexml' >> $GITHUB_OUTPUT\n          fi\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          coverage: ${{ matrix.coverage && 'xdebug' || 'none' }}\n          ini-values: sendmail_path=/usr/sbin/sendmail -t -i, error_reporting=E_ALL, display_errors=On\n          extensions: ${{ steps.set_extensions.outputs.EXT }}\n\n      # Install dependencies and handle caching in one go.\n      # @link https://github.com/marketplace/actions/install-php-dependencies-with-composer\n      - name: Install PHP packages - normal\n        if: ${{ matrix.php != '8.5' }}\n        uses: \"ramsey/composer-install@v3\"\n        with:\n          composer-options: ${{ steps.set_extensions.outputs.COMPOSER_OPTIONS }}\n          # Bust the cache at least once a month - output format: YYYY-MM.\n          custom-cache-suffix: $(date -u \"+%Y-%m\")\n\n      - name: Install PHP packages - ignore-platform-reqs\n        if: ${{ matrix.php == '8.5' }}\n        uses: \"ramsey/composer-install@v3\"\n        with:\n          composer-options: --ignore-platform-reqs ${{ steps.set_extensions.outputs.COMPOSER_OPTIONS }}\n          # Bust the cache at least once a month - output format: YYYY-MM.\n          custom-cache-suffix: $(date -u \"+%Y-%m\")\n\n      # Install postfix and automatically retry if the install failed, which happens reguarly.\n      # @link https://github.com/marketplace/actions/retry-step\n      - name: Install postfix\n        uses: nick-invision/retry@v3\n        with:\n          timeout_minutes: 2\n          max_attempts: 3\n          retry_wait_seconds: 8\n          command: |\n            sudo apt-get install --fix-broken -y libsqlite3-0 postfix\n            sudo systemctl stop postfix.service\n\n      - name: Set up sendmail\n        run: |\n          smtp-sink -d \"%d.%H.%M.%S\" localhost:2500 1000 &\n          mkdir -p build/logs\n          sudo cp test/testbootstrap-dist.php test/testbootstrap.php\n          sudo chmod +x test/fakesendmail.sh\n          sudo mkdir -p /var/qmail/bin\n          sudo cp test/fakesendmail.sh /var/qmail/bin/sendmail\n          sudo cp test/fakesendmail.sh /usr/sbin/sendmail\n\n      - name: Run tests, no code coverage\n        if: ${{ matrix.coverage == false }}\n        run: ./vendor/bin/phpunit --no-coverage\n\n      - name: Run tests with code coverage\n        if: ${{ matrix.coverage == true }}\n        run: vendor/bin/phpunit\n\n      - name: Send coverage report to Codecov\n        if: ${{ success() && matrix.coverage == true }}\n        uses: codecov/codecov-action@v4\n        env:\n          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n        with:\n          files: ./build/logs/clover.xml\n          fail_ci_if_error: true\n          verbose: true\n",
    "readme": "[![SWUbanner](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://supportukrainenow.org/)\n\n![PHPMailer](https://raw.github.com/PHPMailer/PHPMailer/master/examples/images/phpmailer.png)\n\n# PHPMailer \u2013 A full-featured email creation and transfer class for PHP\n\n[![Test status](https://github.com/PHPMailer/PHPMailer/workflows/Tests/badge.svg)](https://github.com/PHPMailer/PHPMailer/actions)\n[![codecov.io](https://codecov.io/gh/PHPMailer/PHPMailer/branch/master/graph/badge.svg?token=iORZpwmYmM)](https://codecov.io/gh/PHPMailer/PHPMailer)\n[![Latest Stable Version](https://poser.pugx.org/phpmailer/phpmailer/v/stable.svg)](https://packagist.org/packages/phpmailer/phpmailer)\n[![Total Downloads](https://poser.pugx.org/phpmailer/phpmailer/downloads)](https://packagist.org/packages/phpmailer/phpmailer)\n[![License](https://poser.pugx.org/phpmailer/phpmailer/license.svg)](https://packagist.org/packages/phpmailer/phpmailer)\n[![API Docs](https://github.com/phpmailer/phpmailer/workflows/Docs/badge.svg)](https://phpmailer.github.io/PHPMailer/)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/PHPMailer/PHPMailer/badge)](https://api.securityscorecards.dev/projects/github.com/PHPMailer/PHPMailer)\n\n## Features\n- Probably the world's most popular code for sending email from PHP!\n- Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more\n- Integrated SMTP support \u2013 send without a local mail server\n- Send emails with multiple To, CC, BCC, and Reply-to addresses\n- Multipart/alternative emails for mail clients that do not read HTML email\n- Add attachments, including inline\n- Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings\n- Full UTF-8 support when using servers that support `SMTPUTF8`.\n- Support for iCal events in multiparts and attachments\n- SMTP authentication with `LOGIN`, `PLAIN`, `CRAM-MD5`, and `XOAUTH2` mechanisms over SMTPS and SMTP+STARTTLS transports\n- Validates email addresses automatically\n- Protects against header injection attacks\n- Error messages in over 50 languages!\n- DKIM and S/MIME signing support\n- Compatible with PHP 5.5 and later, including PHP 8.4\n- Namespaced to prevent name clashes\n- Much more!\n\n## Why you might need it\nMany PHP developers need to send email from their code. The only PHP function that supports this directly is [`mail()`](https://www.php.net/manual/en/function.mail.php). However, it does not provide any assistance for making use of popular features such as authentication, HTML messages, and attachments.\n\nFormatting email correctly is surprisingly difficult. There are myriad overlapping (and conflicting) standards, requiring tight adherence to horribly complicated formatting and encoding rules \u2013 the vast majority of code that you'll find online that uses the `mail()` function directly is just plain wrong, if not unsafe!\n\nThe PHP `mail()` function usually sends via a local mail server, typically fronted by a `sendmail` binary on Linux, BSD, and macOS platforms, however, Windows usually doesn't include a local mail server; PHPMailer's integrated SMTP client allows email sending on all platforms without needing a local mail server. Be aware though, that the `mail()` function should be avoided when possible; it's both faster and [safer](https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html) to use SMTP to localhost.\n\n*Please* don't be tempted to do it yourself \u2013 if you don't use PHPMailer, there are many other excellent libraries that\nyou should look at before rolling your own. Try [Symfony Mailer](https://symfony.com/doc/current/mailer.html), [Laminas/Mail](https://docs.laminas.dev/laminas-mail/), [ZetaComponents](https://github.com/zetacomponents/Mail), etc.\n\n## License\nThis software is distributed under the [LGPL 2.1](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html) license, along with the [GPL Cooperation Commitment](https://gplcc.github.io/gplcc/). Please read [LICENSE](https://github.com/PHPMailer/PHPMailer/blob/master/LICENSE) for information on the software availability and distribution.\n\n## Installation & loading\nPHPMailer is available on [Packagist](https://packagist.org/packages/phpmailer/phpmailer) (using semantic versioning), and installation via [Composer](https://getcomposer.org) is the recommended way to install PHPMailer. Just add this line to your `composer.json` file:\n\n```json\n\"phpmailer/phpmailer\": \"^6.10.0\"\n```\n\nor run\n\n```sh\ncomposer require phpmailer/phpmailer\n```\n\nNote that the `vendor` folder and the `vendor/autoload.php` script are generated by Composer; they are not part of PHPMailer.\n\nIf you want to use XOAUTH2 authentication, you will also need to add a dependency on the `league/oauth2-client` and appropriate service adapters package in your `composer.json`, or take a look at\nby @decomplexity's [SendOauth2 wrapper](https://github.com/decomplexity/SendOauth2), especially if you're using Microsoft services.\n\nAlternatively, if you're not using Composer, you\ncan [download PHPMailer as a zip file](https://github.com/PHPMailer/PHPMailer/archive/master.zip), (note that docs and examples are not included in the zip file), then copy the contents of the PHPMailer folder into one of the `include_path` directories specified in your PHP configuration and load each class file manually:\n\n```php\n<?php\nuse PHPMailer\\PHPMailer\\PHPMailer;\nuse PHPMailer\\PHPMailer\\Exception;\n\nrequire 'path/to/PHPMailer/src/Exception.php';\nrequire 'path/to/PHPMailer/src/PHPMailer.php';\nrequire 'path/to/PHPMailer/src/SMTP.php';\n```\n\nIf you're not using the `SMTP` class explicitly (you're probably not), you don't need a `use` line for it. Even if you're not using exceptions, you do still need to load the `Exception` class as it is used internally.\n\n## Legacy versions\nPHPMailer 5.2 (which is compatible with PHP 5.0 \u2014 7.0) is no longer supported, even for security updates. You will find the latest version of 5.2 in the [5.2-stable branch](https://github.com/PHPMailer/PHPMailer/tree/5.2-stable). If you're using PHP 5.5 or later (which you should be), switch to the 6.x releases.\n\n### Upgrading from 5.2\nThe biggest changes are that source files are now in the `src/` folder, and PHPMailer now declares the namespace `PHPMailer\\PHPMailer`. This has several important effects \u2013 [read the upgrade guide](https://github.com/PHPMailer/PHPMailer/tree/master/UPGRADING.md) for more details.\n\n### Minimal installation\nWhile installing the entire package manually or with Composer is simple, convenient, and reliable, you may want to include only vital files in your project. At the very least you will need [src/PHPMailer.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/PHPMailer.php). If you're using SMTP, you'll need [src/SMTP.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/SMTP.php), and if you're using POP-before SMTP (*very* unlikely!), you'll need [src/POP3.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/POP3.php). You can skip the [language](https://github.com/PHPMailer/PHPMailer/tree/master/language/) folder if you're not showing errors to users and can make do with English-only errors. If you're using XOAUTH2 you will need [src/OAuth.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/OAuth.php) as well as the Composer dependencies for the services you wish to authenticate with. Really, it's much easier to use Composer!\n\n## A Simple Example\n\n```php\n<?php\n//Import PHPMailer classes into the global namespace\n//These must be at the top of your script, not inside a function\nuse PHPMailer\\PHPMailer\\PHPMailer;\nuse PHPMailer\\PHPMailer\\SMTP;\nuse PHPMailer\\PHPMailer\\Exception;\n\n//Load Composer's autoloader (created by composer, not included with PHPMailer)\nrequire 'vendor/autoload.php';\n\n//Create an instance; passing `true` enables exceptions\n$mail = new PHPMailer(true);\n\ntry {\n    //Server settings\n    $mail->SMTPDebug = SMTP::DEBUG_SERVER;                      //Enable verbose debug output\n    $mail->isSMTP();                                            //Send using SMTP\n    $mail->Host       = 'smtp.example.com';                     //Set the SMTP server to send through\n    $mail->SMTPAuth   = true;                                   //Enable SMTP authentication\n    $mail->Username   = 'user@example.com';                     //SMTP username\n    $mail->Password   = 'secret';                               //SMTP password\n    $mail->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;            //Enable implicit TLS encryption\n    $mail->Port       = 465;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`\n\n    //Recipients\n    $mail->setFrom('from@example.com', 'Mailer');\n    $mail->addAddress('joe@example.net', 'Joe User');     //Add a recipient\n    $mail->addAddress('ellen@example.com');               //Name is optional\n    $mail->addReplyTo('info@example.com', 'Information');\n    $mail->addCC('cc@example.com');\n    $mail->addBCC('bcc@example.com');\n\n    //Attachments\n    $mail->addAttachment('/var/tmp/file.tar.gz');         //Add attachments\n    $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    //Optional name\n\n    //Content\n    $mail->isHTML(true);                                  //Set email format to HTML\n    $mail->Subject = 'Here is the subject';\n    $mail->Body    = 'This is the HTML message body <b>in bold!</b>';\n    $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';\n\n    $mail->send();\n    echo 'Message has been sent';\n} catch (Exception $e) {\n    echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";\n}\n```\n\nYou'll find plenty to play with in the [examples](https://github.com/PHPMailer/PHPMailer/tree/master/examples) folder, which covers many common scenarios including sending through Gmail, building contact forms, sending to mailing lists, and more.\n\nIf you are re-using the instance (e.g. when sending to a mailing list), you may need to clear the recipient list to avoid sending duplicate messages. See [the mailing list example](https://github.com/PHPMailer/PHPMailer/blob/master/examples/mailing_list.phps) for further guidance.\n\nThat's it. You should now be ready to use PHPMailer!\n\n## Localization\nPHPMailer defaults to English, but in the [language](https://github.com/PHPMailer/PHPMailer/tree/master/language/) folder, you'll find many translations for PHPMailer error messages that you may encounter. Their filenames contain [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code for the translations, for example `fr` for French. To specify a language, you need to tell PHPMailer which one to use, like this:\n\n```php\n//To load the French version\n$mail->setLanguage('fr', '/optional/path/to/language/directory/');\n```\n\nWe welcome corrections and new languages \u2013 if you're looking for corrections, run the [Language/TranslationCompletenessTest.php](https://github.com/PHPMailer/PHPMailer/blob/master/test/Language/TranslationCompletenessTest.php) script in the tests folder and it will show any missing translations.\n\n## Documentation\nStart reading at the [GitHub wiki](https://github.com/PHPMailer/PHPMailer/wiki). If you're having trouble, head for [the troubleshooting guide](https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting) as it's frequently updated.\n\nExamples of how to use PHPMailer for common scenarios can be found in the [examples](https://github.com/PHPMailer/PHPMailer/tree/master/examples) folder. If you're looking for a good starting point, we recommend you start with [the Gmail example](https://github.com/PHPMailer/PHPMailer/tree/master/examples/gmail.phps).\n\nTo reduce PHPMailer's deployed code footprint, examples are not included if you load PHPMailer via Composer or via [GitHub's zip file download](https://github.com/PHPMailer/PHPMailer/archive/master.zip), so you'll need to either clone the git repository or use the above links to get to the examples directly.\n\nComplete generated API documentation is [available online](https://phpmailer.github.io/PHPMailer/).\n\nYou can generate complete API-level documentation by running `phpdoc` in the top-level folder, and documentation will appear in the `docs` folder, though you'll need to have [PHPDocumentor](https://www.phpdoc.org) installed. You may find [the unit tests](https://github.com/PHPMailer/PHPMailer/blob/master/test/PHPMailer/PHPMailerTest.php) a good reference for how to do various operations such as encryption.\n\nIf the documentation doesn't cover what you need, search the [many questions on Stack Overflow](https://stackoverflow.com/questions/tagged/phpmailer), and before you ask a question about \"SMTP Error: Could not connect to SMTP host.\", [read the troubleshooting guide](https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting).\n\n## Tests\n[PHPMailer tests](https://github.com/PHPMailer/PHPMailer/tree/master/test/) use PHPUnit 9, with [a polyfill](https://github.com/Yoast/PHPUnit-Polyfills) to let 9-style tests run on older PHPUnit and PHP versions.\n\n[![Test status](https://github.com/PHPMailer/PHPMailer/workflows/Tests/badge.svg)](https://github.com/PHPMailer/PHPMailer/actions)\n\nIf this isn't passing, is there something you can do to help?\n\n## Security\nPlease disclose any vulnerabilities found responsibly \u2013 report security issues to the maintainers privately.\n\nSee [SECURITY](https://github.com/PHPMailer/PHPMailer/tree/master/SECURITY.md) and [PHPMailer's security advisories on GitHub](https://github.com/PHPMailer/PHPMailer/security). \n\n## Contributing\nPlease submit bug reports, suggestions, and pull requests to the [GitHub issue tracker](https://github.com/PHPMailer/PHPMailer/issues).\n\nWe're particularly interested in fixing edge cases, expanding test coverage, and updating translations.\n\nIf you found a mistake in the docs, or want to add something, go ahead and amend the wiki \u2013 anyone can edit it.\n\nIf you have git clones from prior to the move to the PHPMailer GitHub organisation, you'll need to update any remote URLs referencing the old GitHub location with a command like this from within your clone:\n\n```sh\ngit remote set-url upstream https://github.com/PHPMailer/PHPMailer.git\n```\n\nPlease *don't* use the SourceForge or Google Code projects any more; they are obsolete and no longer maintained.\n\n## Sponsorship\nDevelopment time and resources for PHPMailer are provided by [Smartmessages.net](https://info.smartmessages.net/), the world's only privacy-first email marketing system.\n\n<a href=\"https://info.smartmessages.net/\"><img src=\"https://www.smartmessages.net/img/smartmessages-logo.svg\" width=\"550\" alt=\"Smartmessages.net privacy-first email marketing logo\"></a>\n\nDonations are very welcome, whether in beer \ud83c\udf7a, T-shirts \ud83d\udc55, or cold, hard cash \ud83d\udcb0. Sponsorship through GitHub is a simple and convenient way to say \"thank you\" to PHPMailer's maintainers and contributors \u2013 just click the \"Sponsor\" button [on the project page](https://github.com/PHPMailer/PHPMailer). If your company uses PHPMailer, consider taking part in Tidelift's enterprise support programme.\n\n## PHPMailer For Enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of PHPMailer and thousands of other packages are working with Tidelift to deliver commercial\nsupport and maintenance for the open-source packages you use to build your applications. Save time, reduce risk, and\nimprove code health, while paying the maintainers of the exact packages you\nuse. [Learn more.](https://tidelift.com/subscription/pkg/packagist-phpmailer-phpmailer?utm_source=packagist-phpmailer-phpmailer&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n## Changelog\nSee [changelog](changelog.md).\n\n## History\n- PHPMailer was originally written in 2001 by Brent R. Matzelle as a [SourceForge project](https://sourceforge.net/projects/phpmailer/).\n- [Marcus Bointon](https://github.com/Synchro) (`coolbru` on SF) and Andy Prevost (`codeworxtech`) took over the project in 2004.\n- Became an Apache incubator project on Google Code in 2010, managed by Jim Jagielski.\n- Marcus created [his fork on GitHub](https://github.com/Synchro/PHPMailer) in 2008.\n- Jim and Marcus decide to join forces and use GitHub as the canonical and official repo for PHPMailer in 2013.\n- PHPMailer moves to [the PHPMailer organisation](https://github.com/PHPMailer) on GitHub in 2013.\n\n### What's changed since moving from SourceForge?\n- Official successor to the SourceForge and Google Code projects.\n- Test suite.\n- Continuous integration with GitHub Actions.\n- Composer support.\n- Public development.\n- Additional languages and language strings.\n- CRAM-MD5 authentication support.\n- Preserves full repo history of authors, commits, and branches from the original SourceForge project.\n",
    "org": "PHPMailer",
    "repo": "PHPMailer",
    "number": 3170,
    "commit": "a2fa1021046c4a7bca84e300d5268026949a06bf"
}