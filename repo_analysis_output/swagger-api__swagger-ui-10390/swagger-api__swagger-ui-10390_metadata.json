{
    "primary_language": "JavaScript",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for JavaScript/Node.js Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `package.json` file. Ensure you have Node.js and npm (or Yarn) installed to manage these dependencies.  \n\n3. **Install Dependencies**  \n   Run the following command to install project dependencies:  \n   ```sh\n   npm install  \n   ```  \n   or, if the project uses Yarn:  \n   ```sh\n   yarn install  \n   ```  \n\n4. **Build the Project**  \n   If the project requires a build step, refer to the `scripts` section in the `package.json` file. Common build commands include:  \n   ```sh\n   npm run build  \n   ```  \n   or  \n   ```sh\n   yarn build  \n   ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, JSON configuration files) and set them up accordingly. The README or project documentation should provide details on this.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Common test commands include:  \n   ```sh\n   npm test  \n   ```  \n   or  \n   ```sh\n   yarn test  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands might include:  \n   ```sh\n   npm start  \n   ```  \n   or  \n   ```sh\n   yarn start  \n   ```  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered. Checking for error messages in the terminal can also provide clues.  \n\n9. **Code Linting and Formatting**  \n   Use linters and formatters to ensure code quality and consistency. Common tools include ESLint for linting and Prettier for formatting. You can typically run these with:  \n   ```sh\n   npm run lint  \n   npm run format  \n   ```  \n   or  \n   ```sh\n   yarn lint  \n   yarn format  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: docker-build-push.yml\nContent:\n# inspired by https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\nname: Build & Push SwaggerUI multi platform Docker image\n\non:\n  workflow_dispatch:\n    inputs:\n      git_ref:\n        description: Git branch, tag or SHA to checkout.\n        type: string\n        required: true\n      docker_tag:\n        description: Docker tag associated with the `git_ref`\n        type: string\n        required: true\n\n  repository_dispatch:\n    type: [docker_build_push]\n\nenv:\n  REGISTRY_IMAGE: swaggerapi/swagger-ui\n\njobs:\n  inputs:\n    name: Normalize inputs\n    runs-on: ubuntu-latest\n    outputs:\n      git_ref: ${{ steps.workflow_dispatch.outputs.git_ref || steps.repository_dispatch.outputs.git_ref }}\n      docker_tag: ${{ steps.workflow_dispatch.outputs.docker_tag || steps.repository_dispatch.outputs.docker_tag }}\n\n    steps:\n      - name: Normalize inputs of `workflow_dispatch` event\n        id: workflow_dispatch\n        if: ${{ github.event_name == 'workflow_dispatch' }}\n        run: |\n          echo \"git_ref=${{ inputs.git_ref }}\" >> \"$GITHUB_OUTPUT\"\n          echo \"docker_tag=${{ inputs.docker_tag }}\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Normalize inputs of `repository_dispatch` event\n        id: repository_dispatch\n        if: ${{ github.event_name == 'repository_dispatch' }}\n        run: |\n          echo \"git_ref=${{ github.event.client_payload.git_ref }}\" >> \"$GITHUB_OUTPUT\"\n          echo \"docker_tag=${{ github.event.client_payload.docker_tag }}\" >> \"$GITHUB_OUTPUT\"\n\n\n\n  build:\n    name: Build & Push SwaggerUI platform specific Docker images\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        platform:\n          # linux/amd64 is already built by Jenkins\n          - linux/arm/v6\n          - linux/arm64\n          - linux/386\n          - linux/ppc64le\n    needs:\n      - inputs\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          ref: ${{ needs.inputs.outputs.git_ref }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Log in to DockerHub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKERHUB_SB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_SB_PASSWORD }}\n\n      - name: Build and push by digest\n        id: build\n        uses: docker/build-push-action@v6\n        with:\n          context: .\n          platforms: ${{ matrix.platform }}\n          provenance: false\n          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true\n\n      - name: Export digest\n        run: |\n          mkdir -p /tmp/digests\n          digest=\"${{ steps.build.outputs.digest }}\"\n          touch \"/tmp/digests/${digest#sha256:}\"\n\n      - name: Sanitize platform variable\n        id: sanitize_platform\n        run: |\n          SANITIZED_PLATFORM=\"${{ matrix.platform }}\" # Assuming direct usage for simplicity\n          SANITIZED_PLATFORM=\"${SANITIZED_PLATFORM//[^a-zA-Z0-9_-]/}\" # Remove special chars\n          echo \"SANITIZED_PLATFORM=${SANITIZED_PLATFORM}\" # Echo for debug\n          echo \"::set-output name=sanitized_platform::${SANITIZED_PLATFORM}\"\n\n      - name: Upload digest\n        uses: actions/upload-artifact@v4\n        with:\n          name: digest-${{ steps.sanitize_platform.outputs.sanitized_platform }}\n          path: /tmp/digests/*\n          if-no-files-found: error\n          retention-days: 1\n\n  merge:\n    name: Merge platform specific Docker image into multi platform image\n    runs-on: ubuntu-latest\n    needs:\n      - inputs\n      - build\n\n    steps:\n      - name: Download digests\n        uses: actions/download-artifact@v4\n        with:\n          pattern: digest-*\n          path: /tmp/digests\n          merge-multiple: true\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKERHUB_SB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_SB_PASSWORD }}\n\n      - name: Create manifest list and push\n        working-directory: /tmp/digests\n        run: |\n          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ needs.inputs.outputs.docker_tag }} \\\n            ${{ env.REGISTRY_IMAGE }}:${{ needs.inputs.outputs.docker_tag }} \\\n            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)\n\n      - name: Inspect image\n        run: |\n          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ needs.inputs.outputs.docker_tag }}\n",
    "readme": "# <img src=\"https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWU-logo-clr.png\" width=\"300\">\n\n[![NPM version](https://badge.fury.io/js/swagger-ui.svg)](http://badge.fury.io/js/swagger-ui)\n[![Build Status](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-ui-master/badge/icon?subject=jenkins%20build)](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-ui-master/)\n[![npm audit](https://jenkins.swagger.io/buildStatus/icon?job=oss-swagger-ui-security-audit&subject=npm%20audit)](https://jenkins.swagger.io/job/oss-swagger-ui-security-audit/lastBuild/console)\n![total GitHub contributors](https://img.shields.io/github/contributors-anon/swagger-api/swagger-ui.svg)\n\n![monthly npm installs](https://img.shields.io/npm/dm/swagger-ui.svg?label=npm%20downloads)\n![docker registry](https://img.shields.io/badge/docker-docker.swagger.io%2Fswaggerapi%2Fswagger--ui-blue)\n![monthly packagist installs](https://img.shields.io/packagist/dm/swagger-api/swagger-ui.svg?label=packagist%20installs)\n![gzip size](https://img.shields.io/bundlephobia/minzip/swagger-ui.svg?label=gzip%20size)\n\n## Introduction\n[Swagger UI](https://swagger.io/tools/swagger-ui/) allows anyone \u2014 be it your development team or your end consumers \u2014 to visualize and interact with the API\u2019s resources without having any of the implementation logic in place. It\u2019s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.\n\n## General\n**\ud83d\udc49\ud83c\udffc Want to score an easy open-source contribution?** Check out our [Good first issue](https://github.com/swagger-api/swagger-ui/issues?q=is%3Aissue+is%3Aopen+label%3A%22Good+first+issue%22) label.\n\n**\ud83d\udd70\ufe0f Looking for the older version of Swagger UI?** Refer to the [*2.x* branch](https://github.com/swagger-api/swagger-ui/tree/2.x).\n\n\nThis repository publishes three different NPM modules:\n\n* [swagger-ui](https://www.npmjs.com/package/swagger-ui) is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc.).\n* [swagger-ui-dist](https://www.npmjs.com/package/swagger-ui-dist) is a dependency-free module that includes everything you need to serve Swagger UI in a server-side project, or a single-page application that can't resolve npm module dependencies.\n* [swagger-ui-react](https://www.npmjs.com/package/swagger-ui-react) is Swagger UI packaged as a React component for use in React applications.\n\nWe strongly suggest that you use `swagger-ui` instead of `swagger-ui-dist` if you're building a single-page application, since `swagger-ui-dist` is significantly larger.\n\nIf you are looking for plain ol' HTML/JS/CSS, [download the latest release](https://github.com/swagger-api/swagger-ui/releases/latest) and copy the contents of the `/dist` folder to your server.\n\n\n## Compatibility\nThe OpenAPI Specification has undergone 5 revisions since initial creation in 2010.  Compatibility between Swagger UI and the OpenAPI Specification is as follows:\n\n| Swagger UI Version | Release Date | OpenAPI Spec compatibility                           | Notes                                                                 |\n|--------------------|--------------|------------------------------------------------------|-----------------------------------------------------------------------|\n| 5.19.0             | 2025-02-17   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.1.0, 3.1.1 | [tag v5.19.0](https://github.com/swagger-api/swagger-ui/tree/v5.19.0) |\n| 5.0.0              | 2023-06-12   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.1.0               | [tag v5.0.0](https://github.com/swagger-api/swagger-ui/tree/v5.0.0)   |\n| 4.0.0              | 2021-11-03   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3                      | [tag v4.0.0](https://github.com/swagger-api/swagger-ui/tree/v4.0.0)   |\n| 3.18.3             | 2018-08-03   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3                      | [tag v3.18.3](https://github.com/swagger-api/swagger-ui/tree/v3.18.3) |\n| 3.0.21             | 2017-07-26   | 2.0                                                  | [tag v3.0.21](https://github.com/swagger-api/swagger-ui/tree/v3.0.21) |\n| 2.2.10             | 2017-01-04   | 1.1, 1.2, 2.0                                        | [tag v2.2.10](https://github.com/swagger-api/swagger-ui/tree/v2.2.10) |\n| 2.1.5              | 2016-07-20   | 1.1, 1.2, 2.0                                        | [tag v2.1.5](https://github.com/swagger-api/swagger-ui/tree/v2.1.5)   |\n| 2.0.24             | 2014-09-12   | 1.1, 1.2                                             | [tag v2.0.24](https://github.com/swagger-api/swagger-ui/tree/v2.0.24) |\n| 1.0.13             | 2013-03-08   | 1.1, 1.2                                             | [tag v1.0.13](https://github.com/swagger-api/swagger-ui/tree/v1.0.13) |\n| 1.0.1              | 2011-10-11   | 1.0, 1.1                                             | [tag v1.0.1](https://github.com/swagger-api/swagger-ui/tree/v1.0.1)   |\n\n## Anonymized analytics\n\nSwaggerUI uses [Scarf](https://scarf.sh/) to collect [anonymized installation analytics](https://github.com/scarf-sh/scarf-js?tab=readme-ov-file#as-a-user-of-a-package-using-scarf-js-what-information-does-scarf-js-send-about-me). These analytics help support the maintainers of this library and ONLY run during installation. To [opt out](https://github.com/scarf-sh/scarf-js?tab=readme-ov-file#as-a-user-of-a-package-using-scarf-js-how-can-i-opt-out-of-analytics), you can set the `scarfSettings.enabled` field to `false` in your project's `package.json`:\n\n```\n// package.json\n{\n  // ...\n  \"scarfSettings\": {\n    \"enabled\": false\n  }\n  // ...\n}\n```\n\nAlternatively, you can set the environment variable `SCARF_ANALYTICS` to `false` as part of the environment that installs your npm packages, e.g., `SCARF_ANALYTICS=false npm install`.\n\n## Documentation\n\n#### Usage\n- [Installation](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/installation.md)\n- [Configuration](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/configuration.md)\n- [CORS](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/cors.md)\n- [OAuth2](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/oauth2.md)\n- [Deep Linking](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/deep-linking.md)\n- [Limitations](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/limitations.md)\n- [Version detection](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/version-detection.md)\n\n#### Customization\n- [Overview](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/customization/overview.md)\n- [Plugin API](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/customization/plugin-api.md)\n- [Custom layout](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/customization/custom-layout.md)\n\n#### Development\n- [Setting up](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/development/setting-up.md)\n- [Scripts](https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/development/scripts.md)\n\n#### Contributing\n- [Contributing](https://github.com/swagger-api/.github/blob/HEAD/CONTRIBUTING.md)\n\n##### Integration Tests\n\nYou will need JDK of version 7 or higher as instructed here\nhttps://nightwatchjs.org/guide/getting-started/installation.html#install-selenium-server\n\nIntegration tests can be run locally with `npm run e2e` - be sure you aren't running a dev server when testing!\n\n### Browser support\nSwagger UI works in the latest versions of Chrome, Safari, Firefox, and Edge.\n\n### Known Issues\n\nTo help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.\n\n- Only part of the parameters previously supported are available.\n- The JSON Form Editor is not implemented.\n- Support for `collectionFormat` is partial.\n- l10n (translations) is not implemented.\n- Relative path support for external files is not implemented.\n\n## Security contact\n\nPlease disclose any security-related issues or vulnerabilities by emailing [security@swagger.io](mailto:security@swagger.io), instead of using the public issue tracker.\n\n## License\n\nSwaggerUI is licensed under [Apache 2.0 license](https://github.com/swagger-api/swagger-ui/blob/master/LICENSE).\nSwaggerUI comes with an explicit [NOTICE](https://github.com/swagger-api/swagger-ui/blob/master/NOTICE) file\ncontaining additional legal notices and information.\n",
    "org": "swagger-api",
    "repo": "swagger-ui",
    "number": 10390,
    "commit": "ac4b549bfdc36827aa6318f2c322243e4259e902"
}