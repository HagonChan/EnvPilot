{
    "primary_language": "Rust",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: main.yml\nContent:\nname: make test\n\non: [push, pull_request]\n\nenv:\n  CTEST_PARALLEL_LEVEL: \"1\"\n  CMAKE_BUILD_PARALLEL_LEVEL: \"4\"\n\npermissions:\n  contents: read\n\njobs:\n  ubuntu:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - uses: dtolnay/rust-toolchain@1.70\n    - name: Install deps\n      run: |\n        sudo apt install gettext libpcre2-dev python3-pip tmux\n        sudo pip3 install pexpect\n        # Generate a locale that uses a comma as decimal separator.\n        sudo locale-gen fr_FR.UTF-8\n    - name: cmake\n      env:\n          # Some warnings upgraded to errors to match Open Build Service platforms\n          CXXFLAGS: \"-Werror=address -Werror=return-type\"\n      run: |\n        mkdir build && cd build\n        cmake ..\n    - name: make\n      run: |\n        make VERBOSE=1\n    - name: make test\n      run: |\n        make VERBOSE=1 test\n\n  ubuntu-32bit-static-pcre2:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - uses: dtolnay/rust-toolchain@1.70\n      with:\n        targets: \"i686-unknown-linux-gnu\" # rust-toolchain wants this comma-separated\n    - name: Install deps\n      run: |\n        sudo apt update\n        sudo apt install gettext python3-pip g++-multilib tmux\n        sudo pip3 install pexpect\n    - name: cmake\n      env:\n          CXXFLAGS: \"-m32 -Werror=address -Werror=return-type\"\n          CFLAGS: \"-m32\"\n      run: |\n        mkdir build && cd build\n        cmake -DFISH_USE_SYSTEM_PCRE2=OFF -DRust_CARGO_TARGET=i686-unknown-linux-gnu ..\n    - name: make\n      run: |\n        make VERBOSE=1\n    - name: make test\n      run: |\n        make VERBOSE=1 test\n\n  ubuntu-asan:\n\n    runs-on: ubuntu-latest\n    env:\n        # Rust has two different memory sanitizers of interest; they can't be used at the same time:\n        # * AddressSanitizer detects out-of-bound access, use-after-free, use-after-return,\n        #   use-after-scope, double-free, invalid-free, and memory leaks.\n        # * MemorySanitizer detects uninitialized reads.\n        #\n        RUSTFLAGS: \"-Zsanitizer=address\"\n        # RUSTFLAGS: \"-Zsanitizer=memory -Zsanitizer-memory-track-origins\"\n\n    steps:\n    - uses: actions/checkout@v4\n    # All -Z options require running nightly\n    - uses: dtolnay/rust-toolchain@nightly\n      with:\n        # ASAN uses `cargo build -Zbuild-std` which requires the rust-src component\n        # this is comma-separated\n        components: rust-src\n    - name: Install deps\n      run: |\n        sudo apt install gettext libpcre2-dev python3-pip tmux\n        sudo pip3 install pexpect\n    - name: cmake\n      env:\n          CC: clang\n          CXX: clang++\n      run: |\n        mkdir build && cd build\n        # Rust's ASAN requires the build system to explicitly pass a --target triple. We read that\n        # value from CMake variable Rust_CARGO_TARGET (shared with corrosion).\n        cmake .. -DASAN=1 -DRust_CARGO_TARGET=x86_64-unknown-linux-gnu -DCMAKE_BUILD_TYPE=Debug\n    - name: make\n      run: |\n        make VERBOSE=1\n    - name: make test\n      env:\n          FISH_CI_SAN: 1\n          ASAN_OPTIONS: check_initialization_order=1:detect_stack_use_after_return=1:detect_leaks=1:fast_unwind_on_malloc=0\n          # use_tls=0 is a workaround for LSAN crashing with \"Tracer caught signal 11\" (SIGSEGV),\n          # which seems to be an issue with TLS support in newer glibc versions under virtualized\n          # environments. Follow https://github.com/google/sanitizers/issues/1342 and\n          # https://github.com/google/sanitizers/issues/1409 to track this issue.\n          # UPDATE: this can cause spurious leak reports for __cxa_thread_atexit_impl() under glibc.\n          LSAN_OPTIONS: verbosity=0:log_threads=0:use_tls=1:print_suppressions=0\n      run: |\n        llvm_version=$(clang --version | awk 'NR==1 { split($NF, version, \".\"); print version[1] }')\n        export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-$llvm_version\n        export LSAN_OPTIONS=\"$LSAN_OPTIONS:suppressions=$PWD/build_tools/lsan_suppressions.txt\"\n        make VERBOSE=1 test\n\n  # Our clang++ tsan builds are not recognizing safe rust patterns (such as the fact that Drop\n  # cannot be called while a thread is using the object in question). Rust has its own way of\n  # running TSAN, but for the duration of the port from C++ to Rust, we'll keep this disabled.\n\n  # ubuntu-threadsan:\n  #\n  #   runs-on: ubuntu-latest\n  #\n  #   steps:\n  #   - uses: actions/checkout@v4\n  #   - uses: dtolnay/rust-toolchain@1.70\n  #   - name: Install deps\n  #     run: |\n  #       sudo apt install gettext libpcre2-dev python3-pip tmux\n  #       sudo pip3 install pexpect\n  #   - name: cmake\n  #     env:\n  #         FISH_CI_SAN: 1\n  #         CC: clang\n  #         CXX: clang++\n  #         CXXFLAGS: \"-fsanitize=thread\"\n  #     run: |\n  #       mkdir build && cd build\n  #       cmake ..\n  #   - name: make\n  #     run: |\n  #       make\n  #   - name: make test\n  #     run: |\n  #       make test\n\n  macos:\n\n    runs-on: macos-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - uses: dtolnay/rust-toolchain@1.70\n    - name: Install deps\n      run: |\n        # --break-system-packages because homebrew has now declared itself \"externally managed\".\n        # this is CI so we don't actually care.\n        sudo pip3 install --break-system-packages pexpect\n        brew install tmux\n    - name: cmake\n      run: |\n        mkdir build && cd build\n        cmake -DWITH_GETTEXT=NO -DCMAKE_BUILD_TYPE=Debug ..\n    - name: make\n      run: |\n        make VERBOSE=1\n    - name: make test\n      run: |\n        make VERBOSE=1 test\n",
    "readme": ".. |Cirrus CI| image:: https://api.cirrus-ci.com/github/fish-shell/fish-shell.svg?branch=master\n      :target: https://cirrus-ci.com/github/fish-shell/fish-shell\n      :alt: Cirrus CI Build Status\n\n`fish <https://fishshell.com/>`__ - the friendly interactive shell |Build Status| |Cirrus CI|\n=============================================================================================\n\nfish is a smart and user-friendly command line shell for macOS, Linux,\nand the rest of the family. fish includes features like syntax\nhighlighting, autosuggest-as-you-type, and fancy tab completions that\njust work, with no configuration required.\n\nFor downloads, screenshots and more, go to https://fishshell.com/.\n\nQuick Start\n-----------\n\nfish generally works like other shells, like bash or zsh. A few\nimportant differences can be found at\nhttps://fishshell.com/docs/current/tutorial.html by searching for the\nmagic phrase \u201cunlike other shells\u201d.\n\nDetailed user documentation is available by running ``help`` within\nfish, and also at https://fishshell.com/docs/current/index.html\n\nGetting fish\n------------\n\nmacOS\n~~~~~\n\nfish can be installed:\n\n-  using `Homebrew <http://brew.sh/>`__: ``brew install fish``\n-  using `MacPorts <https://www.macports.org/>`__:\n   ``sudo port install fish``\n-  using the `installer from fishshell.com <https://fishshell.com/>`__\n-  as a `standalone app from fishshell.com <https://fishshell.com/>`__\n\nNote: The minimum supported macOS version is 10.10 \"Yosemite\".\n\nPackages for Linux\n~~~~~~~~~~~~~~~~~~\n\nPackages for Debian, Fedora, openSUSE, and Red Hat Enterprise\nLinux/CentOS are available from the `openSUSE Build\nService <https://software.opensuse.org/download.html?project=shells%3Afish&package=fish>`__.\n\nPackages for Ubuntu are available from the `fish\nPPA <https://launchpad.net/~fish-shell/+archive/ubuntu/release-3>`__,\nand can be installed using the following commands:\n\n::\n\n   sudo apt-add-repository ppa:fish-shell/release-3\n   sudo apt update\n   sudo apt install fish\n\nInstructions for other distributions may be found at\n`fishshell.com <https://fishshell.com>`__.\n\nWindows\n~~~~~~~\n\n-  On Windows 10/11, fish can be installed under the WSL Windows Subsystem\n   for Linux with the instructions for the appropriate distribution\n   listed above under \u201cPackages for Linux\u201d, or from source with the\n   instructions below.\n-  Fish can also be installed on all versions of Windows using\n   `Cygwin <https://cygwin.com/>`__ (from the **Shells** category).\n\nBuilding from source\n~~~~~~~~~~~~~~~~~~~~\n\nIf packages are not available for your platform, GPG-signed tarballs are\navailable from `fishshell.com <https://fishshell.com/>`__ and\n`fish-shell on\nGitHub <https://github.com/fish-shell/fish-shell/releases>`__. See the\n`Building <#building>`__ section for instructions.\n\nRunning fish\n------------\n\nOnce installed, run ``fish`` from your current shell to try fish out!\n\nDependencies\n~~~~~~~~~~~~\n\nRunning fish requires:\n\n-  A terminfo database, typically from curses or ncurses (preinstalled on most \\*nix systems) - this needs to be the directory tree format, not the \"hashed\" database.\n   If this is unavailable, fish uses an included xterm-256color definition.\n-  some common \\*nix system utilities (currently ``mktemp``), in\n   addition to the basic POSIX utilities (``cat``, ``cut``, ``dirname``,\n   ``file``, ``ls``, ``mkdir``, ``mkfifo``, ``rm``, ``sort``, ``tee``, ``tr``,\n   ``uname`` and ``sed`` at least, but the full coreutils plus ``find`` and\n   ``awk`` is preferred)\n-  The gettext library, if compiled with\n   translation support\n\nThe following optional features also have specific requirements:\n\n-  builtin commands that have the ``--help`` option or print usage\n   messages require ``nroff`` or ``mandoc`` for\n   display\n-  automated completion generation from manual pages requires Python 3.5+\n-  the ``fish_config`` web configuration tool requires Python 3.5+ and a web browser\n-  system clipboard integration (with the default Ctrl-V and Ctrl-X\n   bindings) require either the ``xsel``, ``xclip``,\n   ``wl-copy``/``wl-paste`` or ``pbcopy``/``pbpaste`` utilities\n-  full completions for ``yarn`` and ``npm`` require the\n   ``all-the-package-names`` NPM module\n-  ``colorls`` is used, if installed, to add color when running ``ls`` on platforms\n   that do not have color support (such as OpenBSD)\n\nBuilding\n--------\n\n.. _dependencies-1:\n\nDependencies\n~~~~~~~~~~~~\n\nCompiling fish from a tarball requires:\n\n-  a C++11 compiler (g++ 4.8 or later, or clang 3.3 or later)\n-  CMake (version 3.5 or later)\n-  PCRE2 (headers and libraries) - optional, this will be downloaded if missing\n-  gettext (headers and libraries) - optional, for translation support\n\nSphinx is also optionally required to build the documentation from a\ncloned git repository.\n\nAdditionally, running the test suite requires Python 3.5+ and the pexpect package.\n\nDependencies, git master\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nBuilding from git master currently requires, in addition to the dependencies for a tarball:\n\n-  Rust (version 1.70 or later)\n-  CMake (version 3.19 or later)\n-  libclang, even if you are compiling with GCC\n-  an Internet connection\n\nfish is in the process of being ported to Rust, replacing all C++ code, and as such these dependencies are a bit awkward and in flux.\n\nIn general, we would currently not recommend running from git master if you just want to *use* fish.\nGiven the nature of the port, what is currently there is mostly a slower and buggier version of the last C++-based release.\n\nBuilding from source (all platforms) - Makefile generator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo install into ``/usr/local``, run:\n\n.. code:: bash\n\n   mkdir build; cd build\n   cmake ..\n   make\n   sudo make install\n\nThe install directory can be changed using the\n``-DCMAKE_INSTALL_PREFIX`` parameter for ``cmake``.\n\nBuild options\n~~~~~~~~~~~~~\n\nIn addition to the normal CMake build options (like ``CMAKE_INSTALL_PREFIX``), fish has some other options available to customize it.\n\n- BUILD_DOCS=ON|OFF - whether to build the documentation. This is automatically set to OFF when Sphinx isn't installed.\n- INSTALL_DOCS=ON|OFF - whether to install the docs. This is automatically set to on when BUILD_DOCS is or prebuilt documentation is available (like when building in-tree from a tarball).\n- FISH_USE_SYSTEM_PCRE2=ON|OFF - whether to use an installed pcre2. This is normally autodetected.\n- MAC_CODESIGN_ID=String|OFF - the codesign ID to use on Mac, or \"OFF\" to disable codesigning.\n- WITH_GETTEXT=ON|OFF - whether to build with gettext support for translations.\n\nNote that fish does *not* support static linking and will attempt to error out if it detects it.\n\nHelp, it didn\u2019t build!\n~~~~~~~~~~~~~~~~~~~~~~\n\nOn Debian or Ubuntu you want these packages:\n\n::\n\n   sudo apt install build-essential cmake libpcre2-dev gettext\n\nOn RedHat, CentOS, or Amazon EC2 everything should be preinstalled.\n\nContributing Changes to the Code\n--------------------------------\n\nSee the `Guide for Developers <CONTRIBUTING.rst>`__.\n\nContact Us\n----------\n\nQuestions, comments, rants and raves can be posted to the official fish\nmailing list at https://lists.sourceforge.net/lists/listinfo/fish-users\nor join us on our `matrix\nchannel <https://matrix.to/#/#fish-shell:matrix.org>`__. Or use the `fish tag\non Unix & Linux Stackexchange <https://unix.stackexchange.com/questions/tagged/fish>`__.\nThere is also a fish tag on Stackoverflow, but it is typically a poor fit.\n\nFound a bug? Have an awesome idea? Please `open an\nissue <https://github.com/fish-shell/fish-shell/issues/new>`__.\n\n.. |Build Status| image:: https://github.com/fish-shell/fish-shell/workflows/make%20test/badge.svg\n   :target: https://github.com/fish-shell/fish-shell/actions\n"
}