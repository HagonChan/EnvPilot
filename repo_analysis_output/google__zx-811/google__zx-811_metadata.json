{
    "primary_language": "JavaScript",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for JavaScript/Node.js Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `package.json` file. Ensure you have Node.js and npm (or Yarn) installed to manage these dependencies.  \n\n3. **Install Dependencies**  \n   Run the following command to install project dependencies:  \n   ```sh\n   npm install  \n   ```  \n   or, if the project uses Yarn:  \n   ```sh\n   yarn install  \n   ```  \n\n4. **Build the Project**  \n   If the project requires a build step, refer to the `scripts` section in the `package.json` file. Common build commands include:  \n   ```sh\n   npm run build  \n   ```  \n   or  \n   ```sh\n   yarn build  \n   ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, JSON configuration files) and set them up accordingly. The README or project documentation should provide details on this.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Common test commands include:  \n   ```sh\n   npm test  \n   ```  \n   or  \n   ```sh\n   yarn test  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands might include:  \n   ```sh\n   npm start  \n   ```  \n   or  \n   ```sh\n   yarn start  \n   ```  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered. Checking for error messages in the terminal can also provide clues.  \n\n9. **Code Linting and Formatting**  \n   Use linters and formatters to ensure code quality and consistency. Common tools include ESLint for linting and Prettier for formatting. You can typically run these with:  \n   ```sh\n   npm run lint  \n   npm run format  \n   ```  \n   or  \n   ```sh\n   yarn lint  \n   yarn format  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: test.yml\nContent:\nname: Test\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Use Node.js 20.x\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20.x\n      - run: npm ci\n      - run: npm run build\n      - uses: actions/upload-artifact@v4\n        with:\n          name: build\n          path: |\n            build\n            package.json\n          retention-days: 1\n\n  test:\n    needs: build\n    runs-on: ubuntu-latest\n    env:\n      FORCE_COLOR: 3\n    strategy:\n      matrix:\n        node-version: [16.x, 20.x, 22.x]\n    steps:\n      - uses: actions/checkout@v4\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n      - uses: actions/download-artifact@v4\n        with:\n          name: build\n      - run: npm ci\n      - name: run all tests\n        if: matrix.node-version == '20.x'\n        run: npm run test\n      - name: run unit tests\n        if: matrix.node-version != '20.x'\n        run: npm run test:unit\n        timeout-minutes: 1\n\n  smoke-win32-node16:\n    runs-on: windows-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v4\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v4\n        with:\n          node-version: 16.x\n      - uses: actions/download-artifact@v4\n        with:\n          name: build\n      - run: npm run test:smoke:win32\n        timeout-minutes: 1\n        env:\n          FORCE_COLOR: 3\n\n  smoke-bun:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup Bun\n        uses: antongolub/action-setup-bun@v1\n      - uses: actions/download-artifact@v4\n        with:\n          name: build\n      - run: |\n          bun test ./test/smoke/bun.test.js\n          bun ./test/smoke/ts.test.ts\n        timeout-minutes: 1\n        env:\n          FORCE_COLOR: 3\n\n  smoke-deno:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup Deno\n        uses: denoland/setup-deno@v1\n        with:\n          deno-version: v1.x\n      - uses: actions/download-artifact@v4\n        with:\n          name: build\n      - run: deno test --allow-read --allow-sys --allow-env --allow-run ./test/smoke/deno.test.js\n        timeout-minutes: 1\n        env:\n          FORCE_COLOR: 3\n\n  smoke-node:\n    runs-on: ubuntu-latest\n    needs: build\n    strategy:\n      matrix:\n        node-version: [12, 14, 16, 18, 20, 22]\n    steps:\n      - uses: actions/checkout@v4\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n      - uses: actions/download-artifact@v4\n        with:\n          name: build\n      - name: cjs smoke test\n        run: npm run test:smoke:cjs\n      - name: mjs smoke test\n        if: matrix.node-version != '12'\n        run: npm run test:smoke:mjs\n\n  smoke-ts:\n    runs-on: ubuntu-latest\n    needs: build\n    strategy:\n      matrix:\n        ts: [4, 5]\n    steps:\n      - uses: actions/checkout@v4\n      - name: Use Node.js 20.x\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20.x\n      - name: Install deps\n        run: npm ci\n      - name: Install TypeScript ${{ matrix.ts }}\n        run: |\n          npm i typescript@${{ matrix.ts }}\n          tsc -v\n      - uses: actions/download-artifact@v4\n        with:\n          name: build\n      - name: tsc\n        run: npm run test:smoke:tsc\n      - name: tsx\n        run: npm run test:smoke:tsx\n      - name: ts-node\n        run: npm run test:smoke:ts-node\n",
    "readme": "<h1><img src=\"https://google.github.io/zx/img/logo.svg\" alt=\"Zx logo\" height=\"32\" valign=\"middle\"> zx</h1>\n\n```js\n#!/usr/bin/env zx\n\nawait $`cat package.json | grep name`\n\nlet branch = await $`git branch --show-current`\nawait $`dep deploy --branch=${branch}`\n\nawait Promise.all([\n  $`sleep 1; echo 1`,\n  $`sleep 2; echo 2`,\n  $`sleep 3; echo 3`,\n])\n\nlet name = 'foo bar'\nawait $`mkdir /tmp/${name}`\n```\n\nBash is great, but when it comes to writing more complex scripts,\nmany people prefer a more convenient programming language.\nJavaScript is a perfect choice, but the Node.js standard library\nrequires additional hassle before using. The `zx` package provides\nuseful wrappers around `child_process`, escapes arguments and\ngives sensible defaults.\n\n## Install\n\n```bash\nnpm install zx\n```\n\n## Documentation\n\nRead documentation on [google.github.io/zx](https://google.github.io/zx/).\n\n## License\n\n[Apache-2.0](LICENSE)\n\nDisclaimer: _This is not an officially supported Google product._\n"
}