{
    "primary_language": "Rust",
    "language_guidelines": "Programming Language guidelines for Rust:\n# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\nname: Build\non:\n  push:\n    branches:\n      - master\njobs:\n  todos_linux:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hecrj/setup-rust-action@v2\n    - name: Install cargo-deb\n      run: cargo install cargo-deb\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        export DEBIAN_FRONTED=noninteractive\n        sudo apt-get -qq update\n        sudo apt-get install -y libxkbcommon-dev\n    - name: Build todos binary\n      run: cargo build --verbose --profile release-opt --package todos\n    - name: Archive todos binary\n      uses: actions/upload-artifact@v4\n      with:\n        name: todos-x86_64-unknown-linux-gnu\n        path: target/release-opt/todos\n    - name: Pack todos .deb package\n      run: cargo deb --no-build --profile release-opt --package todos\n    - name: Rename todos .deb package\n      run: mv target/debian/*.deb target/debian/iced_todos-x86_64-debian-linux-gnu.deb\n    - name: Archive todos .deb package\n      uses: actions/upload-artifact@v4\n      with:\n        name: todos-x86_64-debian-linux-gnu\n        path: target/debian/iced_todos-x86_64-debian-linux-gnu.deb\n\n  todos_windows:\n    runs-on: windows-latest\n    steps:\n    - uses: hecrj/setup-rust-action@v2\n    - uses: actions/checkout@master\n    - name: Enable static CRT linkage\n      run: |\n        echo '[target.x86_64-pc-windows-msvc]' >> .cargo/config\n        echo 'rustflags = [\"-Ctarget-feature=+crt-static\"]' >> .cargo/config\n    - name: Run the application without starting the shell\n      run: |\n        sed -i '1 i\\#![windows_subsystem = \\\"windows\\\"]' examples/todos/src/main.rs\n    - name: Build todos binary\n      run: cargo build --verbose --profile release-opt --package todos\n    - name: Archive todos binary\n      uses: actions/upload-artifact@v4\n      with:\n        name: todos-x86_64-pc-windows-msvc\n        path: target/release-opt/todos.exe\n\n  todos_macos:\n    runs-on: macOS-latest\n    steps:\n    - uses: hecrj/setup-rust-action@v2\n    - uses: actions/checkout@master\n    - name: Build todos binary\n      env:\n        MACOSX_DEPLOYMENT_TARGET: 10.14\n      run: cargo build --verbose --profile release-opt --package todos\n    - name: Open binary via double-click\n      run: chmod +x target/release-opt/todos\n    - name: Archive todos binary\n      uses: actions/upload-artifact@v4\n      with:\n        name: todos-x86_64-apple-darwin\n        path: target/release-opt/todos\n\n  todos_raspberry:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hecrj/setup-rust-action@v2\n    - uses: actions/checkout@master\n    - name: Install cross\n      run: cargo install cross\n    - name: Build todos binary for Raspberry Pi 3/4 (64 bits)\n      run: cross build --verbose --profile release-opt --package todos --target aarch64-unknown-linux-gnu\n    - name: Archive todos binary\n      uses: actions/upload-artifact@v4\n      with:\n        name: todos-aarch64-unknown-linux-gnu\n        path: target/aarch64-unknown-linux-gnu/release-opt/todos\n    - name: Build todos binary for Raspberry Pi 2/3/4 (32 bits)\n      run: cross build --verbose --profile release-opt --package todos --target armv7-unknown-linux-gnueabihf\n    - name: Archive todos binary\n      uses: actions/upload-artifact@v4\n      with:\n        name: todos-armv7-unknown-linux-gnueabihf\n        path: target/armv7-unknown-linux-gnueabihf/release-opt/todos\n\nfile: test.yml\nContent:\nname: Test\non: [push, pull_request]\njobs:\n  all:\n    runs-on: ${{ matrix.os }}\n    env:\n      RUSTFLAGS: --deny warnings\n      ICED_TEST_BACKEND: tiny-skia\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n        rust: [stable, beta, \"1.85\"]\n    steps:\n    - uses: hecrj/setup-rust-action@v2\n      with:\n        rust-version: ${{ matrix.rust }}\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        export DEBIAN_FRONTED=noninteractive\n        sudo apt-get -qq update\n        sudo apt-get install -y libxkbcommon-dev libgtk-3-dev\n    - name: Run tests\n      run: |\n        cargo test --verbose --workspace -- --ignored\n        cargo test --verbose --workspace --all-features -- --ignored\n",
    "readme": "<div align=\"center\">\n\n<img src=\"docs/logo.svg\" width=\"140px\" />\n\n# Iced\n\n[![Documentation](https://docs.rs/iced/badge.svg)][documentation]\n[![Crates.io](https://img.shields.io/crates/v/iced.svg)](https://crates.io/crates/iced)\n[![License](https://img.shields.io/crates/l/iced.svg)](https://github.com/iced-rs/iced/blob/master/LICENSE)\n[![Downloads](https://img.shields.io/crates/d/iced.svg)](https://crates.io/crates/iced)\n[![Test Status](https://img.shields.io/github/actions/workflow/status/iced-rs/iced/test.yml?branch=master&event=push&label=test)](https://github.com/iced-rs/iced/actions)\n[![Discourse](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscourse.iced.rs%2Fsite%2Fstatistics.json&query=%24.users_count&suffix=%20users&label=discourse&color=5e7ce2)](https://discourse.iced.rs/)\n[![Discord Server](https://img.shields.io/discord/628993209984614400?label=&labelColor=6A7EC2&logo=discord&logoColor=ffffff&color=7389D8)](https://discord.gg/3xZJ65GAhd)\n\nA cross-platform GUI library for Rust focused on simplicity and type-safety.\nInspired by [Elm].\n\n<a href=\"https://github.com/squidowl/halloy\">\n  <img src=\"https://iced.rs/showcase/halloy.gif\" width=\"460px\">\n</a>\n<a href=\"https://github.com/hecrj/icebreaker\">\n  <img src=\"https://iced.rs/showcase/icebreaker.gif\" width=\"360px\">\n</a>\n\n</div>\n\n## Features\n\n* Simple, easy-to-use, batteries-included API\n* Type-safe, reactive programming model\n* [Cross-platform support] (Windows, macOS, Linux, and the Web)\n* Responsive layout\n* Built-in widgets (including [text inputs], [scrollables], and more!)\n* Custom widget support (create your own!)\n* [Debug overlay with performance metrics]\n* First-class support for async actions (use futures!)\n* Modular ecosystem split into reusable parts:\n  * A [renderer-agnostic native runtime] enabling integration with existing systems\n  * Two built-in renderers leveraging [`wgpu`] and [`tiny-skia`]\n    * [`iced_wgpu`] supporting Vulkan, Metal and DX12\n    * [`iced_tiny_skia`] offering a software alternative as a fallback\n  * A [windowing shell]\n\n__Iced is currently experimental software.__ [Take a look at the roadmap] and\n[check out the issues].\n\n[Cross-platform support]: https://raw.githubusercontent.com/iced-rs/iced/master/docs/images/todos_desktop.jpg\n[text inputs]: https://iced.rs/examples/text_input.mp4\n[scrollables]: https://iced.rs/examples/scrollable.mp4\n[Debug overlay with performance metrics]: https://iced.rs/examples/debug.mp4\n[renderer-agnostic native runtime]: runtime/\n[`wgpu`]: https://github.com/gfx-rs/wgpu\n[`tiny-skia`]: https://github.com/RazrFalcon/tiny-skia\n[`iced_wgpu`]: wgpu/\n[`iced_tiny_skia`]: tiny_skia/\n[windowing shell]: winit/\n[Take a look at the roadmap]: ROADMAP.md\n[check out the issues]: https://github.com/iced-rs/iced/issues\n\n## Overview\n\nInspired by [The Elm Architecture], Iced expects you to split user interfaces\ninto four different concepts:\n\n* __State__ \u2014 the state of your application\n* __Messages__ \u2014 user interactions or meaningful events that you care\n  about\n* __View logic__ \u2014 a way to display your __state__ as widgets that\n  may produce __messages__ on user interaction\n* __Update logic__ \u2014 a way to react to __messages__ and update your\n  __state__\n\nWe can build something to see how this works! Let's say we want a simple counter\nthat can be incremented and decremented using two buttons.\n\nWe start by modelling the __state__ of our application:\n\n```rust\n#[derive(Default)]\nstruct Counter {\n    value: i32,\n}\n```\n\nNext, we need to define the possible user interactions of our counter:\nthe button presses. These interactions are our __messages__:\n\n```rust\n#[derive(Debug, Clone, Copy)]\npub enum Message {\n    Increment,\n    Decrement,\n}\n```\n\nNow, let's show the actual counter by putting it all together in our\n__view logic__:\n\n```rust\nuse iced::widget::{button, column, text, Column};\n\nimpl Counter {\n    pub fn view(&self) -> Column<Message> {\n        // We use a column: a simple vertical layout\n        column![\n            // The increment button. We tell it to produce an\n            // `Increment` message when pressed\n            button(\"+\").on_press(Message::Increment),\n\n            // We show the value of the counter here\n            text(self.value).size(50),\n\n            // The decrement button. We tell it to produce a\n            // `Decrement` message when pressed\n            button(\"-\").on_press(Message::Decrement),\n        ]\n    }\n}\n```\n\nFinally, we need to be able to react to any produced __messages__ and change our\n__state__ accordingly in our __update logic__:\n\n```rust\nimpl Counter {\n    // ...\n\n    pub fn update(&mut self, message: Message) {\n        match message {\n            Message::Increment => {\n                self.value += 1;\n            }\n            Message::Decrement => {\n                self.value -= 1;\n            }\n        }\n    }\n}\n```\n\nAnd that's everything! We just wrote a whole user interface. Let's run it:\n\n```rust\nfn main() -> iced::Result {\n    iced::run(\"A cool counter\", Counter::update, Counter::view)\n}\n```\n\nIced will automatically:\n\n  1. Take the result of our __view logic__ and layout its widgets.\n  1. Process events from our system and produce __messages__ for our\n     __update logic__.\n  1. Draw the resulting user interface.\n\nRead the [book], the [documentation], and the [examples] to learn more!\n\n## Implementation details\n\nIced was originally born as an attempt at bringing the simplicity of [Elm] and\n[The Elm Architecture] into [Coffee], a 2D game library I am working on.\n\nThe core of the library was implemented during May 2019 in [this pull request].\n[The first alpha version] was eventually released as\n[a renderer-agnostic GUI library]. The library did not provide a renderer and\nimplemented the current [tour example] on top of [`ggez`], a game library.\n\nSince then, the focus has shifted towards providing a batteries-included,\nend-user-oriented GUI library, while keeping the ecosystem modular.\n\n[this pull request]: https://github.com/hecrj/coffee/pull/35\n[The first alpha version]: https://github.com/iced-rs/iced/tree/0.1.0-alpha\n[a renderer-agnostic GUI library]: https://www.reddit.com/r/rust/comments/czzjnv/iced_a_rendereragnostic_gui_library_focused_on/\n[tour example]: examples/README.md#tour\n[`ggez`]: https://github.com/ggez/ggez\n\n## Contributing / Feedback\n\nIf you want to contribute, please read our [contributing guidelines] for more details.\n\nFeedback is also welcome! You can create a new topic in [our Discourse forum] or\ncome chat to [our Discord server].\n\n## Sponsors\n\nThe development of Iced is sponsored by the [Cryptowatch] team at [Kraken.com]\n\n[book]: https://book.iced.rs/\n[documentation]: https://docs.rs/iced/\n[examples]: https://github.com/iced-rs/iced/tree/master/examples#examples\n[Coffee]: https://github.com/hecrj/coffee\n[Elm]: https://elm-lang.org/\n[The Elm Architecture]: https://guide.elm-lang.org/architecture/\n[the current issues]: https://github.com/iced-rs/iced/issues\n[contributing guidelines]: https://github.com/iced-rs/iced/blob/master/CONTRIBUTING.md\n[our Discourse forum]: https://discourse.iced.rs/\n[our Discord server]: https://discord.gg/3xZJ65GAhd\n[Cryptowatch]: https://cryptowat.ch/charts\n[Kraken.com]: https://kraken.com/\n",
    "org": "iced-rs",
    "repo": "iced",
    "number": 3019,
    "commit": "d4f8e1902322b239be9580b3afb936c99ec49b79"
}