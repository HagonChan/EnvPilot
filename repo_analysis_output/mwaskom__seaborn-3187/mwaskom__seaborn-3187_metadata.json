{
    "primary_language": "Python",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for Python Projects**\n\n1. **Read the README**  \n   Always start by reading the project's README file on GitHub. It usually contains important instructions for installation, usage, and any project-specific details. Some projects include a `Dockerfile` script, which you can review and reuse as needed.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in a `requirements.txt` file. Ensure you have the required versions of Python and any other libraries/packages.  \n\n3. **Virtual Environment**  \n   It\u2019s a good practice to create a virtual environment for each Python project to avoid conflicts with system-wide packages. Use the command:  \n   ```sh\n   python3.X -m venv .venv  \n   ```  \n\n4. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files) and set them up accordingly.  \n\n5. **Build the Project (rare cases)**  \n   Some projects might require building before usage, especially if they include C extensions or require compiling assets.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Some projects include a `tox.ini` file, which allows you to run tests with `tox`. Install `tox` first using:  \n   ```sh\n   pip install tox  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a script, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered.  \n\n9. **Test Suite Results**  \n   When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is not necessary.  \n\n10. **Shell Compatibility**  \n   In some shells, the `source` command may not work. In such cases, replace `source` with just `.` (a single dot). For example:  \n   ```sh\n   . .venv/bin/activate  \n   ```  \n\n11. **Avoid Using Conda**  \n   Instead of Conda, prefer the following commands to set up your virtual environment:  \n   ```sh\n   python -m venv .venv  \n   . .venv/bin/activate  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yaml\nContent:\nname: CI\n\non:\n  push:\n    branches: [master, v0.*]\n  pull_request:\n    branches: master\n  schedule:\n    - cron:  '0 6 * * 1,4' # Each Monday and Thursday at 06:00 UTC\n  workflow_dispatch:\n\nenv:\n  NB_KERNEL: python\n  MPLBACKEND: Agg\n  SEABORN_DATA: ${{ github.workspace }}/seaborn-data\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Python 3.10\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      - name: Install seaborn\n        run: |\n          pip install --upgrade pip\n          pip install .[stats,docs]\n\n      - name: Install pandoc\n        run: |\n          sudo apt-get install pandoc\n\n      - name: Cache datasets\n        run: |\n          git clone https://github.com/mwaskom/seaborn-data.git\n          ls $SEABORN_DATA\n\n      - name: Build docs\n        env:\n          SPHINXOPTS: -j `nproc`\n        run: |\n          cd doc\n          make -j `nproc` notebooks\n          make html\n\n\n  run-tests:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n        install: [full]\n        deps: [latest]\n\n        include:\n          - python: \"3.7\"\n            install: full\n            deps: pinned\n          - python: \"3.10\"\n            install: light\n            deps: latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Python ${{ matrix.python }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Install seaborn\n        run: |\n          pip install --upgrade pip wheel\n          if [[ ${{matrix.install}} == 'full' ]]; then EXTRAS=',stats'; fi\n          if [[ ${{matrix.deps }} == 'pinned' ]]; then DEPS='-r ci/deps_pinned.txt'; fi\n          pip install .[dev$EXTRAS] $DEPS\n\n      - name: Run tests\n        run: make test\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        if: ${{ success() }}\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n\n      - name: Install tools\n        run: pip install mypy flake8\n\n      - name: Flake8\n        run: make lint\n\n      - name: Type checking\n        run: make typecheck\n",
    "readme": "<img src=\"https://raw.githubusercontent.com/mwaskom/seaborn/master/doc/_static/logo-wide-lightbg.svg\"><br>\n\n--------------------------------------\n\nseaborn: statistical data visualization\n=======================================\n\n[![PyPI Version](https://img.shields.io/pypi/v/seaborn.svg)](https://pypi.org/project/seaborn/)\n[![License](https://img.shields.io/pypi/l/seaborn.svg)](https://github.com/mwaskom/seaborn/blob/master/LICENSE)\n[![DOI](https://joss.theoj.org/papers/10.21105/joss.03021/status.svg)](https://doi.org/10.21105/joss.03021)\n[![Tests](https://github.com/mwaskom/seaborn/workflows/CI/badge.svg)](https://github.com/mwaskom/seaborn/actions)\n[![Code Coverage](https://codecov.io/gh/mwaskom/seaborn/branch/master/graph/badge.svg)](https://codecov.io/gh/mwaskom/seaborn)\n\nSeaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics.\n\n\nDocumentation\n-------------\n\nOnline documentation is available at [seaborn.pydata.org](https://seaborn.pydata.org).\n\nThe docs include a [tutorial](https://seaborn.pydata.org/tutorial.html), [example gallery](https://seaborn.pydata.org/examples/index.html), [API reference](https://seaborn.pydata.org/api.html), [FAQ](https://seaborn.pydata.org/faq), and other useful information.\n\nTo build the documentation locally, please refer to [`doc/README.md`](doc/README.md).\n\nDependencies\n------------\n\nSeaborn supports Python 3.7+ and no longer supports Python 2.\n\nInstallation requires [numpy](https://numpy.org/), [pandas](https://pandas.pydata.org/), and [matplotlib](https://matplotlib.org/). Some advanced statistical functionality requires [scipy](https://www.scipy.org/) and/or [statsmodels](https://www.statsmodels.org/).\n\n\nInstallation\n------------\n\nThe latest stable release (and required dependencies) can be installed from PyPI:\n\n    pip install seaborn\n\nIt is also possible to include optional statistical dependencies (only relevant for v0.12+):\n\n    pip install seaborn[stats]\n\nSeaborn can also be installed with conda:\n\n    conda install seaborn\n\nNote that the main anaconda repository lags PyPI in adding new releases, but conda-forge (`-c conda-forge`) typically updates quickly.\n\nCiting\n------\n\nA paper describing seaborn has been published in the [Journal of Open Source Software](https://joss.theoj.org/papers/10.21105/joss.03021). The paper provides an introduction to the key features of the library, and it can be used as a citation if seaborn proves integral to a scientific publication.\n\nTesting\n-------\n\nTesting seaborn requires installing additional dependencies; they can be installed with the `dev` extra (e.g., `pip install .[dev]`).\n\nTo test the code, run `make test` in the source directory. This will exercise the unit tests (using [pytest](https://docs.pytest.org/)) and generate a coverage report.\n\nCode style is enforced with `flake8` using the settings in the [`setup.cfg`](./setup.cfg) file. Run `make lint` to check. Alternately, you can use `pre-commit` to automatically run lint checks on any files you are committing: just run `pre-commit install` to set it up, and then commit as usual going forward.\n\nDevelopment\n-----------\n\nSeaborn development takes place on Github: https://github.com/mwaskom/seaborn\n\nPlease submit bugs that you encounter to the [issue tracker](https://github.com/mwaskom/seaborn/issues) with a reproducible example demonstrating the problem. Questions about usage are more at home on StackOverflow, where there is a [seaborn tag](https://stackoverflow.com/questions/tagged/seaborn).\n"
}