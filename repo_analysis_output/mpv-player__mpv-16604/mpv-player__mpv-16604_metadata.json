{
    "primary_language": "C",
    "language_guidelines": "Programming Language guidelines for C:\n# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: build.yml\nContent:\nname: build\n\non:\n  push:\n    branches:\n      - master\n      - ci\n      - 'release/**'\n    paths-ignore:\n      - 'DOCS/**'\n      - 'TOOLS/lua/**'\n      - '.editorconfig'\n      - '.github/ISSUE_TEMPLATE/**'\n      - '.github/PULL_REQUEST_TEMPLATE'\n      - '.gitignore'\n      - 'Copyright'\n      - 'README.md'\n      - 'RELEASE_NOTES'\n  pull_request:\n    branches: [master]\n    paths-ignore:\n      - 'DOCS/**'\n      - 'TOOLS/lua/**'\n      - '.editorconfig'\n      - '.github/ISSUE_TEMPLATE/**'\n      - '.github/PULL_REQUEST_TEMPLATE'\n      - '.gitignore'\n      - 'Copyright'\n      - 'README.md'\n      - 'RELEASE_NOTES'\n\njobs:\n  mingw:\n    runs-on: ubuntu-24.04\n    env:\n      CCACHE_BASEDIR: ${{ github.workspace }}\n      CCACHE_DIR: ${{ github.workspace }}/.ccache\n      CCACHE_MAXSIZE: 500M\n      TARGET: ${{ matrix.arch }}-w64-mingw32\n      RUST_TARGET: ${{ matrix.arch }}-pc-windows-gnu\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - arch: i686\n            wine: wine32\n          - arch: x86_64\n            wine: wine64\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Get time\n        id: get_time\n        run: echo \"timestamp=`date +%s%N`\" >> $GITHUB_OUTPUT\n\n      - name: Restore cache\n        uses: actions/cache/restore@v4\n        with:\n          path: ${{ env.CCACHE_DIR }}\n          key: ${{ env.TARGET }}-${{ steps.get_time.outputs.timestamp }}\n          restore-keys: ${{ env.TARGET }}-\n\n      - name: Install dependencies\n        run: |\n          rustup target add ${{ env.RUST_TARGET }}\n          sudo dpkg --add-architecture i386\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends -y ccache g++-mingw-w64 gcc-multilib python3-pip nasm ninja-build pkgconf ${{ matrix.wine }} wine\n          python -m pip install meson\n\n      - name: Install Meson Wraps\n        run: |\n          mkdir subprojects -p\n          meson wrap install mujs\n          meson subprojects download\n\n      - name: Build libraries\n        run: |\n          ./ci/build-mingw64.sh\n\n      - name: Build with meson\n        id: build\n        run: |\n          ./ci/build-mingw64.sh meson pack\n\n      - name: Print meson log\n        if: ${{ failure() && steps.build.outcome == 'failure' }}\n        run: |\n          cat ./mingw_build/meson-logs/meson-log.txt\n\n      - name: Functional test\n        run: |\n          cd artifact && wine ./mpv.com -v --no-config\n        env:\n          WINEDEBUG: '+loaddll'\n\n      - name: Run meson tests\n        id: tests\n        run: |\n          meson test -C mingw_build\n\n      - name: Print meson test log\n        if: ${{ failure() && steps.tests.outcome == 'failure' }}\n        run: |\n          cat ./mingw_build/meson-logs/testlog.txt\n\n      - uses: actions/upload-artifact@v4\n        with:\n          name: mpv-${{ env.TARGET }}\n          path: mpv-git-*.zip\n\n      - name: Save Cache\n        uses: actions/cache/save@v4\n        if: always()\n        with:\n          path: ${{ env.CCACHE_DIR }}\n          key: ${{ env.TARGET }}-${{ steps.get_time.outputs.timestamp }}\n\n  win32:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - target: x86_64-pc-windows-msvc\n            arch: \"x64\"\n            os: \"windows-latest\"\n          - target: aarch64-pc-windows-msvc\n            arch: \"arm64\"\n            os: \"windows-11-arm\"\n    env:\n      VS: \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Enterprise\"\n      CC: \"ccache clang\"\n      CXX: \"ccache clang++\"\n      CC_LD: \"lld-link\"\n      CXX_LD: \"lld-link\"\n      WINDRES: \"llvm-rc\"\n      RUST_LD: \"lld-link\"\n      RUSTC: \"rustc --target ${{ matrix.target }}\"\n      CCACHE_BASEDIR: ${{ github.workspace }}\n      CCACHE_DIR: \"${{ github.workspace }}\\\\.ccache\"\n      CCACHE_MAXSIZE: 500M\n    steps:\n      - name: Disable autocrlf\n        run: |\n          git config --global core.autocrlf false\n          git config --global core.eol lf\n\n      - uses: actions/checkout@v4\n\n      - name: Get time\n        id: get_time\n        run: |\n          \"timestamp=$((Get-Date).Ticks)\" >> $env:GITHUB_OUTPUT\n\n      - name: Restore cache\n        uses: actions/cache/restore@v4\n        with:\n          path: ${{ env.CCACHE_DIR }}\n          key: ${{ matrix.target }}-${{ steps.get_time.outputs.timestamp }}\n          restore-keys: ${{ matrix.target }}-\n\n      - name: Install dependencies\n        run: |\n          python -m pip install meson\n          choco install ccache nasm\n          ./ci/install-cmake.ps1 -arch ${{ matrix.arch }}\n\n      - name: Update Meson WrapDB\n        run: |\n          meson wrap update-db\n          # Explicitly download wraps, as nested projects may have older versions of them.\n          meson wrap install expat\n          meson wrap install harfbuzz\n          meson wrap install libpng\n          meson wrap install zlib\n\n      - name: Build\n        id: build\n        run: |\n          $env:PATH = ($env:PATH -split ';' | Where-Object { $_ -ne 'C:\\Program Files\\LLVM\\bin' -and `\n                                                             $_ -ne 'C:\\Program Files\\CMake\\bin' -and `\n                                                             $_ -ne 'C:\\Strawberry\\c\\bin' }) -join ';'\n          $env:PATH = \"$pwd\\cmake\\bin;\" + $env:PATH + ';C:\\Program Files\\NASM'\n          Import-Module \"$env:VS\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll\"\n          Enter-VsDevShell -VsInstallPath $env:VS -SkipAutomaticLocation -DevCmdArguments \"-arch=${{ matrix.arch }} -host_arch=${{ matrix.arch }}\"\n          ./ci/build-win32.ps1\n\n      - name: Print build log\n        if: ${{ failure() && steps.build.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/meson-log.txt\n\n      - name: Run meson tests\n        id: tests\n        run: |\n          $env:PATH = ($env:PATH -split ';' | Where-Object { $_ -ne 'C:\\Program Files\\LLVM\\bin' -and `\n                                                             $_ -ne 'C:\\Program Files\\CMake\\bin' -and `\n                                                             $_ -ne 'C:\\Strawberry\\c\\bin' }) -join ';'\n          $env:PATH = \"$pwd\\cmake\\bin;\" + $env:PATH + ';C:\\Program Files\\NASM'\n          Import-Module \"$env:VS\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll\"\n          Enter-VsDevShell -VsInstallPath $env:VS -SkipAutomaticLocation -DevCmdArguments \"-arch=${{ matrix.arch }} -host_arch=${{ matrix.arch }}\"\n          meson test -C build -t 2\n\n      - name: Print meson test log\n        if: ${{ failure() && steps.tests.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/testlog.txt\n\n      - uses: actions/upload-artifact@v4\n        with:\n          name: mpv-${{ matrix.target }}\n          path: |\n            build/mpv.???\n            build/vulkan-*.dll\n            !build/mpv.lib\n\n      - name: Save Cache\n        uses: actions/cache/save@v4\n        if: always()\n        with:\n          path: ${{ env.CCACHE_DIR }}\n          key: ${{ matrix.target }}-${{ steps.get_time.outputs.timestamp }}\n\n  macos:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        cc:\n          - \"clang\"\n        cxx:\n          - \"clang++\"\n        os:\n          - \"macos-13\"\n          - \"macos-14\"\n          - \"macos-15\"\n        include:\n          - os: \"macos-13\"\n            arch: \"intel\"\n          - os: \"macos-14\"\n            arch: \"arm\"\n            xcode: \"Xcode_15.2\"\n          - os: \"macos-15\"\n            arch: \"arm\"\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Remove stray upstream python binary symlinks under /usr/local\n        run: |\n          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete -print\n          brew unlink python && brew link --overwrite python\n\n      - name: Unlink pkg-config if the CI runner happens to have it already installed\n        run: |\n          find \"$(brew config | grep HOMEBREW_PREFIX | cut -f 2- -d ' ')/bin\" -lname '*/pkg-config@0*/*' -print -exec brew unlink pkg-config@0.29.2 \\; -quit\n\n      - name: Change Xcode version\n        if: ${{ matrix.xcode != '' }}\n        run: |\n          sudo xcode-select -s /Applications/${{ matrix.xcode }}.app\n\n      - name: Install dependencies\n        run: |\n          brew update\n          brew install -q autoconf automake pkgconf libtool python freetype fribidi little-cms2 \\\n            luajit libass ffmpeg meson rust uchardet mujs libplacebo molten-vk vulkan-loader vulkan-headers\n\n      - name: Build with meson\n        id: build\n        run: |\n          ./ci/build-macos.sh\n        env:\n          CC: \"${{ matrix.cc }}\"\n          CXX: \"${{ matrix.cxx }}\"\n          TRAVIS_OS_NAME: \"${{ matrix.os }}\"\n\n      - name: Create App Bundle\n        run: |\n          meson compile -C build macos-bundle\n          tar -czvf mpv.tar.gz -C build mpv.app\n\n      - name: Print meson log\n        if: ${{ failure() && steps.build.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/meson-log.txt\n\n      - name: Run meson tests\n        id: tests\n        run: |\n          meson test -C build\n\n      - name: Print meson test log\n        if: ${{ failure() && steps.tests.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/testlog.txt\n\n      - uses: actions/upload-artifact@v4\n        with:\n          name: mpv-${{ matrix.os }}-${{ matrix.arch }}\n          path: mpv.tar.gz\n\n  linux:\n    runs-on: ubuntu-latest\n    container:\n      image: \"registry.opensuse.org/home/mia/images/images/mpv-ci:stable-deps\"\n      env:\n        CC: \"${{ matrix.config.cc }}\"\n        CXX: \"${{ matrix.config.cxx }}\"\n        CC_LD: \"${{ matrix.config.ld }}\"\n        CXX_LD: \"${{ matrix.config.ld }}\"\n    strategy:\n      matrix:\n        config:\n          - cc: \"gcc\"\n            cxx: \"g++\"\n            args: \"-Db_ndebug=true\"\n          - cc: \"clang\"\n            cxx: \"clang++\"\n            ld: \"lld\"\n            args: \"-Db_lto=true -Db_lto_mode=thin\"\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Build with meson\n        id: build\n        run: |\n          ./ci/build-tumbleweed.sh ${{ matrix.config.args }}\n\n      - name: Print meson log\n        if: ${{ failure() && steps.build.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/meson-log.txt\n\n      - name: Run meson tests\n        id: tests\n        run: |\n          export LSAN_OPTIONS=\"suppressions=${GITHUB_WORKSPACE}/.lsan_suppressions\"\n          meson test -C build\n\n      - name: Print meson test log\n        if: ${{ failure() && steps.tests.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/testlog.txt\n\n  linux-fuzz:\n    runs-on: ubuntu-latest\n    container:\n      image: \"registry.opensuse.org/home/mia/images/images/mpv-ci:stable-deps\"\n      env:\n        CC: \"clang\"\n        CXX: \"clang++\"\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Build with meson\n        id: build\n        run: |\n          meson setup build \\\n            --werror        \\\n            -Dc_args=\"-Wno-error=deprecated -Wno-error=deprecated-declarations\" \\\n            -Dfuzzers=true -Dlibmpv=true -Dcplayer=false\n          meson compile -C build fuzzers\n\n      - name: Print meson log\n        if: ${{ failure() && steps.build.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/meson-log.txt\n\n  linux-ffmpeg-6-1:\n    runs-on: ubuntu-latest\n    container:\n      # We want to test ffmpeg 6.1.1 which alpine 3.19 has exactly.\n      # Furthermore, this is a very minimal build of mpv without commonly\n      # used features to test build compatibility. Musl is a nice bonus as well\n      image: alpine:3.19\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install dependencies\n        run: |\n          apk update\n          apk add \\\n              binutils \\\n              ffmpeg-dev \\\n              gcc \\\n              git \\\n              g++ \\\n              libass-dev \\\n              lua5.2-dev \\\n              pulseaudio-dev \\\n              libx11-dev \\\n              libxfixes-dev \\\n              libxkbcommon-dev \\\n              libxrandr-dev \\\n              libxpresent-dev \\\n              libxscrnsaver-dev \\\n              meson \\\n              musl-dev \\\n              rust \\\n              samurai\n\n      - name: Build with meson\n        id: build\n        run: |\n          ./ci/build-linux-old.sh\n\n      - name: Print meson log\n        if: ${{ failure() && steps.build.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/meson-log.txt\n\n      - name: Run meson tests\n        id: tests\n        run: |\n          meson test -C build\n\n      - name: Print meson test log\n        if: ${{ failure() && steps.tests.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/testlog.txt\n\n  openbsd:\n    runs-on: ubuntu-latest # until https://github.com/actions/runner/issues/385\n    timeout-minutes: 30 # avoid any weirdness with the VM\n    steps:\n    - uses: actions/checkout@v4\n    - name: Test in OpenBSD VM\n      uses: cross-platform-actions/action@v0.28.0\n      with:\n        operating_system: openbsd\n        version: '7.7'\n        run: |\n            sudo pkg_add -U \\\n                cmake \\\n                ffmpeg \\\n                git \\\n                libarchive \\\n                libbluray \\\n                libcaca \\\n                libcdio-paranoia \\\n                libdvdnav \\\n                libiconv \\\n                libplacebo \\\n                libv4l \\\n                libxkbcommon \\\n                luajit \\\n                meson \\\n                openal \\\n                pkgconf \\\n                pulseaudio \\\n                python3 \\\n                rubberband \\\n                rust \\\n                sdl2 \\\n                shaderc \\\n                spirv-cross \\\n                spirv-headers \\\n                uchardet \\\n                vulkan-loader \\\n                vulkan-headers \\\n                zimg\n            ./ci/build-openbsd.sh\n            if ! meson test -C build; then\n                cat ./build/meson-logs/testlog.txt\n                exit 1\n            fi\n\n  freebsd:\n    runs-on: ubuntu-latest # until https://github.com/actions/runner/issues/385\n    timeout-minutes: 30 # avoid any weirdness with the VM\n    steps:\n    - uses: actions/checkout@v4\n    - name: Test in FreeBSD VM\n      uses: cross-platform-actions/action@v0.28.0\n      with:\n        operating_system: freebsd\n        version: '14.2'\n        run: |\n            sudo pkg update\n            sudo pkg install -y \\\n                alsa-lib \\\n                cmake \\\n                evdev-proto \\\n                ffmpeg \\\n                git \\\n                iconv \\\n                jackit \\\n                libarchive \\\n                libbluray \\\n                libcaca \\\n                libcdio-paranoia \\\n                libdvdnav \\\n                libdisplay-info \\\n                libplacebo \\\n                libXinerama \\\n                libxkbcommon \\\n                libxpresent \\\n                libXv \\\n                luajit \\\n                meson \\\n                mujs \\\n                openal-soft \\\n                pipewire \\\n                pkgconf \\\n                pulseaudio \\\n                python3 \\\n                rubberband \\\n                rust \\\n                sekrit-twc-zimg \\\n                sdl2 \\\n                sndio \\\n                uchardet \\\n                v4l_compat \\\n                vulkan-headers \\\n                wayland-protocols\n            ./ci/build-freebsd.sh\n            if ! meson test -C build; then\n                cat ./build/meson-logs/testlog.txt\n                exit 1\n            fi\n\n  msys2:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - sys: \"clang64\"\n            os: \"windows-latest\"\n          - sys: \"mingw64\"\n            os: \"windows-latest\"\n          - sys: \"ucrt64\"\n            os: \"windows-latest\"\n          - sys: \"clangarm64\"\n            os: \"windows-11-arm\"\n    defaults:\n      run:\n        shell: msys2 {0}\n    steps:\n      - name: Disable autocrlf\n        shell: pwsh\n        run: |\n          git config --global core.autocrlf false\n          git config --global core.eol lf\n      - uses: actions/checkout@v4\n      - uses: msys2/setup-msys2@v2\n        with:\n          msystem: ${{ matrix.sys }}\n          update: true\n          install: git\n          pacboy: >-\n            angleproject:p\n            ca-certificates:p\n            cc:p\n            cppwinrt:p\n            ffmpeg:p\n            lcms2:p\n            libarchive:p\n            libass:p\n            libcdio-paranoia:p\n            libdvdnav:p\n            libjpeg-turbo:p\n            libplacebo:p\n            lua51:p\n            meson:p\n            ninja:p\n            pkgconf:p\n            python:p\n            rst2pdf:p\n            rubberband:p\n            rust:p\n            shaderc:p\n            spirv-cross:p\n            uchardet:p\n            vapoursynth:p\n            vulkan-devel:p\n\n      - name: Build with meson\n        id: build\n        run: |\n          ./ci/build-msys2.sh meson\n        env:\n          SYS: ${{ matrix.sys }}\n\n      - name: Print meson log\n        if: ${{ failure() && steps.build.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/meson-log.txt\n\n      - name: Run meson tests\n        id: tests\n        run: |\n          meson test -C build\n\n      - name: Print meson test log\n        if: ${{ failure() && steps.tests.outcome == 'failure' }}\n        run: |\n          cat ./build/meson-logs/testlog.txt\n",
    "readme": "![mpv logo](https://raw.githubusercontent.com/mpv-player/mpv.io/master/source/images/mpv-logo-128.png)\n\n# mpv\n\n\n* [External links](#external-links)\n* [Overview](#overview)\n* [System requirements](#system-requirements)\n* [Downloads](#downloads)\n* [Changelog](#changelog)\n* [Compilation](#compilation)\n* [Release cycle](#release-cycle)\n* [Bug reports](#bug-reports)\n* [Contributing](#contributing)\n* [License](#license)\n* [Contact](#contact)\n\n\n## External links\n\n\n* [Wiki](https://github.com/mpv-player/mpv/wiki)\n* [User Scripts](https://github.com/mpv-player/mpv/wiki/User-Scripts)\n* [FAQ][FAQ]\n* [Manual](https://mpv.io/manual/master/)\n\n\n## Overview\n\n\n**mpv** is a free (as in freedom) media player for the command line. It supports\na wide variety of media file formats, audio and video codecs, and subtitle types.\n\nThere is a [FAQ][FAQ].\n\nReleases can be found on the [release list][releases].\n\n## System requirements\n\n- A not too ancient Linux (usually, only the latest releases of distributions\n  are actively supported), Windows 10 1607 or later, or macOS 10.15 or later.\n- A somewhat capable CPU. Hardware decoding might help if the CPU is too slow to\n  decode video in realtime, but must be explicitly enabled with the `--hwdec`\n  option.\n- A not too crappy GPU. mpv's focus is not on power-efficient playback on\n  embedded or integrated GPUs (for example, hardware decoding is not even\n  enabled by default). Low power GPUs may cause issues like tearing, stutter,\n  etc. On such GPUs, it's recommended to use `--profile=fast` for smooth playback.\n  The main video output uses shaders for video rendering and scaling,\n  rather than GPU fixed function hardware. On Windows, you might want to make\n  sure the graphics drivers are current. In some cases, ancient fallback video\n  output methods can help (such as `--vo=xv` on Linux), but this use is not\n  recommended or supported.\n\nmpv does not go out of its way to break on older hardware or old, unsupported\noperating systems, but development is not done with them in mind. Keeping\ncompatibility with such setups is not guaranteed. If things work, consider it\na happy accident.\n\n## Downloads\n\n\nFor semi-official builds and third-party packages please see\n[mpv.io/installation](https://mpv.io/installation/).\n\n## Changelog\n\n\nThere is no complete changelog; however, changes to the player core interface\nare listed in the [interface changelog][interface-changes].\n\nChanges to the C API are documented in the [client API changelog][api-changes].\n\nThe [release list][releases] has a summary of most of the important changes\non every release.\n\nChanges to the default key bindings are indicated in\n[restore-old-bindings.conf][restore-old-bindings].\n\nChanges to the default OSC bindings are indicated in\n[restore-osc-bindings.conf][restore-osc-bindings].\n\n## Compilation\n\n\nCompiling with full features requires development files for several\nexternal libraries. Mpv requires [meson](https://mesonbuild.com/index.html)\nto build. Meson can be obtained from your distro or PyPI.\n\nAfter creating your build directory (e.g. `meson setup build`), you can view a list\nof all the build options via `meson configure build`. You could also just simply\nlook at the `meson_options.txt` file. Logs are stored in `meson-logs` within\nyour build directory.\n\nExample:\n\n    meson setup build\n    meson compile -C build\n    meson install -C build\n\nFor libplacebo, meson can use a git check out as a subproject for a convenient\nway to compile mpv if a sufficient libplacebo version is not easily available\nin the build environment. It will be statically linked with mpv. Example:\n\n    mkdir -p subprojects\n    git clone https://code.videolan.org/videolan/libplacebo.git --depth=1 --recursive subprojects/libplacebo\n\nEssential dependencies (incomplete list):\n\n- gcc or clang\n- X development headers (xlib, xrandr, xext, xscrnsaver, xpresent, libvdpau,\n  libGL, GLX, EGL, xv, ...)\n- Audio output development headers (libasound/ALSA, pulseaudio)\n- FFmpeg libraries (libavutil libavcodec libavformat libswscale libavfilter\n  and either libswresample or libavresample)\n- libplacebo\n- zlib\n- iconv (normally provided by the system libc)\n- libass (OSD, OSC, text subtitles)\n- Lua (optional, required for the OSC pseudo-GUI and youtube-dl integration)\n- libjpeg (optional, used for screenshots only)\n- uchardet (optional, for subtitle charset detection)\n- nvdec and vaapi libraries for hardware decoding on Linux (optional)\n\nLibass dependencies (when building libass):\n\n- gcc or clang, nasm on x86 and x86_64\n- fribidi, freetype, fontconfig development headers (for libass)\n- harfbuzz (required for correct rendering of combining characters, particularly\n  for correct rendering of non-English text on macOS, and Arabic/Indic scripts on\n  any platform)\n\nFFmpeg dependencies (when building FFmpeg):\n\n- gcc or clang, nasm on x86 and x86_64\n- OpenSSL or GnuTLS (have to be explicitly enabled when compiling FFmpeg)\n- libx264/libmp3lame/libfdk-aac if you want to use encoding (have to be\n  explicitly enabled when compiling FFmpeg)\n- For native DASH playback, FFmpeg needs to be built with --enable-libxml2\n  (although there are security implications, and DASH support has lots of bugs).\n- AV1 decoding support requires dav1d.\n- For good nvidia support on Linux, make sure nv-codec-headers is installed\n  and can be found by configure.\n\nMost of the above libraries are available in suitable versions on normal\nLinux distributions. For ease of compiling the latest git master of everything,\nyou may wish to use the separately available build wrapper ([mpv-build][mpv-build])\nwhich first compiles FFmpeg libraries and libass, and then compiles the player\nstatically linked against those.\n\nIf you want to build a Windows binary, see [Windows compilation][windows_compilation].\n\n\n## Release cycle\n\nOnce or twice a year, a release is cut off from the current development state\nand is assigned a 0.X.0 version number. No further maintenance is done, except\nin the event of security issues.\n\nThe goal of releases is to make Linux distributions happy. Linux distributions\nare also expected to apply their own patches in case of bugs.\n\nReleases other than the latest release are unsupported and unmaintained.\n\nSee the [release policy document][release-policy] for more information.\n\n## Bug reports\n\n\nPlease use the [issue tracker][issue-tracker] provided by GitHub to send us bug\nreports or feature requests. Follow the template's instructions or the issue\nwill likely be ignored or closed as invalid.\n\nQuestions can be asked in the [discussions][discussions] or on IRC (see\n[Contact](#Contact) below).\n\n## Contributing\n\n\nPlease read [contribute.md][contribute.md].\n\nFor small changes you can just send us pull requests through GitHub. For bigger\nchanges come and talk to us on IRC before you start working on them. It will\nmake code review easier for both parties later on.\n\nYou can check [the wiki](https://github.com/mpv-player/mpv/wiki/Stuff-to-do)\nor the [issue tracker](https://github.com/mpv-player/mpv/issues?q=is%3Aopen+is%3Aissue+label%3Ameta%3Afeature-request)\nfor ideas on what you could contribute with.\n\n## License\n\nGPLv2 \"or later\" by default, LGPLv2.1 \"or later\" with `-Dgpl=false`.\nSee [details.](https://github.com/mpv-player/mpv/blob/master/Copyright)\n\n## History\n\nThis software is based on the MPlayer project. Before mpv existed as a project,\nthe code base was briefly developed under the mplayer2 project. For details,\nsee the [FAQ][FAQ].\n\n## Contact\n\n\nMost activity happens on the IRC channel and the GitHub issue tracker.\n\n- **GitHub issue tracker**: [issue tracker][issue-tracker] (report bugs here)\n- **Discussions**: [discussions][discussions]\n- **User IRC Channel**: `#mpv` on `irc.libera.chat`\n- **Developer IRC Channel**: `#mpv-devel` on `irc.libera.chat`\n\n[FAQ]: https://github.com/mpv-player/mpv/wiki/FAQ\n[releases]: https://github.com/mpv-player/mpv/releases\n[mpv-build]: https://github.com/mpv-player/mpv-build\n[issue-tracker]:  https://github.com/mpv-player/mpv/issues\n[discussions]: https://github.com/mpv-player/mpv/discussions\n[release-policy]: https://github.com/mpv-player/mpv/blob/master/DOCS/release-policy.md\n[windows_compilation]: https://github.com/mpv-player/mpv/blob/master/DOCS/compile-windows.md\n[interface-changes]: https://github.com/mpv-player/mpv/blob/master/DOCS/interface-changes.rst\n[api-changes]: https://github.com/mpv-player/mpv/blob/master/DOCS/client-api-changes.rst\n[restore-old-bindings]: https://github.com/mpv-player/mpv/blob/master/etc/restore-old-bindings.conf\n[restore-osc-bindings]: https://github.com/mpv-player/mpv/blob/master/etc/restore-osc-bindings.conf\n[contribute.md]: https://github.com/mpv-player/mpv/blob/master/DOCS/contribute.md\n",
    "org": "mpv-player",
    "repo": "mpv",
    "number": 16604,
    "commit": "03cafa10a72f9b8aa458621c3afb9695089014d6"
}