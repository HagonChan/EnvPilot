{
    "primary_language": "PHP",
    "language_guidelines": "Programming Language guidelines for PHP:\n# General Guidelines:\n**General Guidelines for PHP Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, PHP version requirements, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `composer.json` file. Ensure you have the required PHP version and any extensions installed. Check for system requirements and PHP modules needed.  \n\n3. **PHP Installation**  \n   Ensure you have PHP installed with the required version. Verify installation:  \n   ```sh\n   php --version  \n   ```  \n   For Ubuntu/Debian systems, you can install PHP:  \n   ```sh\n   sudo apt update  \n   sudo apt install php php-cli php-common  \n   ```  \n\n4. **Composer Installation**  \n   Most modern PHP projects use Composer for dependency management. Install Composer if not already available:  \n   ```sh\n   curl -sS https://getcomposer.org/installer | php  \n   sudo mv composer.phar /usr/local/bin/composer  \n   ```  \n   Verify installation:  \n   ```sh\n   composer --version  \n   ```  \n\n5. **Install Dependencies**  \n   Use Composer to install project dependencies:  \n   ```sh\n   composer install  \n   ```  \n   For production environment:  \n   ```sh\n   composer install --no-dev --optimize-autoloader  \n   ```  \n\n6. **Autoloading**  \n   Ensure the autoloader is properly set up. Most projects using Composer will have:  \n   ```php\n   require_once 'vendor/autoload.php';  \n   ```  \n\n7. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.php`, database configuration) and set them up accordingly. Look for example configuration files like `.env.example`.  \n\n8. **Database Setup**  \n   If the project uses a database, set up the database connection and run any migrations:  \n   ```sh\n   php artisan migrate  # For Laravel projects  \n   ```  \n   Or check for SQL files in the project that need to be imported.  \n\n9. **Web Server Setup**  \n   For web applications, you can use PHP's built-in server for development:  \n   ```sh\n   php -S localhost:8000  \n   ```  \n   Or for specific document root:  \n   ```sh\n   php -S localhost:8000 -t public/  \n   ```  \n   For production, configure Apache/Nginx as described in the project documentation.  \n\n10. **Run Tests (if available)**  \n    If the project provides tests, run them to ensure everything is working correctly. Common test commands include:  \n    ```sh\n    ./vendor/bin/phpunit  \n    ```  \n    Or if using Composer scripts:  \n    ```sh\n    composer test  \n    ```  \n\n11. **Code Quality Tools**  \n    Use code quality tools if available in the project:  \n    - PHP CodeSniffer for coding standards:  \n      ```sh\n      ./vendor/bin/phpcs  \n      ```  \n    - PHP Stan for static analysis:  \n      ```sh\n      ./vendor/bin/phpstan analyse  \n      ```  \n    - PHP CS Fixer for code formatting:  \n      ```sh\n      ./vendor/bin/php-cs-fixer fix  \n      ```  \n\n12. **Run the Project**  \n    Follow the instructions in the README to run the project. This could involve:  \n    - Starting a web server  \n    - Running specific PHP scripts  \n    - Using framework-specific commands (e.g., `php artisan serve` for Laravel)  \n\n13. **Common PHP Extensions**  \n    Install commonly required PHP extensions if missing:  \n    ```sh\n    sudo apt install php-mysql php-pgsql php-sqlite3 php-curl php-json php-mbstring php-xml php-zip  \n    ```  \n\n14. **Memory and Execution Limits**  \n    Some projects may require adjusting PHP settings. Check `php.ini` for:  \n    - `memory_limit`  \n    - `max_execution_time`  \n    - `upload_max_filesize`  \n\n15. **Troubleshooting**  \n    If you encounter issues during installation or while running the project:  \n    - Check PHP error logs  \n    - Verify all required PHP extensions are installed  \n    - Ensure proper file permissions  \n    - Refer to the project's issue tracker on GitHub  \n\n16. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.  \n\n17. **Framework-Specific Commands**  \n    Be aware of framework-specific tools and commands:  \n    - Laravel: `php artisan`  \n    - Symfony: `php bin/console`  \n    - CakePHP: `bin/cake`  \n    - CodeIgniter: framework-specific setup instructions  \n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: main.yml\nContent:\n# https://help.github.com/en/categories/automating-your-workflow-with-github-actions\nname: Main\non:\n  push:\n  pull_request:\n\njobs:\n  tests_coverage:\n    runs-on: \"ubuntu-latest\"\n    name: \"PHP 7.4 Unit Tests (with coverage)\"\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v4\"\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"xdebug\"\n          php-version: \"7.4\"\n          tools: composer:v2\n      - name: \"Install dependencies\"\n        run: |\n          composer require php-coveralls/php-coveralls:^2.2 --dev --no-update\n          COMPOSER_ROOT_VERSION=dev-master composer update --no-progress --prefer-dist\n      - name: \"Tests\"\n        run: \"php vendor/bin/phpunit --coverage-clover build/logs/clover.xml\"\n      - name: Coveralls\n        env:\n          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: \"php vendor/bin/php-coveralls\"\n        if: ${{ success() }}\n  tests:\n    runs-on: \"ubuntu-latest\"\n    name: \"PHP ${{ matrix.php-version }} Unit Tests\"\n    strategy:\n      matrix:\n        php-version:\n          - \"8.0\"\n          - \"8.1\"\n          - \"8.2\"\n          - \"8.3\"\n          - \"8.4\"\n      fail-fast: false\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v4\"\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"${{ matrix.php-version }}\"\n          ini-file: \"development\"\n          tools: composer:v2\n      - name: \"Install dependencies\"\n        run: \"COMPOSER_ROOT_VERSION=dev-master composer update --no-progress --prefer-dist ${{ matrix.flags }}\"\n      - name: \"PHPUnit\"\n        run: \"php vendor/bin/phpunit\"\n  test_old_73_80:\n    runs-on: \"ubuntu-latest\"\n    name: \"PHP 7.4 Code on PHP 8.4 Integration Tests\"\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v4\"\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"8.4\"\n          ini-file: \"development\"\n          tools: composer:v2\n      - name: \"Install PHP 8 dependencies\"\n        run: \"COMPOSER_ROOT_VERSION=dev-master composer update --no-progress --prefer-dist\"\n      - name: \"Tests\"\n        run: \"test_old/run-php-src.sh 7.4.33\"\n  test_old_80_70:\n    runs-on: \"ubuntu-latest\"\n    name: \"PHP 8.4 Code on PHP 7.4 Integration Tests\"\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v4\"\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"7.4\"\n          ini-file: \"development\"\n          tools: composer:v2\n      - name: \"Install PHP 8 dependencies\"\n        run: \"COMPOSER_ROOT_VERSION=dev-master composer update --no-progress --prefer-dist\"\n      - name: \"Tests\"\n        run: \"test_old/run-php-src.sh 8.4.0beta5\"\n  phpstan:\n    runs-on: \"ubuntu-latest\"\n    name: \"PHPStan\"\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v4\"\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"8.3\"\n          tools: composer:v2\n      - name: \"Install dependencies\"\n        run: |\n          cd tools && composer install\n      - name: \"PHPStan\"\n        run: \"php tools/vendor/bin/phpstan\"\n  php-cs-fixer:\n    runs-on: \"ubuntu-latest\"\n    name: \"PHP-CS-Fixer\"\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v4\"\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"8.3\"\n          tools: composer:v2\n      - name: \"Install dependencies\"\n        run: |\n          cd tools && composer install\n      - name: \"php-cs-fixer\"\n        run: \"php tools/vendor/bin/php-cs-fixer fix --dry-run\"\n",
    "readme": "PHP Parser\n==========\n\n[![Coverage Status](https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master)](https://coveralls.io/github/nikic/PHP-Parser?branch=master)\n\nThis is a PHP parser written in PHP. Its purpose is to simplify static code analysis and\nmanipulation.\n\n[**Documentation for version 5.x**][doc_master] (current; for running on PHP >= 7.4; for parsing PHP 7.0 to PHP 8.4, with limited support for parsing PHP 5.x).\n\n[Documentation for version 4.x][doc_4_x] (supported; for running on PHP >= 7.0; for parsing PHP 5.2 to PHP 8.3).\n\nFeatures\n--------\n\nThe main features provided by this library are:\n\n * Parsing PHP 7, and PHP 8 code into an abstract syntax tree (AST).\n   * Invalid code can be parsed into a partial AST.\n   * The AST contains accurate location information.\n * Dumping the AST in human-readable form.\n * Converting an AST back to PHP code.\n   * Formatting can be preserved for partially changed ASTs.\n * Infrastructure to traverse and modify ASTs.\n * Resolution of namespaced names.\n * Evaluation of constant expressions.\n * Builders to simplify AST construction for code generation.\n * Converting an AST into JSON and back.\n\nQuick Start\n-----------\n\nInstall the library using [composer](https://getcomposer.org):\n\n    php composer.phar require nikic/php-parser\n\nParse some PHP code into an AST and dump the result in human-readable form:\n\n```php\n<?php\nuse PhpParser\\Error;\nuse PhpParser\\NodeDumper;\nuse PhpParser\\ParserFactory;\n\n$code = <<<'CODE'\n<?php\n\nfunction test($foo)\n{\n    var_dump($foo);\n}\nCODE;\n\n$parser = (new ParserFactory())->createForNewestSupportedVersion();\ntry {\n    $ast = $parser->parse($code);\n} catch (Error $error) {\n    echo \"Parse error: {$error->getMessage()}\\n\";\n    return;\n}\n\n$dumper = new NodeDumper;\necho $dumper->dump($ast) . \"\\n\";\n```\n\nThis dumps an AST looking something like this:\n\n```\narray(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                flags: 0\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n            0: Stmt_Expression(\n                expr: Expr_FuncCall(\n                    name: Name(\n                        name: var_dump\n                    )\n                    args: array(\n                        0: Arg(\n                            name: null\n                            value: Expr_Variable(\n                                name: foo\n                            )\n                            byRef: false\n                            unpack: false\n                        )\n                    )\n                )\n            )\n        )\n    )\n)\n```\n\nLet's traverse the AST and perform some kind of modification. For example, drop all function bodies:\n\n```php\nuse PhpParser\\Node;\nuse PhpParser\\Node\\Stmt\\Function_;\nuse PhpParser\\NodeTraverser;\nuse PhpParser\\NodeVisitorAbstract;\n\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new class extends NodeVisitorAbstract {\n    public function enterNode(Node $node) {\n        if ($node instanceof Function_) {\n            // Clean out the function body\n            $node->stmts = [];\n        }\n    }\n});\n\n$ast = $traverser->traverse($ast);\necho $dumper->dump($ast) . \"\\n\";\n```\n\nThis gives us an AST where the `Function_::$stmts` are empty:\n\n```\narray(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n        )\n    )\n)\n```\n\nFinally, we can convert the new AST back to PHP code:\n\n```php\nuse PhpParser\\PrettyPrinter;\n\n$prettyPrinter = new PrettyPrinter\\Standard;\necho $prettyPrinter->prettyPrintFile($ast);\n```\n\nThis gives us our original code, minus the `var_dump()` call inside the function:\n\n```php\n<?php\n\nfunction test($foo)\n{\n}\n```\n\nFor a more comprehensive introduction, see the documentation.\n\nDocumentation\n-------------\n\n 1. [Introduction](doc/0_Introduction.markdown)\n 2. [Usage of basic components](doc/2_Usage_of_basic_components.markdown)\n\nComponent documentation:\n\n * [Walking the AST](doc/component/Walking_the_AST.markdown)\n   * Node visitors\n   * Modifying the AST from a visitor\n   * Short-circuiting traversals\n   * Interleaved visitors\n   * Simple node finding API\n   * Parent and sibling references\n * [Name resolution](doc/component/Name_resolution.markdown)\n   * Name resolver options\n   * Name resolution context\n * [Pretty printing](doc/component/Pretty_printing.markdown)\n   * Converting AST back to PHP code\n   * Customizing formatting\n   * Formatting-preserving code transformations\n * [AST builders](doc/component/AST_builders.markdown)\n   * Fluent builders for AST nodes\n * [Lexer](doc/component/Lexer.markdown)\n   * Emulation\n   * Tokens, positions and attributes\n * [Error handling](doc/component/Error_handling.markdown)\n   * Column information for errors\n   * Error recovery (parsing of syntactically incorrect code)\n * [Constant expression evaluation](doc/component/Constant_expression_evaluation.markdown)\n   * Evaluating constant/property/etc initializers\n   * Handling errors and unsupported expressions\n * [JSON representation](doc/component/JSON_representation.markdown)\n   * JSON encoding and decoding of ASTs\n * [Performance](doc/component/Performance.markdown)\n   * Disabling Xdebug\n   * Reusing objects\n   * Garbage collection impact\n * [Frequently asked questions](doc/component/FAQ.markdown)\n   * Parent and sibling references\n\n [doc_3_x]: https://github.com/nikic/PHP-Parser/tree/3.x/doc\n [doc_4_x]: https://github.com/nikic/PHP-Parser/tree/4.x/doc\n [doc_master]: https://github.com/nikic/PHP-Parser/tree/master/doc\n",
    "org": "nikic",
    "repo": "PHP-Parser",
    "number": 1088,
    "commit": "7fc3bcf97001c4a7aae5c355f0b03e7af54ca728"
}