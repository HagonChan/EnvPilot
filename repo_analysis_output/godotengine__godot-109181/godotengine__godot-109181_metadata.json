{
    "primary_language": "C++",
    "language_guidelines": "Programming Language guidelines for C++:\n# General Guidelines : \n**General Guidelines for C/C++ Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It contains important instructions for installation, usage, and project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or package management files like `CMakeLists.txt` (for CMake), `Makefile` (for Make), or `vcpkg.json` (for vcpkg). Ensure the required compiler and libraries are installed.  \n\n3. **Build Tool**  \n   Identify the build tool the project is using: Make, CMake, or another. This information should be available in the README or through project configuration files (e.g., `Makefile` for Make, `CMakeLists.txt` for CMake).  \n\n4. **Build the Project**  \n   Depending on the build tool, use the appropriate commands to build the project:  \n\n   - For Make:  \n     ```  \n     make  \n     ```  \n   - For CMake:  \n     ```  \n     mkdir build  \n     cd build  \n     cmake ..  \n     make  \n     ```  \n\n5. **Configuration**  \n   Check if the project requires configuration files (e.g., `.conf` files, `config.h` headers) to be set up. This may involve providing paths to dependencies or setting compilation flags.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it's a good idea to run them to ensure everything is working correctly. Common testing frameworks for C/C++ include Google Test (gtest), Catch2, and Boost.Test.  \n   - For Google Test:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n   - For Catch2:  \n     ```  \n     ./path/to/test_executable  \n     ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. This could involve running a specific executable, starting a server, or executing a specific command.  \n\n8. **Troubleshooting**  \n   If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues.  \n\n9. **Documentation**  \n   Review additional documentation such as Doxygen files, API documentation, or inline comments in the code. Understanding the documentation provides better insights into the project\u2019s structure and usage.  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: android_builds.yml\nContent:\nname: \ud83e\udd16 Android Builds\non:\n  workflow_call:\n\n# Global Settings\nenv:\n  SCONS_FLAGS: >-\n    dev_mode=yes\n    module_text_server_fb_enabled=yes\n    tests=no\n    swappy=yes\n\njobs:\n  build-android:\n    runs-on: ubuntu-24.04\n    name: ${{ matrix.name }}\n    timeout-minutes: 60\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - name: Editor (target=editor)\n            cache-name: android-editor\n            target: editor\n            scons-flags: >-\n              arch=arm64\n              production=yes\n\n          - name: Template arm32 (target=template_release, arch=arm32)\n            cache-name: android-template-arm32\n            target: template_release\n            scons-flags: arch=arm32\n\n          - name: Template arm64 (target=template_release, arch=arm64)\n            cache-name: android-template-arm64\n            target: template_release\n            scons-flags: arch=arm64\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Set up Java 17\n        uses: actions/setup-java@v4\n        with:\n          distribution: temurin\n          java-version: 17\n\n      - name: Restore Godot build cache\n        uses: ./.github/actions/godot-cache-restore\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Setup Python and SCons\n        uses: ./.github/actions/godot-deps\n\n      - name: Download pre-built Android Swappy Frame Pacing Library\n        uses: dsaltares/fetch-gh-release-asset@1.1.2\n        with:\n          repo: godotengine/godot-swappy\n          version: tags/from-source-2025-01-31\n          file: godot-swappy.7z\n          target: swappy/godot-swappy.7z\n\n      - name: Extract pre-built Android Swappy Frame Pacing Library\n        run: 7za x -y swappy/godot-swappy.7z -o${{github.workspace}}/thirdparty/swappy-frame-pacing\n\n      - name: Compilation\n        uses: ./.github/actions/godot-build\n        with:\n          scons-flags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }}\n          platform: android\n          target: ${{ matrix.target }}\n\n      - name: Save Godot build cache\n        uses: ./.github/actions/godot-cache-save\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Generate Godot templates\n        if: matrix.target == 'template_release'\n        run: |\n          cd platform/android/java\n          ./gradlew generateGodotTemplates\n          cd ../../..\n          ls -l bin/\n\n      - name: Generate Godot editor\n        if: matrix.target == 'editor'\n        run: |\n          cd platform/android/java\n          ./gradlew generateGodotEditor\n          ./gradlew generateGodotHorizonOSEditor\n          ./gradlew generateGodotPicoOSEditor\n          cd ../../..\n          ls -l bin/android_editor_builds/\n\n          # Separate different editors for multiple artifacts\n          mkdir horizonos\n          mv bin/android_editor_builds/*-horizonos-* horizonos\n          mkdir picoos\n          mv bin/android_editor_builds/*-picoos-* picoos\n\n      - name: Upload artifact\n        uses: ./.github/actions/upload-artifact\n        with:\n          name: ${{ matrix.cache-name }}\n\n      - name: Upload artifact (Horizon OS)\n        if: matrix.target == 'editor'\n        uses: ./.github/actions/upload-artifact\n        with:\n          name: ${{ matrix.cache-name }}-horizonos\n          path: horizonos\n\n      - name: Upload artifact (PICO OS)\n        if: matrix.target == 'editor'\n        uses: ./.github/actions/upload-artifact\n        with:\n          name: ${{ matrix.cache-name }}-picoos\n          path: picoos\n\nfile: ios_builds.yml\nContent:\nname: \ud83c\udf4f iOS Builds\non:\n  workflow_call:\n\n# Global Settings\nenv:\n  SCONS_FLAGS: >-\n    dev_mode=yes\n    module_text_server_fb_enabled=yes\n    tests=no\n    debug_symbols=no\n\njobs:\n  ios-template:\n    runs-on: macos-latest\n    name: Template (target=template_release)\n    timeout-minutes: 60\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Restore Godot build cache\n        uses: ./.github/actions/godot-cache-restore\n        continue-on-error: true\n\n      - name: Setup Python and SCons\n        uses: ./.github/actions/godot-deps\n\n      - name: Compilation (arm64)\n        uses: ./.github/actions/godot-build\n        with:\n          scons-flags: ${{ env.SCONS_FLAGS }}\n          platform: ios\n          target: template_release\n\n      - name: Save Godot build cache\n        uses: ./.github/actions/godot-cache-save\n        continue-on-error: true\n\n      - name: Upload artifact\n        uses: ./.github/actions/upload-artifact\n\nfile: linux_builds.yml\nContent:\nname: \ud83d\udc27 Linux Builds\non:\n  workflow_call:\n\n# Global Settings\nenv:\n  SCONS_FLAGS: >-\n    dev_mode=yes\n    module_text_server_fb_enabled=yes\n    \"accesskit_sdk_path=${{ github.workspace }}/accesskit-c-0.17.0/\"\n  GODOT_CPP_BRANCH: 4.4\n  DOTNET_NOLOGO: true\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  TSAN_OPTIONS: suppressions=${{ github.workspace }}/misc/error_suppressions/tsan.txt\n  UBSAN_OPTIONS: suppressions=${{ github.workspace }}/misc/error_suppressions/ubsan.txt\n\njobs:\n  build-linux:\n    # Stay one LTS before latest to increase portability of Linux artifacts.\n    runs-on: ubuntu-22.04\n    name: ${{ matrix.name }}\n    timeout-minutes: 120\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - name: Editor w/ Mono (target=editor)\n            cache-name: linux-editor-mono\n            target: editor\n            scons-flags: module_mono_enabled=yes\n            bin: ./bin/godot.linuxbsd.editor.x86_64.mono\n            build-mono: true\n            doc-test: true\n            proj-conv: true\n            api-compat: true\n            artifact: true\n            # Validate godot-cpp compatibility on one arbitrary editor build.\n            godot-cpp: true\n\n          - name: Editor with doubles and GCC sanitizers (target=editor, dev_build=yes, scu_build=yes, precision=double, use_asan=yes, use_ubsan=yes, linker=mold)\n            cache-name: linux-editor-double-sanitizers\n            target: editor\n            # Debug symbols disabled as they're huge on this build and we hit the 14 GB limit for runners.\n            scons-flags: >-\n              dev_build=yes\n              scu_build=yes\n              debug_symbols=no\n              precision=double\n              use_asan=yes\n              use_ubsan=yes\n              linker=mold\n            bin: ./bin/godot.linuxbsd.editor.dev.double.x86_64.san\n            proj-test: true\n\n          - name: Editor with clang sanitizers (target=editor, dev_build=yes, use_asan=yes, use_ubsan=yes, use_llvm=yes, linker=lld)\n            cache-name: linux-editor-llvm-sanitizers\n            target: editor\n            scons-flags: >-\n              dev_build=yes\n              use_asan=yes\n              use_ubsan=yes\n              use_llvm=yes\n              linker=lld\n            bin: ./bin/godot.linuxbsd.editor.dev.x86_64.llvm.san\n            # Test our oldest supported SCons/Python versions on one arbitrary editor build.\n            legacy-scons: true\n\n          - name: Editor with ThreadSanitizer (target=editor, dev_build=yes, use_tsan=yes, use_llvm=yes, linker=lld)\n            cache-name: linux-editor-thread-sanitizer\n            target: editor\n            scons-flags: >-\n              dev_build=yes\n              use_tsan=yes\n              use_llvm=yes\n              linker=lld\n            bin: ./bin/godot.linuxbsd.editor.dev.x86_64.llvm.san\n\n          - name: Template w/ Mono, release (target=template_release)\n            cache-name: linux-template-mono\n            target: template_release\n            scons-flags: module_mono_enabled=yes\n            bin: ./bin/godot.linuxbsd.template_release.x86_64.mono\n            artifact: true\n\n          - name: Template w/ Mono, debug (target=template_debug)\n            cache-name: linux-template-mono-debug\n            target: template_debug\n            scons-flags: module_mono_enabled=yes\n            bin: ./bin/godot.linuxbsd.template_debug.x86_64.mono\n            artifact: true\n\n          - name: Minimal template (target=template_release, everything disabled)\n            cache-name: linux-template-minimal\n            target: template_release\n            scons-flags: >-\n              modules_enabled_by_default=no\n              module_text_server_fb_enabled=no\n              disable_3d=yes\n              disable_advanced_gui=yes\n              disable_physics_2d=yes\n              disable_physics_3d=yes\n              deprecated=no\n              minizip=no\n              brotli=no\n            bin: ./bin/godot.linuxbsd.template_release.x86_64\n            artifact: true\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Linux dependencies for tests\n        if: matrix.proj-test\n        run: |\n          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list\n          sudo apt-get install mesa-vulkan-drivers\n\n      # TODO: Figure out somehow how to embed this one.\n      - name: wayland-scanner dependency\n        run: |\n          sudo apt-get install libwayland-bin\n\n      - name: Free disk space on runner\n        run: |\n          echo \"Disk usage before:\" && df -h\n          sudo rm -rf /usr/local/lib/android\n          echo \"Disk usage after:\" && df -h\n\n      - name: Restore Godot build cache\n        uses: ./.github/actions/godot-cache-restore\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Setup Python and SCons\n        if: \"!matrix.legacy-scons\"\n        uses: ./.github/actions/godot-deps\n\n      - name: Setup Python and SCons (legacy versions)\n        if: matrix.legacy-scons\n        uses: ./.github/actions/godot-deps\n        with:\n          # Sync with Ensure*Version in SConstruct.\n          python-version: 3.8\n          scons-version: 4.0\n\n      - name: Force remove preinstalled .NET SDKs\n        if: matrix.build-mono\n        run: |\n          sudo rm -rf /usr/share/dotnet/sdk/*\n\n      - name: Setup older .NET SDK as baseline\n        if: matrix.build-mono\n        uses: actions/setup-dotnet@v4\n        with:\n          # Targeting the oldest version we want to support to ensure it still builds.\n          dotnet-version: 8.0.100\n\n      - name: Download pre-built AccessKit\n        uses: dsaltares/fetch-gh-release-asset@1.1.2\n        with:\n          repo: AccessKit/accesskit-c\n          version: tags/0.17.0\n          file: accesskit-c-0.17.0.zip\n          target: accesskit-c-0.17.0/accesskit_c.zip\n\n      - name: Extract pre-built AccessKit\n        run: unzip -o accesskit-c-0.17.0/accesskit_c.zip\n\n      - name: Install mold linker\n        if: matrix.proj-test\n        uses: rui314/setup-mold@v1\n\n      - name: Compilation\n        uses: ./.github/actions/godot-build\n        with:\n          scons-flags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }}\n          platform: linuxbsd\n          target: ${{ matrix.target }}\n\n      - name: Compilation (godot-cpp)\n        uses: ./.github/actions/godot-cpp-build\n        if: matrix.godot-cpp\n        with:\n          bin: ${{ matrix.bin }}\n          scons-flags: target=template_debug dev_build=yes verbose=yes\n          godot-cpp-branch: ${{ env.GODOT_CPP_BRANCH }}\n\n      - name: Save Godot build cache\n        uses: ./.github/actions/godot-cache-save\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Generate C# glue\n        if: matrix.build-mono\n        run: |\n          ${{ matrix.bin }} --headless --generate-mono-glue ./modules/mono/glue\n\n      - name: Build .NET solutions\n        if: matrix.build-mono\n        run: |\n          dotnet --info\n          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd --werror\n\n      - name: Prepare artifact\n        if: matrix.artifact\n        run: |\n          strip bin/godot.*\n          chmod +x bin/godot.*\n\n      - name: Upload artifact\n        uses: ./.github/actions/upload-artifact\n        if: matrix.artifact\n        with:\n          name: ${{ matrix.cache-name }}\n\n      - name: Unit tests\n        run: |\n          ${{ matrix.bin }} --version\n          ${{ matrix.bin }} --help\n          ${{ matrix.bin }} --headless --test --force-colors\n\n      - name: .NET source generators tests\n        if: matrix.build-mono\n        run: |\n          dotnet test modules/mono/editor/Godot.NET.Sdk/Godot.SourceGenerators.Tests\n\n      # Check class reference\n      - name: Check for class reference updates\n        if: matrix.doc-test\n        run: |\n          echo \"Running --doctool to see if this changes the public API without updating the documentation.\"\n          echo -e \"If a diff is shown, it means that your code/doc changes are incomplete and you should update the class reference with --doctool.\\n\\n\"\n          ${{ matrix.bin }} --doctool --headless 2>&1 > /dev/null || true\n          git diff --color --exit-code && ! git ls-files --others --exclude-standard | sed -e 's/^/New doc file missing in PR: /' | grep 'xml$'\n\n      # Check API backwards compatibility\n      - name: Check for GDExtension compatibility\n        if: matrix.api-compat\n        run: |\n          ./misc/scripts/validate_extension_api.sh \"${{ matrix.bin }}\"\n\n      # Download and run the test project\n      - name: Test Godot project\n        uses: ./.github/actions/godot-project-test\n        if: matrix.proj-test\n        with:\n          bin: ${{ matrix.bin }}\n\n      # Test the project converter\n      - name: Test project converter\n        uses: ./.github/actions/godot-converter-test\n        if: matrix.proj-conv\n        with:\n          bin: ${{ matrix.bin }}\n\nfile: macos_builds.yml\nContent:\nname: \ud83c\udf4e macOS Builds\non:\n  workflow_call:\n\n# Global Settings\nenv:\n  SCONS_FLAGS: >-\n    dev_mode=yes\n    module_text_server_fb_enabled=yes\n    \"accesskit_sdk_path=${{ github.workspace }}/accesskit-c-0.17.0/\"\n\njobs:\n  build-macos:\n    runs-on: macos-latest\n    name: ${{ matrix.name }}\n    timeout-minutes: 120\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - name: Editor (target=editor)\n            cache-name: macos-editor\n            target: editor\n            bin: ./bin/godot.macos.editor.universal\n\n          - name: Template (target=template_release)\n            cache-name: macos-template\n            target: template_release\n            scons-flags: debug_symbols=no\n            bin: ./bin/godot.macos.template_release.universal\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Select Xcode 16\n        run: sudo xcode-select -s /Applications/Xcode_16.2.app\n\n      - name: Restore Godot build cache\n        uses: ./.github/actions/godot-cache-restore\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Setup Python and SCons\n        uses: ./.github/actions/godot-deps\n\n      - name: Download pre-built AccessKit\n        uses: dsaltares/fetch-gh-release-asset@1.1.2\n        with:\n          repo: AccessKit/accesskit-c\n          version: tags/0.17.0\n          file: accesskit-c-0.17.0.zip\n          target: accesskit-c-0.17.0/accesskit_c.zip\n\n      - name: Extract pre-built AccessKit\n        run: unzip -o accesskit-c-0.17.0/accesskit_c.zip\n\n      - name: Setup Vulkan SDK\n        id: vulkan-sdk\n        run: |\n          if sh misc/scripts/install_vulkan_sdk_macos.sh; then\n            echo \"VULKAN_ENABLED=yes\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"::warning::macOS: Vulkan SDK installation failed, building without Vulkan support.\"\n            echo \"VULKAN_ENABLED=no\" >> \"$GITHUB_OUTPUT\"\n          fi\n        continue-on-error: true\n\n      - name: Compilation (x86_64)\n        uses: ./.github/actions/godot-build\n        with:\n          scons-flags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }} arch=x86_64 vulkan=${{ steps.vulkan-sdk.outputs.VULKAN_ENABLED }}\n          platform: macos\n          target: ${{ matrix.target }}\n\n      - name: Compilation (arm64)\n        uses: ./.github/actions/godot-build\n        with:\n          scons-flags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }} arch=arm64 vulkan=${{ steps.vulkan-sdk.outputs.VULKAN_ENABLED }}\n          platform: macos\n          target: ${{ matrix.target }}\n\n      - name: Save Godot build cache\n        uses: ./.github/actions/godot-cache-save\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Prepare artifact\n        run: |\n          lipo -create ./bin/godot.macos.${{ matrix.target }}.x86_64 ./bin/godot.macos.${{ matrix.target }}.arm64 -output ./bin/godot.macos.${{ matrix.target }}.universal\n          rm ./bin/godot.macos.${{ matrix.target }}.x86_64 ./bin/godot.macos.${{ matrix.target }}.arm64\n          strip bin/godot.*\n          chmod +x bin/godot.*\n\n      - name: Upload artifact\n        uses: ./.github/actions/upload-artifact\n        with:\n          name: ${{ matrix.cache-name }}\n\n      - name: Unit tests\n        run: |\n          ${{ matrix.bin }} --version\n          ${{ matrix.bin }} --help\n          ${{ matrix.bin }} --test --force-colors\n\nfile: web_builds.yml\nContent:\nname: \ud83c\udf10 Web Builds\non:\n  workflow_call:\n\n# Global Settings\nenv:\n  SCONS_FLAGS: >-\n    dev_mode=yes\n    tests=no\n    debug_symbols=no\n    use_closure_compiler=yes\n  EM_VERSION: 4.0.11\n\njobs:\n  web-template:\n    runs-on: ubuntu-24.04\n    name: ${{ matrix.name }}\n    timeout-minutes: 60\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - name: Template w/ threads (target=template_release, threads=yes)\n            cache-name: web-template\n            target: template_release\n            scons-flags: threads=yes\n            artifact: true\n\n          - name: Template w/o threads (target=template_release, threads=no)\n            cache-name: web-nothreads-template\n            target: template_release\n            scons-flags: threads=no\n            artifact: true\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Set up Emscripten latest\n        uses: mymindstorm/setup-emsdk@v14\n        with:\n          version: ${{ env.EM_VERSION }}\n          no-cache: true\n\n      - name: Verify Emscripten setup\n        run: |\n          emcc -v\n\n      - name: Restore Godot build cache\n        uses: ./.github/actions/godot-cache-restore\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Setup Python and SCons\n        uses: ./.github/actions/godot-deps\n\n      - name: Compilation\n        uses: ./.github/actions/godot-build\n        with:\n          scons-flags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }}\n          platform: web\n          target: ${{ matrix.target }}\n\n      - name: Save Godot build cache\n        uses: ./.github/actions/godot-cache-save\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Upload artifact\n        uses: ./.github/actions/upload-artifact\n        if: matrix.artifact\n        with:\n          name: ${{ matrix.cache-name }}\n\nfile: windows_builds.yml\nContent:\nname: \ud83c\udfc1 Windows Builds\non:\n  workflow_call:\n\n# Global Settings\nenv:\n  SCONS_FLAGS: >-\n    dev_mode=yes\n    module_text_server_fb_enabled=yes\n    debug_symbols=no\n    d3d12=yes\n    \"angle_libs=${{ github.workspace }}/\"\n    \"accesskit_sdk_path=${{ github.workspace }}/accesskit-c-0.17.0/\"\n  SCONS_CACHE_MSVC_CONFIG: true\n  PYTHONIOENCODING: utf8\n\njobs:\n  build-windows:\n    # Windows 10 with latest image\n    runs-on: windows-latest\n    name: ${{ matrix.name }}\n    timeout-minutes: 120\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - name: Editor (target=editor)\n            cache-name: windows-editor\n            target: editor\n            scons-flags: >-\n              windows_subsystem=console\n              vsproj=yes\n              vsproj_gen_only=no\n            bin: ./bin/godot.windows.editor.x86_64.exe\n            compiler: msvc\n\n          - name: Editor w/ clang-cl (target=editor, use_llvm=yes)\n            cache-name: windows-editor-clang\n            target: editor\n            scons-flags: >-\n              windows_subsystem=console\n              use_llvm=yes\n            bin: ./bin/godot.windows.editor.x86_64.llvm.exe\n            compiler: clang\n\n          - name: Template (target=template_release)\n            cache-name: windows-template\n            target: template_release\n            bin: ./bin/godot.windows.template_release.x86_64.console.exe\n            compiler: msvc\n\n          - name: Template w/ GCC (target=template_release, use_mingw=yes)\n            cache-name: windows-template-gcc\n            # MinGW takes MUCH longer to compile; save time by only targeting Template.\n            target: template_release\n            scons-flags: use_mingw=yes\n            bin: ./bin/godot.windows.template_release.x86_64.console.exe\n            compiler: gcc\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          submodules: recursive\n\n      - name: Restore Godot build cache\n        uses: ./.github/actions/godot-cache-restore\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Setup Python and SCons\n        uses: ./.github/actions/godot-deps\n\n      - name: Download Direct3D 12 SDK components\n        run: python ./misc/scripts/install_d3d12_sdk_windows.py\n\n      - name: Download pre-built ANGLE static libraries\n        uses: dsaltares/fetch-gh-release-asset@1.1.2\n        with:\n          repo: godotengine/godot-angle-static\n          version: tags/chromium/6601.2\n          file: godot-angle-static-x86_64-${{ matrix.compiler == 'gcc' && 'gcc' || 'msvc' }}-release.zip\n          target: angle/angle.zip\n\n      - name: Extract pre-built ANGLE static libraries\n        run: Expand-Archive -Force angle/angle.zip ${{ github.workspace }}/\n\n      - name: Download pre-built AccessKit\n        uses: dsaltares/fetch-gh-release-asset@1.1.2\n        with:\n          repo: AccessKit/accesskit-c\n          version: tags/0.17.0\n          file: accesskit-c-0.17.0.zip\n          target: accesskit-c-0.17.0/accesskit_c.zip\n\n      - name: Extract pre-built AccessKit\n        run: unzip -o accesskit-c-0.17.0/accesskit_c.zip\n\n      - name: Compilation\n        uses: ./.github/actions/godot-build\n        with:\n          scons-flags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }}\n          platform: windows\n          target: ${{ matrix.target }}\n\n      - name: Save Godot build cache\n        uses: ./.github/actions/godot-cache-save\n        with:\n          cache-name: ${{ matrix.cache-name }}\n        continue-on-error: true\n\n      - name: Prepare artifact\n        if: matrix.compiler == 'msvc'\n        run: |\n          Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force\n\n      - name: Upload artifact\n        if: matrix.compiler == 'msvc'\n        uses: ./.github/actions/upload-artifact\n        with:\n          name: ${{ matrix.cache-name }}\n\n      - name: Unit tests\n        run: |\n          ${{ matrix.bin }} --version\n          ${{ matrix.bin }} --help\n          ${{ matrix.bin }} --test --force-colors\n",
    "readme": "# Godot Engine\n\n<p align=\"center\">\n  <a href=\"https://godotengine.org\">\n    <img src=\"logo_outlined.svg\" width=\"400\" alt=\"Godot Engine logo\">\n  </a>\n</p>\n\n## 2D and 3D cross-platform game engine\n\n**[Godot Engine](https://godotengine.org) is a feature-packed, cross-platform\ngame engine to create 2D and 3D games from a unified interface.** It provides a\ncomprehensive set of [common tools](https://godotengine.org/features), so that\nusers can focus on making games without having to reinvent the wheel. Games can\nbe exported with one click to a number of platforms, including the major desktop\nplatforms (Linux, macOS, Windows), mobile platforms (Android, iOS), as well as\nWeb-based platforms and [consoles](https://docs.godotengine.org/en/latest/tutorials/platform/consoles.html).\n\n## Free, open source and community-driven\n\nGodot is completely free and open source under the very permissive [MIT license](https://godotengine.org/license).\nNo strings attached, no royalties, nothing. The users' games are theirs, down\nto the last line of engine code. Godot's development is fully independent and\ncommunity-driven, empowering users to help shape their engine to match their\nexpectations. It is supported by the [Godot Foundation](https://godot.foundation/)\nnot-for-profit.\n\nBefore being open sourced in [February 2014](https://github.com/godotengine/godot/commit/0b806ee0fc9097fa7bda7ac0109191c9c5e0a1ac),\nGodot had been developed by [Juan Linietsky](https://github.com/reduz) and\n[Ariel Manzur](https://github.com/punto-) (both still maintaining the project)\nfor several years as an in-house engine, used to publish several work-for-hire\ntitles.\n\n![Screenshot of a 3D scene in the Godot Engine editor](https://raw.githubusercontent.com/godotengine/godot-design/master/screenshots/editor_tps_demo_1920x1080.jpg)\n\n## Getting the engine\n\n### Binary downloads\n\nOfficial binaries for the Godot editor and the export templates can be found\n[on the Godot website](https://godotengine.org/download).\n\n### Compiling from source\n\n[See the official docs](https://docs.godotengine.org/en/latest/contributing/development/compiling)\nfor compilation instructions for every supported platform.\n\n## Community and contributing\n\nGodot is not only an engine but an ever-growing community of users and engine\ndevelopers. The main community channels are listed [on the homepage](https://godotengine.org/community).\n\nThe best way to get in touch with the core engine developers is to join the\n[Godot Contributors Chat](https://chat.godotengine.org).\n\nTo get started contributing to the project, see the [contributing guide](CONTRIBUTING.md).\nThis document also includes guidelines for reporting bugs.\n\n## Documentation and demos\n\nThe official documentation is hosted on [Read the Docs](https://docs.godotengine.org).\nIt is maintained by the Godot community in its own [GitHub repository](https://github.com/godotengine/godot-docs).\n\nThe [class reference](https://docs.godotengine.org/en/latest/classes/)\nis also accessible from the Godot editor.\n\nWe also maintain official demos in their own [GitHub repository](https://github.com/godotengine/godot-demo-projects)\nas well as a list of [awesome Godot community resources](https://github.com/godotengine/awesome-godot).\n\nThere are also a number of other\n[learning resources](https://docs.godotengine.org/en/latest/community/tutorials.html)\nprovided by the community, such as text and video tutorials, demos, etc.\nConsult the [community channels](https://godotengine.org/community)\nfor more information.\n\n[![Code Triagers Badge](https://www.codetriage.com/godotengine/godot/badges/users.svg)](https://www.codetriage.com/godotengine/godot)\n[![Translate on Weblate](https://hosted.weblate.org/widgets/godot-engine/-/godot/svg-badge.svg)](https://hosted.weblate.org/engage/godot-engine/?utm_source=widget)\n[![TODOs](https://badgen.net/https/api.tickgit.com/badgen/github.com/godotengine/godot)](https://www.tickgit.com/browse?repo=github.com/godotengine/godot)\n",
    "org": "godotengine",
    "repo": "godot",
    "number": 109181,
    "commit": "cce10e0b22a6323fbafa5082d2105091b6d193eb"
}