{
    "primary_language": "JavaScript",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for JavaScript/Node.js Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `package.json` file. Ensure you have Node.js and npm (or Yarn) installed to manage these dependencies.  \n\n3. **Install Dependencies**  \n   Run the following command to install project dependencies:  \n   ```sh\n   npm install  \n   ```  \n   or, if the project uses Yarn:  \n   ```sh\n   yarn install  \n   ```  \n\n4. **Build the Project**  \n   If the project requires a build step, refer to the `scripts` section in the `package.json` file. Common build commands include:  \n   ```sh\n   npm run build  \n   ```  \n   or  \n   ```sh\n   yarn build  \n   ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, JSON configuration files) and set them up accordingly. The README or project documentation should provide details on this.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Common test commands include:  \n   ```sh\n   npm test  \n   ```  \n   or  \n   ```sh\n   yarn test  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands might include:  \n   ```sh\n   npm start  \n   ```  \n   or  \n   ```sh\n   yarn start  \n   ```  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered. Checking for error messages in the terminal can also provide clues.  \n\n9. **Code Linting and Formatting**  \n   Use linters and formatters to ensure code quality and consistency. Common tools include ESLint for linting and Prettier for formatting. You can typically run these with:  \n   ```sh\n   npm run lint  \n   npm run format  \n   ```  \n   or  \n   ```sh\n   yarn lint  \n   yarn format  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: runtime_fuzz_tests.yml\nContent:\nname: (Runtime) Fuzz tests\n\non:\n  schedule:\n    - cron: 0 * * * *\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\nenv:\n  TZ: /usr/share/zoneinfo/America/Los_Angeles\n\njobs:\n  test_fuzz:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4.1.0\n    - uses: actions/setup-node@v4\n      with:\n        node-version-file: '.nvmrc'\n        cache: 'yarn'\n    - name: Install dependencies\n      run: yarn install --frozen-lockfile\n      env:\n        ELECTRON_SKIP_BINARY_DOWNLOAD: \"1\"\n      shell: bash\n    - name: Run fuzz tests\n      run: |-\n        FUZZ_TEST_SEED=$RANDOM yarn test fuzz --ci\n        FUZZ_TEST_SEED=$RANDOM yarn test --prod fuzz --ci\n\nfile: devtools_regression_tests.yml\nContent:\nname: (DevTools) Regression Tests\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n    inputs:\n      commit_sha:\n        required: false\n        type: string\n\nenv:\n  TZ: /usr/share/zoneinfo/America/Los_Angeles\n  # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#cache-segment-restore-timeout\n  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1\n\njobs:\n  download_build:\n    name: Download base build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock', 'scripts/release/yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: yarn install --frozen-lockfile\n        working-directory: scripts/release\n      - name: Download react-devtools artifacts for base revision\n        run: |\n          git fetch origin main\n          GH_TOKEN=${{ github.token }} scripts/release/download-experimental-build.js --commit=${{ inputs.commit_sha || '$(git rev-parse origin/main)' }}\n      - name: Display structure of build\n        run: ls -R build\n      - name: Archive build\n        uses: actions/upload-artifact@v4\n        with:\n          name: build\n          path: build\n\n  build_devtools_and_process_artifacts:\n    name: Build DevTools and process artifacts\n    needs: download_build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          name: build\n          path: build\n      - run: ./scripts/ci/pack_and_store_devtools_artifacts.sh\n        env:\n          RELEASE_CHANNEL: experimental\n      - name: Display structure of build\n        run: ls -R build\n      - name: Archive devtools build\n        uses: actions/upload-artifact@v4\n        with:\n          name: react-devtools\n          path: build/devtools.tgz\n      # Simplifies getting the extension for local testing\n      - name: Archive chrome extension\n        uses: actions/upload-artifact@v4\n        with:\n          name: react-devtools-chrome-extension\n          path: build/devtools/chrome-extension.zip\n      - name: Archive firefox extension\n        uses: actions/upload-artifact@v4\n        with:\n          name: react-devtools-firefox-extension\n          path: build/devtools/firefox-extension.zip\n\n  run_devtools_tests_for_versions:\n    name: Run DevTools tests for versions\n    needs: build_devtools_and_process_artifacts\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        version:\n          - \"16.0\"\n          - \"16.5\" # schedule package\n          - \"16.8\" # hooks\n          - \"17.0\"\n          - \"18.0\"\n    continue-on-error: true\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore all archived build artifacts\n        uses: actions/download-artifact@v4\n      - name: Display structure of build\n        run: ls -R build\n      - run: ./scripts/ci/download_devtools_regression_build.js ${{ matrix.version }} --replaceBuild\n      - run: node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion ${{ matrix.version }} --ci\n\n  run_devtools_e2e_tests_for_versions:\n    name: Run DevTools e2e tests for versions\n    needs: build_devtools_and_process_artifacts\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        version:\n          - \"16.0\"\n          - \"16.5\" # schedule package\n          - \"16.8\" # hooks\n          - \"17.0\"\n          - \"18.0\"\n    continue-on-error: true\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore all archived build artifacts\n        uses: actions/download-artifact@v4\n      - name: Display structure of build\n        run: ls -R build\n      - name: Playwright install deps\n        run: |\n          npx playwright install\n          sudo npx playwright install-deps\n      - run: ./scripts/ci/download_devtools_regression_build.js ${{ matrix.version }}\n      - run: ls -R build-regression\n      - run: ./scripts/ci/run_devtools_e2e_tests.js ${{ matrix.version }}\n        env:\n          RELEASE_CHANNEL: experimental\n      - name: Cleanup build regression folder\n        run: rm -r ./build-regression\n      - uses: actions/upload-artifact@v4\n        with:\n          name: screenshots\n          path: ./tmp/screenshots\n\nfile: runtime_build_and_test.yml\nContent:\nname: (Runtime) Build and Test\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    paths-ignore:\n      - compiler/**\n\nenv:\n  TZ: /usr/share/zoneinfo/America/Los_Angeles\n  # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#cache-segment-restore-timeout\n  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1\n\njobs:\n  # ----- FLOW -----\n  discover_flow_inline_configs:\n    name: Discover flow inline configs\n    runs-on: ubuntu-latest\n    outputs:\n      matrix: ${{ steps.set-matrix.outputs.result }}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/github-script@v7\n        id: set-matrix\n        with:\n          script: |\n            const inlinedHostConfigs = require('./scripts/shared/inlinedHostConfigs.js');\n            return inlinedHostConfigs.map(config => config.shortName);\n\n  flow:\n    name: Flow check ${{ matrix.flow_inline_config_shortname }}\n    needs: discover_flow_inline_configs\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    strategy:\n      matrix:\n        flow_inline_config_shortname: ${{ fromJSON(needs.discover_flow_inline_configs.outputs.matrix) }}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: node ./scripts/tasks/flow-ci ${{ matrix.flow_inline_config_shortname }}\n\n  # ----- FIZZ -----\n  check_generated_fizz_runtime:\n    name: Confirm generated inline Fizz runtime is up to date\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: |\n          yarn generate-inline-fizz-runtime\n          git diff --quiet || (echo \"There was a change to the Fizz runtime. Run `yarn generate-inline-fizz-runtime` and check in the result.\" && false)\n\n  # ----- FEATURE FLAGS -----\n  flags:\n    name: Check flags\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: yarn flags\n\n  # ----- TESTS -----\n  test:\n    name: yarn test ${{ matrix.params }} (Shard ${{ matrix.shard }})\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        params:\n          - \"-r=stable --env=development\"\n          - \"-r=stable --env=production\"\n          - \"-r=experimental --env=development\"\n          - \"-r=experimental --env=production\"\n          - \"-r=www-classic --env=development --variant=false\"\n          - \"-r=www-classic --env=production --variant=false\"\n          - \"-r=www-classic --env=development --variant=true\"\n          - \"-r=www-classic --env=production --variant=true\"\n          - \"-r=www-modern --env=development --variant=false\"\n          - \"-r=www-modern --env=production --variant=false\"\n          - \"-r=www-modern --env=development --variant=true\"\n          - \"-r=www-modern --env=production --variant=true\"\n          - \"-r=xplat --env=development --variant=false\"\n          - \"-r=xplat --env=development --variant=true\"\n          - \"-r=xplat --env=production --variant=false\"\n          - \"-r=xplat --env=production --variant=true\"\n          # TODO: Test more persistent configurations?\n          - \"-r=stable --env=development --persistent\"\n          - \"-r=experimental --env=development --persistent\"\n        shard:\n          - 1/5\n          - 2/5\n          - 3/5\n          - 4/5\n          - 5/5\n    continue-on-error: true\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: yarn test ${{ matrix.params }} --ci --shard=${{ matrix.shard }}\n\n  # ----- BUILD -----\n  build_and_lint:\n    name: yarn build and lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # yml is dumb. update the --total arg to yarn build if you change the number of workers\n        worker_id: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n        release_channel: [stable, experimental]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - uses: actions/setup-java@v4\n        with:\n          distribution: temurin\n          java-version: 11.0.22\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: yarn build --index=${{ matrix.worker_id }} --total=20 --r=${{ matrix.release_channel }} --ci\n        env:\n          CI: github\n          RELEASE_CHANNEL: ${{ matrix.release_channel }}\n          NODE_INDEX: ${{ matrix.worker_id }}\n      - name: Lint build\n        run: yarn lint-build\n      - name: Display structure of build\n        run: ls -R build\n      - name: Archive build\n        uses: actions/upload-artifact@v4\n        with:\n          name: _build_${{ matrix.worker_id }}_${{ matrix.release_channel }}\n          path: build\n\n  test_build:\n    name: yarn test-build\n    needs: build_and_lint\n    strategy:\n      matrix:\n        test_params: [\n          # Intentionally passing these as strings instead of creating a\n          # separate parameter per CLI argument, since it's easier to\n          # control/see which combinations we want to run.\n          -r=stable --env=development,\n          -r=stable --env=production,\n          -r=experimental --env=development,\n          -r=experimental --env=production,\n\n          # Dev Tools\n          --project=devtools -r=experimental,\n\n          # TODO: Update test config to support www build tests\n          # - \"-r=www-classic --env=development --variant=false\"\n          # - \"-r=www-classic --env=production --variant=false\"\n          # - \"-r=www-classic --env=development --variant=true\"\n          # - \"-r=www-classic --env=production --variant=true\"\n          # - \"-r=www-modern --env=development --variant=false\"\n          # - \"-r=www-modern --env=production --variant=false\"\n          # - \"-r=www-modern --env=development --variant=true\"\n          # - \"-r=www-modern --env=production --variant=true\"\n\n          # TODO: Update test config to support xplat build tests\n          # - \"-r=xplat --env=development --variant=false\"\n          # - \"-r=xplat --env=development --variant=true\"\n          # - \"-r=xplat --env=production --variant=false\"\n          # - \"-r=xplat --env=production --variant=true\"\n\n          # TODO: Test more persistent configurations?\n        ]\n        shard:\n          - 1/3\n          - 2/3\n          - 3/3\n    continue-on-error: true\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - name: Display structure of build\n        run: ls -R build\n      - run: yarn test --build ${{ matrix.test_params }} --shard=${{ matrix.shard }} --ci\n\n  process_artifacts_combined:\n    name: Process artifacts combined\n    needs: build_and_lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - name: Display structure of build\n        run: ls -R build\n      - run: echo ${{ github.sha }} >> build/COMMIT_SHA\n      - name: Scrape warning messages\n        run: |\n          mkdir -p ./build/__test_utils__\n          node ./scripts/print-warnings/print-warnings.js > build/__test_utils__/ReactAllWarnings.js\n        # Compress build directory into a single tarball for easy download\n      - run: tar -zcvf ./build.tgz ./build\n        # TODO: Migrate scripts to use `build` directory instead of `build2`\n      - run: cp ./build.tgz ./build2.tgz\n      - name: Archive build artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: artifacts_combined\n          path: |\n            ./build.tgz\n            ./build2.tgz\n\n  check_error_codes:\n    name: Search build artifacts for unminified errors\n    needs: build_and_lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - name: Display structure of build\n        run: ls -R build\n      - name: Search build artifacts for unminified errors\n        run: |\n          yarn extract-errors\n          git diff --quiet || (echo \"Found unminified errors. Either update the error codes map or disable error minification for the affected build, if appropriate.\" && false)\n\n  check_release_dependencies:\n    name: Check release dependencies\n    needs: build_and_lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - name: Display structure of build\n        run: ls -R build\n      - run: yarn check-release-dependencies\n\n  RELEASE_CHANNEL_stable_yarn_test_dom_fixtures:\n    name: Check fixtures DOM (stable)\n    needs: build_and_lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: v2-yarn_cache_fixtures_dom-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn\n        working-directory: fixtures/dom\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - name: Display structure of build\n        run: ls -R build\n      - name: Run DOM fixture tests\n        run: |\n          yarn predev\n          yarn test\n        working-directory: fixtures/dom\n        env:\n          RELEASE_CHANNEL: stable\n\n  # ----- FLIGHT -----\n  run_fixtures_flight_tests:\n    name: Run fixtures Flight tests\n    needs: build_and_lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      # Fixture copies some built packages from the workroot after install.\n      # That means dependencies of the built packages are not installed.\n      # We need to install dependencies of the workroot to fulfill all dependency constraints\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: v2-yarn_cache_fixtures_flight-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - name: Display structure of build\n        run: ls -R build\n      - name: Install fixture dependencies\n        working-directory: fixtures/flight\n        run: |\n          yarn install --frozen-lockfile --cache-folder ~/.cache/yarn\n          if [ $? -ne 0 ]; then\n            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn\n          fi\n      - name: Playwright install deps\n        working-directory: fixtures/flight\n        run: |\n          npx playwright install\n          sudo npx playwright install-deps\n      - name: Run tests\n        working-directory: fixtures/flight\n        run: yarn test\n        env:\n          # Otherwise the webserver is a blackbox\n          DEBUG: pw:webserver\n      - name: Archive Flight fixture artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: flight-playwright-report\n          path: fixtures/flight/playwright-report\n      - name: Archive Flight fixture artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: flight-test-results\n          path: fixtures/flight/test-results\n\n  # ----- DEVTOOLS -----\n  build_devtools_and_process_artifacts:\n    name: Build DevTools and process artifacts\n    needs: build_and_lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - run: ./scripts/ci/pack_and_store_devtools_artifacts.sh\n        env:\n          RELEASE_CHANNEL: experimental\n      - name: Display structure of build\n        run: ls -R build\n      - name: Archive devtools build\n        uses: actions/upload-artifact@v4\n        with:\n          name: react-devtools\n          path: build/devtools.tgz\n      # Simplifies getting the extension for local testing\n      - name: Archive chrome extension\n        uses: actions/upload-artifact@v4\n        with:\n          name: react-devtools-chrome-extension\n          path: build/devtools/chrome-extension.zip\n      - name: Archive firefox extension\n        uses: actions/upload-artifact@v4\n        with:\n          name: react-devtools-firefox-extension\n          path: build/devtools/firefox-extension.zip\n\n  run_devtools_e2e_tests:\n    name: Run DevTools e2e tests\n    needs: build_devtools_and_process_artifacts\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - run: |\n          npx playwright install\n          sudo npx playwright install-deps\n      - run: ./scripts/ci/run_devtools_e2e_tests.js\n        env:\n          RELEASE_CHANNEL: experimental\n\n  # ----- SIZEBOT -----\n  download_base_build_for_sizebot:\n    if: ${{ github.event_name == 'pull_request' && github.ref_name != 'main' }}\n    name: Download base build for sizebot\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock', 'scripts/release/yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - run: yarn install --frozen-lockfile\n        working-directory: scripts/release\n      - name: Download artifacts for base revision\n        run: |\n          git fetch origin main\n          GH_TOKEN=${{ github.token }} scripts/release/download-experimental-build.js --commit=$(git rev-parse origin/main)\n          mv ./build ./base-build\n      # TODO: The `download-experimental-build` script copies the npm\n      # packages into the `node_modules` directory. This is a historical\n      # quirk of how the release script works. Let's pretend they\n      # don't exist.\n      - name: Delete extraneous files\n        run: rm -rf ./base-build/node_modules\n      - name: Display structure of base-build\n        run: ls -R base-build\n      - name: Archive base-build\n        uses: actions/upload-artifact@v4\n        with:\n          name: base-build\n          path: base-build\n\n  sizebot:\n    name: Run sizebot\n    needs: [build_and_lint, download_base_build_for_sizebot]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Restore cached node_modules\n        uses: actions/cache@v4\n        id: node_modules\n        with:\n          path: \"**/node_modules\"\n          key: ${{ runner.arch }}-${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}\n      - run: yarn install --frozen-lockfile\n      - name: Restore archived build for PR\n        uses: actions/download-artifact@v4\n        with:\n          pattern: _build_*\n          path: build\n          merge-multiple: true\n      - name: Scrape warning messages\n        run: |\n          mkdir -p ./build/__test_utils__\n          node ./scripts/print-warnings/print-warnings.js > build/__test_utils__/ReactAllWarnings.js\n      - name: Display structure of build for PR\n        run: ls -R build\n      - name: Restore archived base-build from origin/main\n        uses: actions/download-artifact@v4\n        with:\n          name: base-build\n          path: base-build\n      - name: Display structure of base-build from origin/main\n        run: ls -R base-build\n      - run: echo ${{ github.sha }} >> build/COMMIT_SHA\n      - run: node ./scripts/tasks/danger\n      - name: Archive sizebot results\n        uses: actions/upload-artifact@v4\n        with:\n          name: sizebot-message\n          path: sizebot-message.md\n",
    "readme": "# [React](https://react.dev/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![(Runtime) Build and Test](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml/badge.svg)](https://github.com/facebook/react/actions/workflows/runtime_build_and_test.yml) [![(Compiler) TypeScript](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml/badge.svg?branch=main)](https://github.com/facebook/react/actions/workflows/compiler_typescript.yml) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://legacy.reactjs.org/docs/how-to-contribute.html#your-first-pull-request)\n\nReact is a JavaScript library for building user interfaces.\n\n* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.\n* **Component-Based:** Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.\n* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using [Node](https://nodejs.org/en) and power mobile apps using [React Native](https://reactnative.dev/).\n\n[Learn how to use React in your project](https://react.dev/learn).\n\n## Installation\n\nReact has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:\n\n* Use [Quick Start](https://react.dev/learn) to get a taste of React.\n* [Add React to an Existing Project](https://react.dev/learn/add-react-to-an-existing-project) to use as little or as much React as you need.\n* [Create a New React App](https://react.dev/learn/start-a-new-react-project) if you're looking for a powerful JavaScript toolchain.\n\n## Documentation\n\nYou can find the React documentation [on the website](https://react.dev/).\n\nCheck out the [Getting Started](https://react.dev/learn) page for a quick overview.\n\nThe documentation is divided into several sections:\n\n* [Quick Start](https://react.dev/learn)\n* [Tutorial](https://react.dev/learn/tutorial-tic-tac-toe)\n* [Thinking in React](https://react.dev/learn/thinking-in-react)\n* [Installation](https://react.dev/learn/installation)\n* [Describing the UI](https://react.dev/learn/describing-the-ui)\n* [Adding Interactivity](https://react.dev/learn/adding-interactivity)\n* [Managing State](https://react.dev/learn/managing-state)\n* [Advanced Guides](https://react.dev/learn/escape-hatches)\n* [API Reference](https://react.dev/reference/react)\n* [Where to Get Support](https://react.dev/community)\n* [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)\n\nYou can improve it by sending pull requests to [this repository](https://github.com/reactjs/react.dev).\n\n## Examples\n\nWe have several examples [on the website](https://react.dev/). Here is the first one to get you started:\n\n```jsx\nimport { createRoot } from 'react-dom/client';\n\nfunction HelloMessage({ name }) {\n  return <div>Hello {name}</div>;\n}\n\nconst root = createRoot(document.getElementById('container'));\nroot.render(<HelloMessage name=\"Taylor\" />);\n```\n\nThis example will render \"Hello Taylor\" into a container on the page.\n\nYou'll notice that we used an HTML-like syntax; [we call it JSX](https://react.dev/learn#writing-markup-with-jsx). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML.\n\n## Contributing\n\nThe main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.\n\n### [Code of Conduct](https://code.fb.com/codeofconduct)\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.\n\n### [Contributing Guide](https://legacy.reactjs.org/docs/how-to-contribute.html)\n\nRead our [contributing guide](https://legacy.reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.\n\n### [Good First Issues](https://github.com/facebook/react/labels/good%20first%20issue)\n\nTo help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.\n\n### License\n\nReact is [MIT licensed](./LICENSE).\n"
}