{
    "primary_language": "Rust",
    "language_guidelines": "Programming Language guidelines for Rust:\n# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yaml\nContent:\nname: CI\n\non:\n  pull_request:\n    branches:\n    - '*'\n  push:\n    branches:\n    - master\n\ndefaults:\n  run:\n    shell: bash\n\nenv:\n  RUSTFLAGS: --deny warnings\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - uses: Swatinem/rust-cache@v2\n\n    - name: Clippy\n      run: cargo clippy --all --all-targets\n\n    - name: Format\n      run: cargo fmt --all -- --check\n\n    - name: Install Dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install ripgrep shellcheck\n\n    - name: Check for Forbidden Words\n      run: ./bin/forbid\n\n    - name: Check Install Script\n      run: shellcheck www/install.sh\n\n  msrv:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - uses: actions-rust-lang/setup-rust-toolchain@v1\n      with:\n        toolchain: 1.77\n\n    - uses: Swatinem/rust-cache@v2\n\n    - name: Check\n      run: cargo check\n\n  pages:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - uses: Swatinem/rust-cache@v2\n\n    - name: Install `mdbook`\n      run: cargo install mdbook\n\n    - name: Install `mdbook-linkcheck`\n      run: |\n        mkdir -p mdbook-linkcheck\n        cd mdbook-linkcheck\n        wget https://github.com/Michael-F-Bryan/mdbook-linkcheck/releases/latest/download/mdbook-linkcheck.x86_64-unknown-linux-gnu.zip\n        unzip mdbook-linkcheck.x86_64-unknown-linux-gnu.zip\n        chmod +x mdbook-linkcheck\n        pwd >> $GITHUB_PATH\n\n    - name: Build book\n      run: |\n        cargo run --package generate-book\n        mdbook build book/en\n        mdbook build book/zh\n\n  test:\n    strategy:\n      matrix:\n        os:\n        - ubuntu-latest\n        - macos-latest\n        - windows-latest\n\n    runs-on: ${{matrix.os}}\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Remove Broken WSL bash executable\n      if: ${{ matrix.os == 'windows-latest' }}\n      shell: cmd\n      run: |\n        takeown /F C:\\Windows\\System32\\bash.exe\n        icacls C:\\Windows\\System32\\bash.exe /grant administrators:F\n        del C:\\Windows\\System32\\bash.exe\n\n    - uses: Swatinem/rust-cache@v2\n\n    - name: Test\n      run: cargo test --all\n\n    - name: Test install.sh\n      run: |\n        bash www/install.sh --to /tmp --tag 1.25.0\n        /tmp/just --version\n",
    "readme": "<div align=right>Table of Contents\u2197\ufe0f</div>\n\n<h1 align=center><code>just</code></h1>\n\n<div align=center>\n  <a href=https://crates.io/crates/just>\n    <img src=https://img.shields.io/crates/v/just.svg alt=\"crates.io version\">\n  </a>\n  <a href=https://github.com/casey/just/actions/workflows/ci.yaml>\n    <img src=https://github.com/casey/just/actions/workflows/ci.yaml/badge.svg alt=\"build status\">\n  </a>\n  <a href=https://github.com/casey/just/releases>\n    <img src=https://img.shields.io/github/downloads/casey/just/total.svg alt=downloads>\n  </a>\n  <a href=https://discord.gg/ezYScXR>\n    <img src=https://img.shields.io/discord/695580069837406228?logo=discord alt=\"chat on discord\">\n  </a>\n  <a href=mailto:casey@rodarmor.com?subject=Thanks%20for%20Just!>\n    <img src=https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg alt=\"say thanks\">\n  </a>\n</div>\n<br>\n\n`just` is a handy way to save and run project-specific commands.\n\nThis readme is also available as a [book](https://just.systems/man/en/). The\nbook reflects the latest release, whereas the\n[readme on GitHub](https://github.com/casey/just/blob/master/README.md)\nreflects latest master.\n\n(\u4e2d\u6587\u6587\u6863\u5728 [\u8fd9\u91cc](https://github.com/casey/just/blob/master/README.\u4e2d\u6587.md),\n\u5feb\u770b\u8fc7\u6765!)\n\nCommands, called recipes, are stored in a file called `justfile` with syntax\ninspired by `make`:\n\n![screenshot](https://raw.githubusercontent.com/casey/just/master/screenshot.png)\n\nYou can then run them with `just RECIPE`:\n\n```console\n$ just test-all\ncc *.c -o main\n./test --all\nYay, all your tests passed!\n```\n\n`just` has a ton of useful features, and many improvements over `make`:\n\n- `just` is a command runner, not a build system, so it avoids much of\n  [`make`'s complexity and idiosyncrasies](#what-are-the-idiosyncrasies-of-make-that-just-avoids).\n  No need for `.PHONY` recipes!\n\n- Linux, MacOS, Windows, and other reasonable unices are supported with no\n  additional dependencies. (Although if your system doesn't have an `sh`,\n  you'll need to [choose a different shell](#shell).)\n\n- Errors are specific and informative, and syntax errors are reported along\n  with their source context.\n\n- Recipes can accept [command line arguments](#recipe-parameters).\n\n- Wherever possible, errors are resolved statically. Unknown recipes and\n  circular dependencies are reported before anything runs.\n\n- `just` [loads `.env` files](#dotenv-settings), making it easy to populate\n  environment variables.\n\n- Recipes can be [listed from the command line](#listing-available-recipes).\n\n- Command line completion scripts are\n  [available for most popular shells](#shell-completion-scripts).\n\n- Recipes can be written in\n  [arbitrary languages](#shebang-recipes), like Python or NodeJS.\n\n- `just` can be invoked from any subdirectory, not just the directory that\n  contains the `justfile`.\n\n- And [much more](https://just.systems/man/en/)!\n\nIf you need help with `just` please feel free to open an issue or ping me on\n[Discord](https://discord.gg/ezYScXR). Feature requests and bug reports are\nalways welcome!\n\nInstallation\n------------\n\n### Prerequisites\n\n`just` should run on any system with a reasonable `sh`, including Linux, MacOS,\nand the BSDs.\n\nOn Windows, `just` works with the `sh` provided by\n[Git for Windows](https://git-scm.com),\n[GitHub Desktop](https://desktop.github.com), or\n[Cygwin](http://www.cygwin.com).\n\nIf you'd rather not install `sh`, you can use the `shell` setting to use the\nshell of your choice.\n\nLike PowerShell:\n\n```just\n# use PowerShell instead of sh:\nset shell := [\"powershell.exe\", \"-c\"]\n\nhello:\n  Write-Host \"Hello, world!\"\n```\n\n\u2026or `cmd.exe`:\n\n```just\n# use cmd.exe instead of sh:\nset shell := [\"cmd.exe\", \"/c\"]\n\nlist:\n  dir\n```\n\nYou can also set the shell using command-line arguments. For example, to use\nPowerShell, launch `just` with `--shell powershell.exe --shell-arg -c`.\n\n(PowerShell is installed by default on Windows 7 SP1 and Windows Server 2008 R2\nS1 and later, and `cmd.exe` is quite fiddly, so PowerShell is recommended for\nmost Windows users.)\n\n### Packages\n\n#### Cross-platform\n\n<table>\n  <thead>\n    <tr>\n      <th>Package Manager</th>\n      <th>Package</th>\n      <th>Command</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=https://github.com/alexellis/arkade>arkade</a></td>\n      <td>just</td>\n      <td><code>arkade get just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://asdf-vm.com>asdf</a></td>\n      <td><a href=https://github.com/olofvndrhr/asdf-just>just</a></td>\n      <td>\n        <code>asdf plugin add just</code><br>\n        <code>asdf install just &lt;version&gt;</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=https://www.rust-lang.org>Cargo</a></td>\n      <td><a href=https://crates.io/crates/just>just</a></td>\n      <td><code>cargo install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://docs.conda.io/projects/conda/en/latest/index.html>Conda</a></td>\n      <td><a href=https://anaconda.org/conda-forge/just>just</a></td>\n      <td><code>conda install -c conda-forge just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://brew.sh>Homebrew</a></td>\n      <td><a href=https://formulae.brew.sh/formula/just>just</a></td>\n      <td><code>brew install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://nixos.org/nix/>Nix</a></td>\n      <td><a href=https://github.com/NixOS/nixpkgs/blob/master/pkgs/by-name/ju/just/package.nix>just</a></td>\n      <td><code>nix-env -iA nixpkgs.just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://www.npmjs.com/>npm</a></td>\n      <td><a href=https://www.npmjs.com/package/rust-just>rust-just</a></td>\n      <td><code>npm install -g rust-just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://pipx.pypa.io/stable/>pipx</a></td>\n      <td><a href=https://pypi.org/project/rust-just/>rust-just</a></td>\n      <td><code>pipx install rust-just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://snapcraft.io>Snap</a></td>\n      <td><a href=https://snapcraft.io/just>just</a></td>\n      <td><code>snap install --edge --classic just</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### BSD\n\n<table>\n  <thead>\n    <tr>\n      <th>Operating System</th>\n      <th>Package Manager</th>\n      <th>Package</th>\n      <th>Command</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=https://www.freebsd.org>FreeBSD</a></td>\n      <td><a href=https://www.freebsd.org/doc/handbook/pkgng-intro.html>pkg</a></td>\n      <td><a href=https://www.freshports.org/deskutils/just/>just</a></td>\n      <td><code>pkg install just</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### Linux\n\n<table>\n  <thead>\n    <tr>\n      <th>Operating System</th>\n      <th>Package Manager</th>\n      <th>Package</th>\n      <th>Command</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=https://alpinelinux.org>Alpine</a></td>\n      <td><a href=https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management>apk-tools</a></td>\n      <td><a href=https://pkgs.alpinelinux.org/package/edge/community/x86_64/just>just</a></td>\n      <td><code>apk add just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://www.archlinux.org>Arch</a></td>\n      <td><a href=https://wiki.archlinux.org/title/Pacman>pacman</a></td>\n      <td><a href=https://archlinux.org/packages/extra/x86_64/just/>just</a></td>\n      <td><code>pacman -S just</code></td>\n    </tr>\n    <tr>\n      <td>\n        <a href=https://debian.org>Debian 13 (unreleased)</a> and\n        <a href=https://ubuntu.com>Ubuntu 24.04</a> derivatives</td>\n      <td><a href=https://en.wikipedia.org/wiki/APT_(software)>apt</a></td>\n      <td><a href=https://packages.debian.org/trixie/just>just</a></td>\n      <td><code>apt install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://debian.org>Debian</a> and <a href=https://ubuntu.com>Ubuntu</a> derivatives</td>\n      <td><a href=https://mpr.makedeb.org>MPR</a></td>\n      <td><a href=https://mpr.makedeb.org/packages/just>just</a></td>\n      <td>\n        <code>git clone https://mpr.makedeb.org/just</code><br>\n        <code>cd just</code><br>\n        <code>makedeb -si</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=https://debian.org>Debian</a> and <a href=https://ubuntu.com>Ubuntu</a> derivatives</td>\n      <td><a href=https://docs.makedeb.org/prebuilt-mpr>Prebuilt-MPR</a></td>\n      <td><a href=https://mpr.makedeb.org/packages/just>just</a></td>\n      <td>\n        <sup><b>You must have the <a href=https://docs.makedeb.org/prebuilt-mpr/getting-started/#setting-up-the-repository>Prebuilt-MPR set up</a> on your system in order to run this command.</b></sup><br>\n        <code>apt install just</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=https://getfedora.org>Fedora</a></td>\n      <td><a href=https://dnf.readthedocs.io/en/latest/>DNF</a></td>\n      <td><a href=https://src.fedoraproject.org/rpms/rust-just>just</a></td>\n      <td><code>dnf install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://www.gentoo.org>Gentoo</a></td>\n      <td><a href=https://wiki.gentoo.org/wiki/Portage>Portage</a></td>\n      <td><a href=https://github.com/gentoo-mirror/guru/tree/master/dev-build/just>guru/dev-build/just</a></td>\n      <td>\n        <code>eselect repository enable guru</code><br>\n        <code>emerge --sync guru</code><br>\n        <code>emerge dev-build/just</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=https://nixos.org/nixos/>NixOS</a></td>\n      <td><a href=https://nixos.org/nix/>Nix</a></td>\n      <td><a href=https://github.com/NixOS/nixpkgs/blob/master/pkgs/by-name/ju/just/package.nix>just</a></td>\n      <td><code>nix-env -iA nixos.just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://opensuse.org>openSUSE</a></td>\n      <td><a href=https://en.opensuse.org/Portal:Zypper>Zypper</a></td>\n      <td><a href=https://build.opensuse.org/package/show/Base:System/just>just</a></td>\n      <td><code>zypper in just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://getsol.us>Solus</a></td>\n      <td><a href=https://getsol.us/articles/package-management/basics/en>eopkg</a></td>\n      <td><a href=https://dev.getsol.us/source/just/>just</a></td>\n      <td><code>eopkg install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://voidlinux.org>Void</a></td>\n      <td><a href=https://wiki.voidlinux.org/XBPS>XBPS</a></td>\n      <td><a href=https://github.com/void-linux/void-packages/blob/master/srcpkgs/just/template>just</a></td>\n      <td><code>xbps-install -S just</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### Windows\n\n<table>\n  <thead>\n    <tr>\n      <th>Package Manager</th>\n      <th>Package</th>\n      <th>Command</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=https://chocolatey.org>Chocolatey</a></td>\n      <td><a href=https://github.com/michidk/just-choco>just</a></td>\n      <td><code>choco install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://scoop.sh>Scoop</a></td>\n      <td><a href=https://github.com/ScoopInstaller/Main/blob/master/bucket/just.json>just</a></td>\n      <td><code>scoop install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=https://learn.microsoft.com/en-us/windows/package-manager/>Windows Package Manager</a></td>\n      <td><a href=https://github.com/microsoft/winget-pkgs/tree/master/manifests/c/Casey/Just>Casey/Just</a></td>\n      <td><code>winget install --id Casey.Just --exact</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### macOS\n\n<table>\n  <thead>\n    <tr>\n      <th>Package Manager</th>\n      <th>Package</th>\n      <th>Command</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=https://www.macports.org>MacPorts</a></td>\n      <td><a href=https://ports.macports.org/port/just/summary>just</a></td>\n      <td><code>port install just</code></td>\n    </tr>\n  </tbody>\n</table>\n\n![just package version table](https://repology.org/badge/vertical-allrepos/just.svg)\n\n### Pre-Built Binaries\n\nPre-built binaries for Linux, MacOS, and Windows can be found on\n[the releases page](https://github.com/casey/just/releases).\n\nYou can use the following command on Linux, MacOS, or Windows to download the\nlatest release, just replace `DEST` with the directory where you'd like to put\n`just`:\n\n```console\ncurl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to DEST\n```\n\nFor example, to install `just` to `~/bin`:\n\n```console\n# create ~/bin\nmkdir -p ~/bin\n\n# download and extract just to ~/bin/just\ncurl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin\n\n# add `~/bin` to the paths that your shell searches for executables\n# this line should be added to your shells initialization file,\n# e.g. `~/.bashrc` or `~/.zshrc`\nexport PATH=\"$PATH:$HOME/bin\"\n\n# just should now be executable\njust --help\n```\n\nNote that `install.sh` may fail on GitHub Actions, or in other environments\nwhere many machines share IP addresses. `install.sh` calls GitHub APIs in order\nto determine the latest version of `just` to install, and those API calls are\nrate-limited on a per-IP basis. To make `install.sh` more reliable in such\ncircumstances, pass a specific tag to install with `--tag`.\n\nAnother way to avoid rate-limiting is to pass a GitHub authentication token to\n`install.sh` as an environment variable named `GITHUB_TOKEN`, allowing it to\nauthenticate its requests.\n\n[Releases](https://github.com/casey/just/releases) include a `SHA256SUM` file\nwhich can be used to verify the integrity of pre-built binary archives.\n\nTo verify a release, download the pre-built binary archive along with the\n`SHA256SUM` file and run:\n\n```sh\nshasum --algorithm 256 --ignore-missing --check SHA256SUMS\n```\n\n### GitHub Actions\n\n`just` can be installed on GitHub Actions in a few ways.\n\nUsing package managers pre-installed on GitHub Actions runners on MacOS with\n`brew install just`, and on Windows with `choco install just`.\n\nWith [extractions/setup-just](https://github.com/extractions/setup-just):\n\n```yaml\n- uses: extractions/setup-just@v3\n  with:\n    just-version: 1.5.0  # optional semver specification, otherwise latest\n```\n\nOr with [taiki-e/install-action](https://github.com/taiki-e/install-action):\n\n```yaml\n- uses: taiki-e/install-action@just\n```\n\n### Release RSS Feed\n\nAn [RSS feed](https://en.wikipedia.org/wiki/RSS) of `just` releases is available [here](https://github.com/casey/just/releases.atom).\n\n### Node.js Installation\n\n[just-install](https://npmjs.com/package/just-install) can be used to automate\ninstallation of `just` in Node.js applications.\n\n`just` is a great, more robust alternative to npm scripts. If you want to\ninclude `just` in the dependencies of a Node.js application, `just-install`\nwill install a local, platform-specific binary as part of the `npm install`\ncommand. This removes the need for every developer to install `just`\nindependently using one of the processes mentioned above. After installation,\nthe `just` command will work in npm scripts or with npx. It's great for teams\nwho want to make the set up process for their project as easy as possible.\n\nFor more information, see the\n[just-install README file](https://github.com/brombal/just-install#readme).\n\nBackwards Compatibility\n-----------------------\n\nWith the release of version 1.0, `just` features a strong commitment to\nbackwards compatibility and stability.\n\nFuture releases will not introduce backwards incompatible changes that make\nexisting `justfile`s stop working, or break working invocations of the\ncommand-line interface.\n\nThis does not, however, preclude fixing outright bugs, even if doing so might\nbreak `justfiles` that rely on their behavior.\n\nThere will never be a `just` 2.0. Any desirable backwards-incompatible changes\nwill be opt-in on a per-`justfile` basis, so users may migrate at their\nleisure.\n\nFeatures that aren't yet ready for stabilization are marked as unstable and may\nbe changed or removed at any time. Using unstable features produces an error by\ndefault, which can be suppressed with by passing the `--unstable` flag,\n`set unstable`, or setting the environment variable `JUST_UNSTABLE`, to any\nvalue other than `false`, `0`, or the empty string.\n\nEditor Support\n--------------\n\n`justfile` syntax is close enough to `make` that you may want to tell your\neditor to use `make` syntax highlighting for `just`.\n\n### Vim and Neovim\n\nVim version 9.1.1042 or better and Neovim version 0.11 or better support\nJustfile syntax highlighting out of the box, thanks to\n[pbnj](https://github.com/pbnj).\n\n#### `vim-just`\n\nThe [vim-just](https://github.com/NoahTheDuke/vim-just) plugin provides syntax\nhighlighting for `justfile`s.\n\nInstall it with your favorite package manager, like\n[Plug](https://github.com/junegunn/vim-plug):\n\n```vim\ncall plug#begin()\n\nPlug 'NoahTheDuke/vim-just'\n\ncall plug#end()\n```\n\nOr with Vim's built-in package support:\n\n```console\nmkdir -p ~/.vim/pack/vendor/start\ncd ~/.vim/pack/vendor/start\ngit clone https://github.com/NoahTheDuke/vim-just.git\n```\n\n#### `tree-sitter-just`\n\n[tree-sitter-just](https://github.com/IndianBoy42/tree-sitter-just) is an\n[Nvim Treesitter](https://github.com/nvim-treesitter/nvim-treesitter) plugin\nfor Neovim.\n\n#### Makefile Syntax Highlighting\n\nVim's built-in makefile syntax highlighting isn't perfect for `justfile`s, but\nit's better than nothing. You can put the following in `~/.vim/filetype.vim`:\n\n```vimscript\nif exists(\"did_load_filetypes\")\n  finish\nendif\n\naugroup filetypedetect\n  au BufNewFile,BufRead justfile setf make\naugroup END\n```\n\nOr add the following to an individual `justfile` to enable `make` mode on a\nper-file basis:\n\n```text\n# vim: set ft=make :\n```\n\n### Emacs\n\n[just-mode](https://github.com/leon-barrett/just-mode.el) provides syntax\nhighlighting and automatic indentation of `justfile`s. It is available on\n[MELPA](https://melpa.org/) as [just-mode](https://melpa.org/#/just-mode).\n\n[justl](https://github.com/psibi/justl.el) provides commands for executing and\nlisting recipes.\n\nYou can add the following to an individual `justfile` to enable `make` mode on\na per-file basis:\n\n```text\n# Local Variables:\n# mode: makefile\n# End:\n```\n\n### Visual Studio Code\n\nAn extension for VS Code is [available here](https://github.com/nefrob/vscode-just).\n\nUnmaintained VS Code extensions include\n[skellock/vscode-just](https://github.com/skellock/vscode-just) and\n[sclu1034/vscode-just](https://github.com/sclu1034/vscode-just).\n\n### JetBrains IDEs\n\nA plugin for JetBrains IDEs by [linux_china](https://github.com/linux-china) is\n[available here](https://plugins.jetbrains.com/plugin/18658-just).\n\n### Kakoune\n\nKakoune supports `justfile` syntax highlighting out of the box, thanks to\nTeddyDD.\n\n### Helix\n\n[Helix](https://helix-editor.com/) supports `justfile` syntax highlighting\nout-of-the-box since version 23.05.\n\n### Sublime Text\n\nThe [Just package](https://github.com/nk9/just_sublime) by\n[nk9](https://github.com/nk9) with `just` syntax and some other tools is\navailable on [PackageControl](https://packagecontrol.io/packages/Just).\n\n### Micro\n\n[Micro](https://micro-editor.github.io/) supports Justfile syntax highlighting\nout of the box, thanks to [tomodachi94](https://github.com/tomodachi94).\n\n### Zed\n\nThe [zed-just](https://github.com/jackTabsCode/zed-just/) extension by\n[jackTabsCode](https://github.com/jackTabsCode) is avilable on the\n[Zed extensions page](https://zed.dev/extensions?query=just).\n\n### Other Editors\n\nFeel free to send me the commands necessary to get syntax highlighting working\nin your editor of choice so that I may include them here.\n\nQuick Start\n-----------\n\nSee the installation section for how to install `just` on your computer. Try\nrunning `just --version` to make sure that it's installed correctly.\n\nFor an overview of the syntax, check out\n[this cheatsheet](https://cheatography.com/linux-china/cheat-sheets/justfile/).\n\nOnce `just` is installed and working, create a file named `justfile` in the\nroot of your project with the following contents:\n\n```just\nrecipe-name:\n  echo 'This is a recipe!'\n\n# this is a comment\nanother-recipe:\n  @echo 'This is another recipe.'\n```\n\nWhen you invoke `just` it looks for file `justfile` in the current directory\nand upwards, so you can invoke it from any subdirectory of your project.\n\nThe search for a `justfile` is case insensitive, so any case, like `Justfile`,\n`JUSTFILE`, or `JuStFiLe`, will work. `just` will also look for files with the\nname `.justfile`, in case you'd like to hide a `justfile`.\n\nRunning `just` with no arguments runs the first recipe in the `justfile`:\n\n```console\n$ just\necho 'This is a recipe!'\nThis is a recipe!\n```\n\nOne or more arguments specify the recipe(s) to run:\n\n```console\n$ just another-recipe\nThis is another recipe.\n```\n\n`just` prints each command to standard error before running it, which is why\n`echo 'This is a recipe!'` was printed. This is suppressed for lines starting\nwith `@`, which is why `echo 'This is another recipe.'` was not printed.\n\nRecipes stop running if a command fails. Here `cargo publish` will only run if\n`cargo test` succeeds:\n\n```just\npublish:\n  cargo test\n  # tests passed, time to publish!\n  cargo publish\n```\n\nRecipes can depend on other recipes. Here the `test` recipe depends on the\n`build` recipe, so `build` will run before `test`:\n\n```just\nbuild:\n  cc main.c foo.c bar.c -o main\n\ntest: build\n  ./test\n\nsloc:\n  @echo \"`wc -l *.c` lines of code\"\n```\n\n```console\n$ just test\ncc main.c foo.c bar.c -o main\n./test\ntesting\u2026 all tests passed!\n```\n\nRecipes without dependencies will run in the order they're given on the command\nline:\n\n```console\n$ just build sloc\ncc main.c foo.c bar.c -o main\n1337 lines of code\n```\n\nDependencies will always run first, even if they are passed after a recipe that\ndepends on them:\n\n```console\n$ just test build\ncc main.c foo.c bar.c -o main\n./test\ntesting\u2026 all tests passed!\n```\n\nRecipes may depend on recipes in submodules:\n\n```justfile\nmod foo\n\nbaz: foo::bar\n```\n\nExamples\n--------\n\nA variety of `justfile`s can be found in the\n[examples directory](https://github.com/casey/just/tree/master/examples) and on\n[GitHub](https://github.com/search?q=path%3A**%2Fjustfile&type=code).\n\nFeatures\n--------\n\n### The Default Recipe\n\nWhen `just` is invoked without a recipe, it runs the first recipe in the\n`justfile`. This recipe might be the most frequently run command in the\nproject, like running the tests:\n\n```just\ntest:\n  cargo test\n```\n\nYou can also use dependencies to run multiple recipes by default:\n\n```just\ndefault: lint build test\n\nbuild:\n  echo Building\u2026\n\ntest:\n  echo Testing\u2026\n\nlint:\n  echo Linting\u2026\n```\n\nIf no recipe makes sense as the default recipe, you can add a recipe to the\nbeginning of your `justfile` that lists the available recipes:\n\n```just\ndefault:\n  just --list\n```\n\n### Listing Available Recipes\n\nRecipes can be listed in alphabetical order with `just --list`:\n\n```console\n$ just --list\nAvailable recipes:\n    build\n    test\n    deploy\n    lint\n```\n\nRecipes in [submodules](#modules1190) can be listed with `just --list PATH`,\nwhere `PATH` is a space- or `::`-separated module path:\n\n```\n$ cat justfile\nmod foo\n$ cat foo.just\nmod bar\n$ cat bar.just\nbaz:\n$ just foo bar\nAvailable recipes:\n    baz\n$ just foo::bar\nAvailable recipes:\n    baz\n```\n\n`just --summary` is more concise:\n\n```console\n$ just --summary\nbuild test deploy lint\n```\n\nPass `--unsorted` to print recipes in the order they appear in the `justfile`:\n\n```just\ntest:\n  echo 'Testing!'\n\nbuild:\n  echo 'Building!'\n```\n\n```console\n$ just --list --unsorted\nAvailable recipes:\n    test\n    build\n```\n\n```console\n$ just --summary --unsorted\ntest build\n```\n\nIf you'd like `just` to default to listing the recipes in the `justfile`, you\ncan use this as your default recipe:\n\n```just\ndefault:\n  @just --list\n```\n\nNote that you may need to add `--justfile {{justfile()}}` to the line above.\nWithout it, if you executed `just -f /some/distant/justfile -d .` or\n`just -f ./non-standard-justfile`, the plain `just --list` inside the recipe\nwould not necessarily use the file you provided. It would try to find a\njustfile in your current path, maybe even resulting in a `No justfile found`\nerror.\n\nThe heading text can be customized with `--list-heading`:\n\n```console\n$ just --list --list-heading $'Cool stuff\u2026\\n'\nCool stuff\u2026\n    test\n    build\n```\n\nAnd the indentation can be customized with `--list-prefix`:\n\n```console\n$ just --list --list-prefix \u00b7\u00b7\u00b7\u00b7\nAvailable recipes:\n\u00b7\u00b7\u00b7\u00b7test\n\u00b7\u00b7\u00b7\u00b7build\n```\n\nThe argument to `--list-heading` replaces both the heading and the newline\nfollowing it, so it should contain a newline if non-empty. It works this way so\nyou can suppress the heading line entirely by passing the empty string:\n\n```console\n$ just --list --list-heading ''\n    test\n    build\n```\n\n### Invoking Multiple Recipes\n\nMultiple recipes may be invoked on the command line at once:\n\n```just\nbuild:\n  make web\n\nserve:\n  python3 -m http.server -d out 8000\n```\n\n```console\n$ just build serve\nmake web\npython3 -m http.server -d out 8000\n```\n\nKeep in mind that recipes with parameters will swallow arguments, even if they\nmatch the names of other recipes:\n\n```just\nbuild project:\n  make {{project}}\n\nserve:\n  python3 -m http.server -d out 8000\n```\n\n```console\n$ just build serve\nmake: *** No rule to make target `serve'.  Stop.\n```\n\nThe `--one` flag can be used to restrict command-line invocations to a single\nrecipe:\n\n```console\n$ just --one build serve\nerror: Expected 1 command-line recipe invocation but found 2.\n```\n\n### Working Directory\n\nBy default, recipes run with the working directory set to the directory that\ncontains the `justfile`.\n\nThe `[no-cd]` attribute can be used to make recipes run with the working\ndirectory set to directory in which `just` was invoked.\n\n```just\n@foo:\n  pwd\n\n[no-cd]\n@bar:\n  pwd\n```\n\n```console\n$ cd subdir\n$ just foo\n/\n$ just bar\n/subdir\n```\n\nYou can override the working directory for all recipes with\n`set working-directory := '\u2026'`:\n\n```just\nset working-directory := 'bar'\n\n@foo:\n  pwd\n```\n\n```console\n$ pwd\n/home/bob\n$ just foo\n/home/bob/bar\n```\n\nYou can override the working directory for a specific recipe with the\n`working-directory` attribute<sup>1.38.0</sup>:\n\n```just\n[working-directory: 'bar']\n@foo:\n  pwd\n```\n\n```console\n$ pwd\n/home/bob\n$ just foo\n/home/bob/bar\n```\n\nThe argument to the `working-directory` setting or `working-directory`\nattribute may be absolute or relative. If it is relative it is interpreted\nrelative to the default working directory.\n\n### Aliases\n\nAliases allow recipes to be invoked on the command line with alternative names:\n\n```just\nalias b := build\n\nbuild:\n  echo 'Building!'\n```\n\n```console\n$ just b\necho 'Building!'\nBuilding!\n```\n\nThe target of an alias may be a recipe in a submodule:\n\n```justfile\nmod foo\n\nalias baz := foo::bar\n```\n\n### Settings\n\nSettings control interpretation and execution. Each setting may be specified at\nmost once, anywhere in the `justfile`.\n\nFor example:\n\n```just\nset shell := [\"zsh\", \"-cu\"]\n\nfoo:\n  # this line will be run as `zsh -cu 'ls **/*.txt'`\n  ls **/*.txt\n```\n\n#### Table of Settings\n\n| Name | Value | Default | Description |\n|------|-------|---------|-------------|\n| `allow-duplicate-recipes` | boolean | `false` | Allow recipes appearing later in a `justfile` to override earlier recipes with the same name. |\n| `allow-duplicate-variables` | boolean | `false` | Allow variables appearing later in a `justfile` to override earlier variables with the same name. |\n| `dotenv-filename` | string | - | Load a `.env` file with a custom name, if present. |\n| `dotenv-load` | boolean | `false` | Load a `.env` file, if present. |\n| `dotenv-override` | boolean | `false` | Override existing environment variables with values from the `.env` file. |\n| `dotenv-path` | string | - | Load a `.env` file from a custom path and error if not present. Overrides `dotenv-filename`. |\n| `dotenv-required` | boolean | `false` | Error if a `.env` file isn't found. |\n| `export` | boolean | `false` | Export all variables as environment variables. |\n| `fallback` | boolean | `false` | Search `justfile` in parent directory if the first recipe on the command line is not found. |\n| `ignore-comments` | boolean | `false` | Ignore recipe lines beginning with `#`. |\n| `positional-arguments` | boolean | `false` | Pass positional arguments. |\n| `quiet` | boolean | `false` | Disable echoing recipe lines before executing. |\n| `script-interpreter`<sup>1.33.0</sup> | `[COMMAND, ARGS\u2026]` | `['sh', '-eu']` | Set command used to invoke recipes with empty `[script]` attribute. |\n| `shell` | `[COMMAND, ARGS\u2026]` | - | Set command used to invoke recipes and evaluate backticks. |\n| `tempdir` | string | - | Create temporary directories in `tempdir` instead of the system default temporary directory. |\n| `unstable`<sup>1.31.0</sup> | boolean | `false` | Enable unstable features. |\n| `windows-powershell` | boolean | `false` | Use PowerShell on Windows as default shell. (Deprecated. Use `windows-shell` instead. |\n| `windows-shell` | `[COMMAND, ARGS\u2026]` | - | Set the command used to invoke recipes and evaluate backticks. |\n| `working-directory`<sup>1.33.0</sup> | string | - | Set the working directory for recipes and backticks, relative to the default working directory. |\n\nBoolean settings can be written as:\n\n```justfile\nset NAME\n```\n\nWhich is equivalent to:\n\n```justfile\nset NAME := true\n```\n\n#### Allow Duplicate Recipes\n\nIf `allow-duplicate-recipes` is set to `true`, defining multiple recipes with\nthe same name is not an error and the last definition is used. Defaults to\n`false`.\n\n```just\nset allow-duplicate-recipes\n\n@foo:\n  echo foo\n\n@foo:\n  echo bar\n```\n\n```console\n$ just foo\nbar\n```\n\n#### Allow Duplicate Variables\n\nIf `allow-duplicate-variables` is set to `true`, defining multiple variables\nwith the same name is not an error and the last definition is used. Defaults to\n`false`.\n\n```just\nset allow-duplicate-variables\n\na := \"foo\"\na := \"bar\"\n\n@foo:\n  echo {{a}}\n```\n\n```console\n$ just foo\nbar\n```\n\n#### Dotenv Settings\n\nIf any of `dotenv-load`, `dotenv-filename`, `dotenv-override`, `dotenv-path`,\nor `dotenv-required` are set, `just` will try to load environment variables\nfrom a file.\n\nIf `dotenv-path` is set, `just` will look for a file at the given path, which\nmay be absolute, or relative to the working directory.\n\nThe command-line option `--dotenv-path`, short form `-E`, can be used to set or\noverride `dotenv-path` at runtime.\n\nIf `dotenv-filename` is set `just` will look for a file at the given path,\nrelative to the working directory and each of its ancestors.\n\nIf `dotenv-filename` is not set, but `dotenv-load` or `dotenv-required` are\nset, just will look for a file named `.env`, relative to the working directory\nand each of its ancestors.\n\n`dotenv-filename` and `dotenv-path` are similar, but `dotenv-path` is only\nchecked relative to the working directory, whereas `dotenv-filename` is checked\nrelative to the working directory and each of its ancestors.\n\nIt is not an error if an environment file is not found, unless\n`dotenv-required` is set.\n\nThe loaded variables are environment variables, not `just` variables, and so\nmust be accessed using `$VARIABLE_NAME` in recipes and backticks.\n\nIf `dotenv-override` is set, variables from the environment file will override\nexisting environment variables.\n\nFor example, if your `.env` file contains:\n\n```console\n# a comment, will be ignored\nDATABASE_ADDRESS=localhost:6379\nSERVER_PORT=1337\n```\n\nAnd your `justfile` contains:\n\n```just\nset dotenv-load\n\nserve:\n  @echo \"Starting server with database $DATABASE_ADDRESS on port $SERVER_PORT\u2026\"\n  ./server --database $DATABASE_ADDRESS --port $SERVER_PORT\n```\n\n`just serve` will output:\n\n```console\n$ just serve\nStarting server with database localhost:6379 on port 1337\u2026\n./server --database $DATABASE_ADDRESS --port $SERVER_PORT\n```\n\n#### Export\n\nThe `export` setting causes all `just` variables to be exported as environment\nvariables. Defaults to `false`.\n\n```just\nset export\n\na := \"hello\"\n\n@foo b:\n  echo $a\n  echo $b\n```\n\n```console\n$ just foo goodbye\nhello\ngoodbye\n```\n\n#### Positional Arguments\n\nIf `positional-arguments` is `true`, recipe arguments will be passed as\npositional arguments to commands. For linewise recipes, argument `$0` will be\nthe name of the recipe.\n\nFor example, running this recipe:\n\n```just\nset positional-arguments\n\n@foo bar:\n  echo $0\n  echo $1\n```\n\nWill produce the following output:\n\n```console\n$ just foo hello\nfoo\nhello\n```\n\nWhen using an `sh`-compatible shell, such as `bash` or `zsh`, `$@` expands to\nthe positional arguments given to the recipe, starting from one. When used\nwithin double quotes as `\"$@\"`, arguments including whitespace will be passed\non as if they were double-quoted. That is, `\"$@\"` is equivalent to `\"$1\" \"$2\"`\u2026\nWhen there are no positional parameters, `\"$@\"` and `$@` expand to nothing\n(i.e., they are removed).\n\nThis example recipe will print arguments one by one on separate lines:\n\n```just\nset positional-arguments\n\n@test *args='':\n  bash -c 'while (( \"$#\" )); do echo - $1; shift; done' -- \"$@\"\n```\n\nRunning it with _two_ arguments:\n\n```console\n$ just test foo \"bar baz\"\n- foo\n- bar baz\n```\n\nPositional arguments may also be turned on on a per-recipe basis with the\n`[positional-arguments]` attribute<sup>1.29.0</sup>:\n\n```just\n[positional-arguments]\n@foo bar:\n  echo $0\n  echo $1\n```\n\nNote that PowerShell does not handle positional arguments in the same way as\nother shells, so turning on positional arguments will likely break recipes that\nuse PowerShell.\n\nIf using PowerShell 7.4 or better, the `-CommandWithArgs` flag will make\npositional arguments work as expected:\n\n```just\nset shell := ['pwsh.exe', '-CommandWithArgs']\nset positional-arguments\n\nprint-args a b c:\n  Write-Output @($args[1..($args.Count - 1)])\n```\n\n#### Shell\n\nThe `shell` setting controls the command used to invoke recipe lines and\nbackticks. Shebang recipes are unaffected. The default shell is `sh -cu`.\n\n```just\n# use python3 to execute recipe lines and backticks\nset shell := [\"python3\", \"-c\"]\n\n# use print to capture result of evaluation\nfoos := `print(\"foo\" * 4)`\n\nfoo:\n  print(\"Snake snake snake snake.\")\n  print(\"{{foos}}\")\n```\n\n`just` passes the command to be executed as an argument. Many shells will need\nan additional flag, often `-c`, to make them evaluate the first argument.\n\n##### Windows Shell\n\n`just` uses `sh` on Windows by default. To use a different shell on Windows,\nuse `windows-shell`:\n\n```just\nset windows-shell := [\"powershell.exe\", \"-NoLogo\", \"-Command\"]\n\nhello:\n  Write-Host \"Hello, world!\"\n```\n\nSee\n[powershell.just](https://github.com/casey/just/blob/master/examples/powershell.just)\nfor a justfile that uses PowerShell on all platforms.\n\n##### Windows PowerShell\n\n*`set windows-powershell` uses the legacy `powershell.exe` binary, and is no\nlonger recommended. See the `windows-shell` setting above for a more flexible\nway to control which shell is used on Windows.*\n\n`just` uses `sh` on Windows by default. To use `powershell.exe` instead, set\n`windows-powershell` to true.\n\n```just\nset windows-powershell := true\n\nhello:\n  Write-Host \"Hello, world!\"\n```\n\n##### Python 3\n\n```just\nset shell := [\"python3\", \"-c\"]\n```\n\n##### Bash\n\n```just\nset shell := [\"bash\", \"-uc\"]\n```\n\n##### Z Shell\n\n```just\nset shell := [\"zsh\", \"-uc\"]\n```\n\n##### Fish\n\n```just\nset shell := [\"fish\", \"-c\"]\n```\n\n##### Nushell\n\n```just\nset shell := [\"nu\", \"-c\"]\n```\n\nIf you want to change the default table mode to `light`:\n\n```just\nset shell := ['nu', '-m', 'light', '-c']\n```\n\n*[Nushell](https://github.com/nushell/nushell) was written in Rust, and **has\ncross-platform support for Windows / macOS and Linux**.*\n\n### Documentation Comments\n\nComments immediately preceding a recipe will appear in `just --list`:\n\n```just\n# build stuff\nbuild:\n  ./bin/build\n\n# test stuff\ntest:\n  ./bin/test\n```\n\n```console\n$ just --list\nAvailable recipes:\n    build # build stuff\n    test # test stuff\n```\n\nThe `[doc]` attribute can be used to set or suppress a recipe's doc comment:\n\n```just\n# This comment won't appear\n[doc('Build stuff')]\nbuild:\n  ./bin/build\n\n# This one won't either\n[doc]\ntest:\n  ./bin/test\n```\n\n```console\n$ just --list\nAvailable recipes:\n    build # Build stuff\n    test\n```\n\n### Expressions and Substitutions\n\nVarious operators and function calls are supported in expressions, which may be\nused in assignments, default recipe arguments, and inside recipe body `{{\u2026}}`\nsubstitutions.\n\n```just\ntmpdir  := `mktemp -d`\nversion := \"0.2.7\"\ntardir  := tmpdir / \"awesomesauce-\" + version\ntarball := tardir + \".tar.gz\"\nconfig  := quote(config_dir() / \".project-config\")\n\npublish:\n  rm -f {{tarball}}\n  mkdir {{tardir}}\n  cp README.md *.c {{ config }} {{tardir}}\n  tar zcvf {{tarball}} {{tardir}}\n  scp {{tarball}} me@server.com:release/\n  rm -rf {{tarball}} {{tardir}}\n```\n\n#### Concatenation\n\nThe `+` operator returns the left-hand argument concatenated with the\nright-hand argument:\n\n```just\nfoobar := 'foo' + 'bar'\n```\n\n#### Logical Operators\n\nThe logical operators `&&` and `||` can be used to coalesce string\nvalues<sup>1.37.0</sup>, similar to Python's `and` and `or`. These operators\nconsider the empty string `''` to be false, and all other strings to be true.\n\nThese operators are currently unstable.\n\nThe `&&` operator returns the empty string if the left-hand argument is the\nempty string, otherwise it returns the right-hand argument:\n\n```justfile\nfoo := '' && 'goodbye'      # ''\nbar := 'hello' && 'goodbye' # 'goodbye'\n```\n\nThe `||` operator returns the left-hand argument if it is non-empty, otherwise\nit returns the right-hand argument:\n\n```justfile\nfoo := '' || 'goodbye'      # 'goodbye'\nbar := 'hello' || 'goodbye' # 'hello'\n```\n\n#### Joining Paths\n\nThe `/` operator can be used to join two strings with a slash:\n\n```just\nfoo := \"a\" / \"b\"\n```\n\n```\n$ just --evaluate foo\na/b\n```\n\nNote that a `/` is added even if one is already present:\n\n```just\nfoo := \"a/\"\nbar := foo / \"b\"\n```\n\n```\n$ just --evaluate bar\na//b\n```\n\nAbsolute paths can also be constructed<sup>1.5.0</sup>:\n\n```just\nfoo := / \"b\"\n```\n\n```\n$ just --evaluate foo\n/b\n```\n\nThe `/` operator uses the `/` character, even on Windows. Thus, using the `/`\noperator should be avoided with paths that use universal naming convention\n(UNC), i.e., those that start with `\\?`, since forward slashes are not\nsupported with UNC paths.\n\n#### Escaping `{{`\n\nTo write a recipe containing `{{`, use `{{{{`:\n\n```just\nbraces:\n  echo 'I {{{{LOVE}} curly braces!'\n```\n\n(An unmatched `}}` is ignored, so it doesn't need to be escaped.)\n\nAnother option is to put all the text you'd like to escape inside of an\ninterpolation:\n\n```just\nbraces:\n  echo '{{'I {{LOVE}} curly braces!'}}'\n```\n\nYet another option is to use `{{ \"{{\" }}`:\n\n```just\nbraces:\n  echo 'I {{ \"{{\" }}LOVE}} curly braces!'\n```\n\n### Strings\n\n`'single'`, `\"double\"`, and `'''triple'''` quoted string literals are\nsupported. Unlike in recipe bodies, `{{\u2026}}` interpolations are not supported\ninside strings.\n\nDouble-quoted strings support escape sequences:\n\n```just\ncarriage-return   := \"\\r\"\ndouble-quote      := \"\\\"\"\nnewline           := \"\\n\"\nno-newline        := \"\\\n\"\nslash             := \"\\\\\"\ntab               := \"\\t\"\nunicode-codepoint := \"\\u{1F916}\"\n```\n\n```console\n$ just --evaluate\n\"arriage-return   := \"\ndouble-quote      := \"\"\"\nnewline           := \"\n\"\nno-newline        := \"\"\nslash             := \"\\\"\ntab               := \"     \"\nunicode-codepoint := \"\ud83e\udd16\"\n```\n\nThe unicode character escape sequence `\\u{\u2026}`<sup>1.36.0</sup> accepts up to\nsix hex digits.\n\nStrings may contain line breaks:\n\n```just\nsingle := '\nhello\n'\n\ndouble := \"\ngoodbye\n\"\n```\n\nSingle-quoted strings do not recognize escape sequences:\n\n```just\nescapes := '\\t\\n\\r\\\"\\\\'\n```\n\n```console\n$ just --evaluate\nescapes := \"\\t\\n\\r\\\"\\\\\"\n```\n\nIndented versions of both single- and double-quoted strings, delimited by\ntriple single- or double-quotes, are supported. Indented string lines are\nstripped of a leading line break, and leading whitespace common to all\nnon-blank lines:\n\n```just\n# this string will evaluate to `foo\\nbar\\n`\nx := '''\n  foo\n  bar\n'''\n\n# this string will evaluate to `abc\\n  wuv\\nxyz\\n`\ny := \"\"\"\n  abc\n    wuv\n  xyz\n\"\"\"\n```\n\nSimilar to unindented strings, indented double-quoted strings process escape\nsequences, and indented single-quoted strings ignore escape sequences. Escape\nsequence processing takes place after unindentation. The unindentation\nalgorithm does not take escape-sequence produced whitespace or newlines into\naccount.\n\nStrings prefixed with `x` are shell expanded<sup>1.27.0</sup>:\n\n```justfile\nfoobar := x'~/$FOO/${BAR}'\n```\n\n| Value | Replacement |\n|------|-------------|\n| `$VAR` | value of environment variable `VAR` |\n| `${VAR}` | value of environment variable `VAR` |\n| `${VAR:-DEFAULT}` | value of environment variable `VAR`, or `DEFAULT` if `VAR` is not set |\n| Leading `~` | path to current user's home directory |\n| Leading `~USER` | path to `USER`'s home directory |\n\nThis expansion is performed at compile time, so variables from `.env` files and\nexported `just` variables cannot be used. However, this allows shell expanded\nstrings to be used in places like settings and import paths, which cannot\ndepend on `just` variables and `.env` files.\n\n### Ignoring Errors\n\nNormally, if a command returns a non-zero exit status, execution will stop. To\ncontinue execution after a command, even if it fails, prefix the command with\n`-`:\n\n```just\nfoo:\n  -cat foo\n  echo 'Done!'\n```\n\n```console\n$ just foo\ncat foo\ncat: foo: No such file or directory\necho 'Done!'\nDone!\n```\n\n### Functions\n\n`just` provides many built-in functions for use in expressions, including\nrecipe body `{{\u2026}}` substitutions, assignments, and default parameter values.\n\nAll functions ending in `_directory` can be abbreviated to `_dir`. So\n`home_directory()` can also be written as `home_dir()`. In addition,\n`invocation_directory_native()` can be abbreviated to\n`invocation_dir_native()`.\n\n#### System Information\n\n- `arch()` \u2014 Instruction set architecture. Possible values are: `\"aarch64\"`,\n  `\"arm\"`, `\"asmjs\"`, `\"hexagon\"`, `\"mips\"`, `\"msp430\"`, `\"powerpc\"`,\n  `\"powerpc64\"`, `\"s390x\"`, `\"sparc\"`, `\"wasm32\"`, `\"x86\"`, `\"x86_64\"`, and\n  `\"xcore\"`.\n- `num_cpus()`<sup>1.15.0</sup> - Number of logical CPUs.\n- `os()` \u2014 Operating system. Possible values are: `\"android\"`, `\"bitrig\"`,\n  `\"dragonfly\"`, `\"emscripten\"`, `\"freebsd\"`, `\"haiku\"`, `\"ios\"`, `\"linux\"`,\n  `\"macos\"`, `\"netbsd\"`, `\"openbsd\"`, `\"solaris\"`, and `\"windows\"`.\n- `os_family()` \u2014 Operating system family; possible values are: `\"unix\"` and\n  `\"windows\"`.\n\nFor example:\n\n```just\nsystem-info:\n  @echo \"This is an {{arch()}} machine\".\n```\n\n```console\n$ just system-info\nThis is an x86_64 machine\n```\n\nThe `os_family()` function can be used to create cross-platform `justfile`s\nthat work on various operating systems. For an example, see\n[cross-platform.just](https://github.com/casey/just/blob/master/examples/cross-platform.just)\nfile.\n\n#### External Commands\n\n- `shell(command, args...)`<sup>1.27.0</sup> returns the standard output of shell script\n  `command` with zero or more positional arguments `args`. The shell used to\n  interpret `command` is the same shell that is used to evaluate recipe lines,\n  and can be changed with `set shell := [\u2026]`.\n\n  `command` is passed as the first argument, so if the command is `'echo $@'`,\n  the full command line, with the default shell command `sh -cu` and `args`\n  `'foo'` and `'bar'` will be:\n\n  ```\n  'sh' '-cu' 'echo $@' 'echo $@' 'foo' 'bar'\n  ```\n\n  This is so that `$@` works as expected, and `$1` refers to the first\n  argument. `$@` does not include the first positional argument, which is\n  expected to be the name of the program being run.\n\n```just\n# arguments can be variables or expressions\nfile := '/sys/class/power_supply/BAT0/status'\nbat0stat := shell('cat $1', file)\n\n# commands can be variables or expressions\ncommand := 'wc -l'\noutput := shell(command + ' \"$1\"', 'main.c')\n\n# arguments referenced by the shell command must be used\nempty := shell('echo', 'foo')\nfull := shell('echo $1', 'foo')\nerror := shell('echo $1')\n```\n\n```just\n# Using python as the shell. Since `python -c` sets `sys.argv[0]` to `'-c'`,\n# the first \"real\" positional argument will be `sys.argv[2]`.\nset shell := [\"python3\", \"-c\"]\nolleh := shell('import sys; print(sys.argv[2][::-1])', 'hello')\n```\n\n#### Environment Variables\n\n- `env(key)`<sup>1.15.0</sup> \u2014 Retrieves the environment variable with name `key`, aborting\n  if it is not present.\n\n```just\nhome_dir := env('HOME')\n\ntest:\n  echo \"{{home_dir}}\"\n```\n\n```console\n$ just\n/home/user1\n```\n\n- `env(key, default)`<sup>1.15.0</sup> \u2014 Retrieves the environment variable with\n  name `key`, returning `default` if it is not present.\n- `env_var(key)` \u2014 Deprecated alias for `env(key)`.\n- `env_var_or_default(key, default)` \u2014 Deprecated alias for `env(key, default)`.\n\nA default can be substituted for an empty environment variable value with the\n`||` operator, currently unstable:\n\n```just\nset unstable\n\nfoo := env('FOO') || 'DEFAULT_VALUE'\n```\n\n#### Executables\n\n- `require(name)`<sup>1.39.0</sup> \u2014 Search directories in the `PATH`\n  environment variable for the executable `name` and return its full path, or\n  halt with an error if no executable with `name` exists.\n\n  ```just\n  bash := require(\"bash\")\n\n  @test:\n      echo \"bash: '{{bash}}'\"\n  ```\n\n  ```console\n  $ just\n  bash: '/bin/bash'\n  ```\n\n- `which(name)`<sup>1.39.0</sup> \u2014 Search directories in the `PATH` environment\n  variable for the executable `name` and return its full path, or the empty\n  string if no executable with `name` exists. Currently unstable.\n\n\n  ```just\n  set unstable\n\n  bosh := which(\"bosh\")\n\n  @test:\n      echo \"bosh: '{{bosh}}'\"\n  ```\n\n  ```console\n  $ just\n  bosh: ''\n  ```\n\n#### Invocation Information\n\n- `is_dependency()` - Returns the string `true` if the current recipe is being\n  run as a dependency of another recipe, rather than being run directly,\n  otherwise returns the string `false`.\n\n#### Invocation Directory\n\n- `invocation_directory()` - Retrieves the absolute path to the current\n  directory when `just` was invoked, before  `just` changed it (chdir'd) prior\n  to executing commands. On Windows, `invocation_directory()` uses `cygpath` to\n  convert the invocation directory to a Cygwin-compatible `/`-separated path.\n  Use `invocation_directory_native()` to return the verbatim invocation\n  directory on all platforms.\n\nFor example, to call `rustfmt` on files just under the \"current directory\"\n(from the user/invoker's perspective), use the following rule:\n\n```just\nrustfmt:\n  find {{invocation_directory()}} -name \\*.rs -exec rustfmt {} \\;\n```\n\nAlternatively, if your command needs to be run from the current directory, you\ncould use (e.g.):\n\n```just\nbuild:\n  cd {{invocation_directory()}}; ./some_script_that_needs_to_be_run_from_here\n```\n\n- `invocation_directory_native()` - Retrieves the absolute path to the current\n  directory when `just` was invoked, before  `just` changed it (chdir'd) prior\n  to executing commands.\n\n#### Justfile and Justfile Directory\n\n- `justfile()` - Retrieves the path of the current `justfile`.\n\n- `justfile_directory()` - Retrieves the path of the parent directory of the\n  current `justfile`.\n\nFor example, to run a command relative to the location of the current\n`justfile`:\n\n```just\nscript:\n  {{justfile_directory()}}/scripts/some_script\n```\n\n#### Source and Source Directory\n\n- `source_file()`<sup>1.27.0</sup> - Retrieves the path of the current source file.\n\n- `source_directory()`<sup>1.27.0</sup> - Retrieves the path of the parent directory of the\n  current source file.\n\n`source_file()` and `source_directory()` behave the same as `justfile()` and\n`justfile_directory()` in the root `justfile`, but will return the path and\ndirectory, respectively, of the current `import` or `mod` source file when\ncalled from within an import or submodule.\n\n#### Just Executable\n\n- `just_executable()` - Absolute path to the `just` executable.\n\nFor example:\n\n```just\nexecutable:\n  @echo The executable is at: {{just_executable()}}\n```\n\n```console\n$ just\nThe executable is at: /bin/just\n```\n\n#### Just Process ID\n\n- `just_pid()` - Process ID of the `just` executable.\n\nFor example:\n\n```just\npid:\n  @echo The process ID is: {{ just_pid() }}\n```\n\n```console\n$ just\nThe process ID is: 420\n```\n\n#### String Manipulation\n\n- `append(suffix, s)`<sup>1.27.0</sup> Append `suffix` to whitespace-separated\n  strings in `s`. `append('/src', 'foo bar baz')` \u2192 `'foo/src bar/src baz/src'`\n- `prepend(prefix, s)`<sup>1.27.0</sup> Prepend `prefix` to\n  whitespace-separated strings in `s`. `prepend('src/', 'foo bar baz')` \u2192\n  `'src/foo src/bar src/baz'`\n- `encode_uri_component(s)`<sup>1.27.0</sup> - Percent-encode characters in `s`\n  except `[A-Za-z0-9_.!~*'()-]`, matching the behavior of the\n  [JavaScript `encodeURIComponent` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent).\n- `quote(s)` - Replace all single quotes with `'\\''` and prepend and append\n  single quotes to `s`. This is sufficient to escape special characters for\n  many shells, including most Bourne shell descendants.\n- `replace(s, from, to)` - Replace all occurrences of `from` in `s` to `to`.\n- `replace_regex(s, regex, replacement)` - Replace all occurrences of `regex`\n  in `s` to `replacement`. Regular expressions are provided by the\n  [Rust `regex` crate](https://docs.rs/regex/latest/regex/). See the\n  [syntax documentation](https://docs.rs/regex/latest/regex/#syntax) for usage\n  examples. Capture groups are supported. The `replacement` string uses\n  [Replacement string syntax](https://docs.rs/regex/latest/regex/struct.Regex.html#replacement-string-syntax).\n- `trim(s)` - Remove leading and trailing whitespace from `s`.\n- `trim_end(s)` - Remove trailing whitespace from `s`.\n- `trim_end_match(s, substring)` - Remove suffix of `s` matching `substring`.\n- `trim_end_matches(s, substring)` - Repeatedly remove suffixes of `s` matching\n  `substring`.\n- `trim_start(s)` - Remove leading whitespace from `s`.\n- `trim_start_match(s, substring)` - Remove prefix of `s` matching `substring`.\n- `trim_start_matches(s, substring)` - Repeatedly remove prefixes of `s`\n  matching `substring`.\n\n#### Case Conversion\n\n- `capitalize(s)`<sup>1.7.0</sup> - Convert first character of `s` to uppercase\n  and the rest to lowercase.\n- `kebabcase(s)`<sup>1.7.0</sup> - Convert `s` to `kebab-case`.\n- `lowercamelcase(s)`<sup>1.7.0</sup> - Convert `s` to `lowerCamelCase`.\n- `lowercase(s)` - Convert `s` to lowercase.\n- `shoutykebabcase(s)`<sup>1.7.0</sup> - Convert `s` to `SHOUTY-KEBAB-CASE`.\n- `shoutysnakecase(s)`<sup>1.7.0</sup> - Convert `s` to `SHOUTY_SNAKE_CASE`.\n- `snakecase(s)`<sup>1.7.0</sup> - Convert `s` to `snake_case`.\n- `titlecase(s)`<sup>1.7.0</sup> - Convert `s` to `Title Case`.\n- `uppercamelcase(s)`<sup>1.7.0</sup> - Convert `s` to `UpperCamelCase`.\n- `uppercase(s)` - Convert `s` to uppercase.\n\n#### Path Manipulation\n\n##### Fallible\n\n- `absolute_path(path)` - Absolute path to relative `path` in the working\n  directory. `absolute_path(\"./bar.txt\")` in directory `/foo` is\n  `/foo/bar.txt`.\n- `canonicalize(path)`<sup>1.24.0</sup> - Canonicalize `path` by resolving symlinks and removing\n  `.`, `..`, and extra `/`s where possible.\n- `extension(path)` - Extension of `path`. `extension(\"/foo/bar.txt\")` is\n  `txt`.\n- `file_name(path)` - File name of `path` with any leading directory components\n  removed. `file_name(\"/foo/bar.txt\")` is `bar.txt`.\n- `file_stem(path)` - File name of `path` without extension.\n  `file_stem(\"/foo/bar.txt\")` is `bar`.\n- `parent_directory(path)` - Parent directory of `path`.\n  `parent_directory(\"/foo/bar.txt\")` is `/foo`.\n- `without_extension(path)` - `path` without extension.\n  `without_extension(\"/foo/bar.txt\")` is `/foo/bar`.\n\nThese functions can fail, for example if a path does not have an extension,\nwhich will halt execution.\n\n##### Infallible\n\n- `clean(path)` - Simplify `path` by removing extra path separators,\n  intermediate `.` components, and `..` where possible. `clean(\"foo//bar\")` is\n  `foo/bar`, `clean(\"foo/..\")` is `.`, `clean(\"foo/./bar\")` is `foo/bar`.\n- `join(a, b\u2026)` - *This function uses `/` on Unix and `\\` on Windows, which can\n  be lead to unwanted behavior. The `/` operator, e.g., `a / b`, which always\n  uses `/`, should be considered as a replacement unless `\\`s are specifically\n  desired on Windows.* Join path `a` with path `b`. `join(\"foo/bar\", \"baz\")` is\n  `foo/bar/baz`. Accepts two or more arguments.\n\n#### Filesystem Access\n\n- `path_exists(path)` - Returns `true` if the path points at an existing entity\n  and `false` otherwise. Traverses symbolic links, and returns `false` if the\n  path is inaccessible or points to a broken symlink.\n- `read(path)`<sup>1.39.0</sup> - Returns the content of file at `path` as\n  string.\n\n##### Error Reporting\n\n- `error(message)` - Abort execution and report error `message` to user.\n\n#### UUID and Hash Generation\n\n- `blake3(string)`<sup>1.25.0</sup> - Return [BLAKE3] hash of `string` as hexadecimal string.\n- `blake3_file(path)`<sup>1.25.0</sup> - Return [BLAKE3] hash of file at `path` as hexadecimal\n  string.\n- `sha256(string)` - Return the SHA-256 hash of `string` as hexadecimal string.\n- `sha256_file(path)` - Return SHA-256 hash of file at `path` as hexadecimal\n  string.\n- `uuid()` - Generate a random version 4 UUID.\n\n[BLAKE3]: https://github.com/BLAKE3-team/BLAKE3/\n\n#### Random\n\n- `choose(n, alphabet)`<sup>1.27.0</sup> - Generate a string of `n` randomly\n  selected characters from `alphabet`, which may not contain repeated\n  characters. For example, `choose('64', HEX)` will generate a random\n  64-character lowercase hex string.\n\n#### Datetime\n\n- `datetime(format)`<sup>1.30.0</sup> - Return local time with `format`.\n- `datetime_utc(format)`<sup>1.30.0</sup> - Return UTC time with `format`.\n\nThe arguments to `datetime` and `datetime_utc` are `strftime`-style format\nstrings, see the\n[`chrono` library docs](https://docs.rs/chrono/latest/chrono/format/strftime/index.html)\nfor details.\n\n#### Semantic Versions\n\n- `semver_matches(version, requirement)`<sup>1.16.0</sup> - Check whether a\n  [semantic `version`](https://semver.org), e.g., `\"0.1.0\"` matches a\n  `requirement`, e.g., `\">=0.1.0\"`, returning `\"true\"` if so and `\"false\"`\n  otherwise.\n\n#### Style\n\n- `style(name)`<sup>1.37.0</sup> - Return a named terminal display attribute\n  escape sequence used by `just`. Unlike terminal display attribute escape\n  sequence constants, which contain standard colors and styles, `style(name)`\n  returns an escape sequence used by `just` itself, and can be used to make\n  recipe output match `just`'s own output.\n\n  Recognized values for `name` are `'command'`, for echoed recipe lines,\n  `error`, and `warning`.\n\n  For example, to style an error message:\n\n  ```just\n  scary:\n    @echo '{{ style(\"error\") }}OH NO{{ NORMAL }}'\n  ```\n\n##### User Directories<sup>1.23.0</sup>\n\nThese functions return paths to user-specific directories for things like\nconfiguration, data, caches, executables, and the user's home directory.\n\nOn Unix, these functions follow the\n[XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html).\n\nOn MacOS and Windows, these functions return the system-specified user-specific\ndirectories. For example, `cache_directory()` returns `~/Library/Caches` on\nMacOS and `{FOLDERID_LocalAppData}` on Windows.\n\nSee the [`dirs`](https://docs.rs/dirs/latest/dirs/index.html) crate for more\ndetails.\n\n- `cache_directory()` - The user-specific cache directory.\n- `config_directory()` - The user-specific configuration directory.\n- `config_local_directory()` - The local user-specific configuration directory.\n- `data_directory()` - The user-specific data directory.\n- `data_local_directory()` - The local user-specific data directory.\n- `executable_directory()` - The user-specific executable directory.\n- `home_directory()` - The user's home directory.\n\nIf you would like to use XDG base directories on all platforms you can use the\n`env(\u2026)` function with the appropriate environment variable and fallback,\nalthough note that the XDG specification requires ignoring non-absolute paths,\nso for full compatibility with spec-compliant applications, you would need to\ndo:\n\n```just\nxdg_config_dir := if env('XDG_CONFIG_HOME', '') =~ '^/' {\n  env('XDG_CONFIG_HOME')\n} else {\n  home_directory() / '.config'\n}\n```\n\n### Constants\n\nA number of constants are predefined:\n\n| Name | Value | Value on Windows |\n|---|---|---|\n| `HEX`<sup>1.27.0</sup> | `\"0123456789abcdef\"` |  |\n| `HEXLOWER`<sup>1.27.0</sup> | `\"0123456789abcdef\"` |  |\n| `HEXUPPER`<sup>1.27.0</sup> | `\"0123456789ABCDEF\"` |  |\n| `PATH_SEP`<sup>1.41.0</sup> | `\"/\"` | \"\\\" |\n| `PATH_VAR_SEP`<sup>1.41.0</sup> | `\":\"` | \";\" |\n| `CLEAR`<sup>1.37.0</sup> | `\"\\ec\"` |  |\n| `NORMAL`<sup>1.37.0</sup> | `\"\\e[0m\"` |  |\n| `BOLD`<sup>1.37.0</sup> | `\"\\e[1m\"` |  |\n| `ITALIC`<sup>1.37.0</sup> | `\"\\e[3m\"` |  |\n| `UNDERLINE`<sup>1.37.0</sup> | `\"\\e[4m\"` |  |\n| `INVERT`<sup>1.37.0</sup> | `\"\\e[7m\"` |  |\n| `HIDE`<sup>1.37.0</sup> | `\"\\e[8m\"` |  |\n| `STRIKETHROUGH`<sup>1.37.0</sup> | `\"\\e[9m\"` |  |\n| `BLACK`<sup>1.37.0</sup> | `\"\\e[30m\"` |  |\n| `RED`<sup>1.37.0</sup> | `\"\\e[31m\"` |  |\n| `GREEN`<sup>1.37.0</sup> | `\"\\e[32m\"` |  |\n| `YELLOW`<sup>1.37.0</sup> | `\"\\e[33m\"` |  |\n| `BLUE`<sup>1.37.0</sup> | `\"\\e[34m\"` |  |\n| `MAGENTA`<sup>1.37.0</sup> | `\"\\e[35m\"` |  |\n| `CYAN`<sup>1.37.0</sup> | `\"\\e[36m\"` |  |\n| `WHITE`<sup>1.37.0</sup> | `\"\\e[37m\"` |  |\n| `BG_BLACK`<sup>1.37.0</sup> | `\"\\e[40m\"` |  |\n| `BG_RED`<sup>1.37.0</sup> | `\"\\e[41m\"` |  |\n| `BG_GREEN`<sup>1.37.0</sup> | `\"\\e[42m\"` |  |\n| `BG_YELLOW`<sup>1.37.0</sup> | `\"\\e[43m\"` |  |\n| `BG_BLUE`<sup>1.37.0</sup> | `\"\\e[44m\"` |  |\n| `BG_MAGENTA`<sup>1.37.0</sup> | `\"\\e[45m\"` |  |\n| `BG_CYAN`<sup>1.37.0</sup> | `\"\\e[46m\"` |  |\n| `BG_WHITE`<sup>1.37.0</sup> | `\"\\e[47m\"` |  |\n\n```just\n@foo:\n  echo {{HEX}}\n```\n\n```console\n$ just foo\n0123456789abcdef\n```\n\nConstants starting with `\\e` are\n[ANSI escape sequences](https://en.wikipedia.org/wiki/ANSI_escape_code).\n\n`CLEAR` clears the screen, similar to the `clear` command. The rest are of the\nform `\\e[Nm`, where `N` is an integer, and set terminal display attributes.\n\nTerminal display attribute escape sequences can be combined, for example text\nweight `BOLD`, text style `STRIKETHROUGH`, foreground color `CYAN`, and\nbackground color `BG_BLUE`. They should be followed by `NORMAL`, to reset the\nterminal back to normal.\n\nEscape sequences should be quoted, since `[` is treated as a special character\nby some shells.\n\n```just\n@foo:\n  echo '{{BOLD + STRIKETHROUGH + CYAN + BG_BLUE}}Hi!{{NORMAL}}'\n```\n\n### Attributes\n\nRecipes, `mod` statements, and aliases may be annotated with attributes that\nchange their behavior.\n\n| Name | Type | Description |\n|------|------|-------------|\n| `[confirm]`<sup>1.17.0</sup> | recipe | Require confirmation prior to executing recipe. |\n| `[confirm(PROMPT)]`<sup>1.23.0</sup> | recipe | Require confirmation prior to executing recipe with a custom prompt. |\n| `[doc(DOC)]`<sup>1.27.0</sup> | module, recipe | Set recipe or module's [documentation comment](#documentation-comments) to `DOC`. |\n| `[extension(EXT)]`<sup>1.32.0</sup> | recipe | Set shebang recipe script's file extension to `EXT`. `EXT` should include a period if one is desired. |\n| `[group(NAME)]`<sup>1.27.0</sup> | module, recipe | Put recipe or module in in [group](#groups) `NAME`. |\n| `[linux]`<sup>1.8.0</sup> | recipe | Enable recipe on Linux. |\n| `[macos]`<sup>1.8.0</sup> | recipe | Enable recipe on MacOS. |\n| `[metadata(METADATA)]`<sup>1.42.0</sup> | recipe | Attach `METADATA` to recipe. |\n| `[no-cd]`<sup>1.9.0</sup> | recipe | Don't change directory before executing recipe. |\n| `[no-exit-message]`<sup>1.7.0</sup> | recipe | Don't print an error message if recipe fails. |\n| `[no-quiet]`<sup>1.23.0</sup> | recipe | Override globally quiet recipes and always echo out the recipe. |\n| `[openbsd]`<sup>1.38.0</sup> | recipe | Enable recipe on OpenBSD. |\n| `[parallel]`<sup>1.42.0</sup> | recipe | Run this recipe's dependencies in parallel. |\n| `[positional-arguments]`<sup>1.29.0</sup> | recipe | Turn on [positional arguments](#positional-arguments) for this recipe. |\n| `[private]`<sup>1.10.0</sup> | alias, recipe | Make recipe, alias, or variable private. See [Private Recipes](#private-recipes). |\n| `[script]`<sup>1.33.0</sup> | recipe | Execute recipe as script. See [script recipes](#script-recipes) for more details. |\n| `[script(COMMAND)]`<sup>1.32.0</sup> | recipe | Execute recipe as a script interpreted by `COMMAND`. See [script recipes](#script-recipes) for more details. |\n| `[unix]`<sup>1.8.0</sup> | recipe | Enable recipe on Unixes. (Includes MacOS). |\n| `[windows]`<sup>1.8.0</sup> | recipe | Enable recipe on Windows. |\n| `[working-directory(PATH)]`<sup>1.38.0</sup> | recipe | Set recipe working directory. `PATH` may be relative or absolute. If relative, it is interpreted relative to the default working directory. |\n\nA recipe can have multiple attributes, either on multiple lines:\n\n```just\n[no-cd]\n[private]\nfoo:\n    echo \"foo\"\n```\n\nOr separated by commas on a single line<sup>1.14.0</sup>:\n\n```just\n[no-cd, private]\nfoo:\n    echo \"foo\"\n```\n\nAttributes with a single argument may be written with a colon:\n\n```just\n[group: 'bar']\nfoo:\n```\n\n#### Enabling and Disabling Recipes<sup>1.8.0</sup>\n\nThe `[linux]`, `[macos]`, `[unix]`, and `[windows]` attributes are\nconfiguration attributes. By default, recipes are always enabled. A recipe with\none or more configuration attributes will only be enabled when one or more of\nthose configurations is active.\n\nThis can be used to write `justfile`s that behave differently depending on\nwhich operating system they run on. The `run` recipe in this `justfile` will\ncompile and run `main.c`, using a different C compiler and using the correct\noutput binary name for that compiler depending on the operating system:\n\n```just\n[unix]\nrun:\n  cc main.c\n  ./a.out\n\n[windows]\nrun:\n  cl main.c\n  main.exe\n```\n\n#### Disabling Changing Directory<sup>1.9.0</sup>\n\n`just` normally executes recipes with the current directory set to the\ndirectory that contains the `justfile`. This can be disabled using the\n`[no-cd]` attribute. This can be used to create recipes which use paths\nrelative to the invocation directory, or which operate on the current\ndirectory.\n\nFor example, this `commit` recipe:\n\n```just\n[no-cd]\ncommit file:\n  git add {{file}}\n  git commit\n```\n\nCan be used with paths that are relative to the current directory, because\n`[no-cd]` prevents `just` from changing the current directory when executing\n`commit`.\n\n#### Requiring Confirmation for Recipes<sup>1.17.0</sup>\n\n`just` normally executes all recipes unless there is an error. The `[confirm]`\nattribute allows recipes require confirmation in the terminal prior to running.\nThis can be overridden by passing `--yes` to `just`, which will automatically\nconfirm any recipes marked by this attribute.\n\nRecipes dependent on a recipe that requires confirmation will not be run if the\nrelied upon recipe is not confirmed, as well as recipes passed after any recipe\nthat requires confirmation.\n\n```just\n[confirm]\ndelete-all:\n  rm -rf *\n```\n\n#### Custom Confirmation Prompt<sup>1.23.0</sup>\n\nThe default confirmation prompt can be overridden with `[confirm(PROMPT)]`:\n\n```just\n[confirm(\"Are you sure you want to delete everything?\")]\ndelete-everything:\n  rm -rf *\n```\n\n### Groups\n\nRecipes and modules may be annotated with one or more group names:\n\n```just\n[group('lint')]\njs-lint:\n    echo 'Running JS linter\u2026'\n\n[group('rust recipes')]\n[group('lint')]\nrust-lint:\n    echo 'Running Rust linter\u2026'\n\n[group('lint')]\ncpp-lint:\n  echo 'Running C++ linter\u2026'\n\n# not in any group\nemail-everyone:\n    echo 'Sending mass email\u2026'\n```\n\nRecipes are listed by group:\n\n```\n$ just --list\nAvailable recipes:\n    email-everyone # not in any group\n\n    [lint]\n    cpp-lint\n    js-lint\n    rust-lint\n\n    [rust recipes]\n    rust-lint\n```\n\n`just --list --unsorted` prints recipes in their justfile order within each group:\n\n```\n$ just --list --unsorted\nAvailable recipes:\n    (no group)\n    email-everyone # not in any group\n\n    [lint]\n    js-lint\n    rust-lint\n    cpp-lint\n\n    [rust recipes]\n    rust-lint\n```\n\nGroups can be listed with `--groups`:\n\n```\n$ just --groups\nRecipe groups:\n  lint\n  rust recipes\n```\n\nUse `just --groups --unsorted` to print groups in their justfile order.\n\n### Command Evaluation Using Backticks\n\nBackticks can be used to store the result of commands:\n\n```just\nlocalhost := `dumpinterfaces | cut -d: -f2 | sed 's/\\/.*//' | sed 's/ //g'`\n\nserve:\n  ./serve {{localhost}} 8080\n```\n\nIndented backticks, delimited by three backticks, are de-indented in the same\nmanner as indented strings:\n\n````just\n# This backtick evaluates the command `echo foo\\necho bar\\n`, which produces the value `foo\\nbar\\n`.\nstuff := ```\n    echo foo\n    echo bar\n  ```\n````\n\nSee the [Strings](#strings) section for details on unindenting.\n\nBackticks may not start with `#!`. This syntax is reserved for a future\nupgrade.\n\nThe [`shell(\u2026)` function](#external-commands) provides a more general mechanism\nto invoke external commands, including the ability to execute the contents of a\nvariable as a command, and to pass arguments to a command.\n\n### Conditional Expressions\n\n`if`/`else` expressions evaluate different branches depending on if two\nexpressions evaluate to the same value:\n\n```just\nfoo := if \"2\" == \"2\" { \"Good!\" } else { \"1984\" }\n\nbar:\n  @echo \"{{foo}}\"\n```\n\n```console\n$ just bar\nGood!\n```\n\nIt is also possible to test for inequality:\n\n```just\nfoo := if \"hello\" != \"goodbye\" { \"xyz\" } else { \"abc\" }\n\nbar:\n  @echo {{foo}}\n```\n\n```console\n$ just bar\nxyz\n```\n\nAnd match against regular expressions:\n\n```just\nfoo := if \"hello\" =~ 'hel+o' { \"match\" } else { \"mismatch\" }\n\nbar:\n  @echo {{foo}}\n```\n\n```console\n$ just bar\nmatch\n```\n\nRegular expressions are provided by the\n[regex crate](https://github.com/rust-lang/regex), whose syntax is documented on\n[docs.rs](https://docs.rs/regex/1.5.4/regex/#syntax). Since regular expressions\ncommonly use backslash escape sequences, consider using single-quoted string\nliterals, which will pass slashes to the regex parser unmolested.\n\nConditional expressions short-circuit, which means they only evaluate one of\ntheir branches. This can be used to make sure that backtick expressions don't\nrun when they shouldn't.\n\n```just\nfoo := if env_var(\"RELEASE\") == \"true\" { `get-something-from-release-database` } else { \"dummy-value\" }\n```\n\nConditionals can be used inside of recipes:\n\n```just\nbar foo:\n  echo {{ if foo == \"bar\" { \"hello\" } else { \"goodbye\" } }}\n```\n\nNote the space after the final `}`! Without the space, the interpolation will\nbe prematurely closed.\n\nMultiple conditionals can be chained:\n\n```just\nfoo := if \"hello\" == \"goodbye\" {\n  \"xyz\"\n} else if \"a\" == \"a\" {\n  \"abc\"\n} else {\n  \"123\"\n}\n\nbar:\n  @echo {{foo}}\n```\n\n```console\n$ just bar\nabc\n```\n\n### Stopping execution with error\n\nExecution can be halted with the `error` function. For example:\n\n```just\nfoo := if \"hello\" == \"goodbye\" {\n  \"xyz\"\n} else if \"a\" == \"b\" {\n  \"abc\"\n} else {\n  error(\"123\")\n}\n```\n\nWhich produce the following error when run:\n\n```\nerror: Call to function `error` failed: 123\n   |\n16 |   error(\"123\")\n```\n\n### Setting Variables from the Command Line\n\nVariables can be overridden from the command line.\n\n```just\nos := \"linux\"\n\ntest: build\n  ./test --test {{os}}\n\nbuild:\n  ./build {{os}}\n```\n\n```console\n$ just\n./build linux\n./test --test linux\n```\n\nAny number of arguments of the form `NAME=VALUE` can be passed before recipes:\n\n```console\n$ just os=plan9\n./build plan9\n./test --test plan9\n```\n\nOr you can use the `--set` flag:\n\n```console\n$ just --set os bsd\n./build bsd\n./test --test bsd\n```\n\n### Getting and Setting Environment Variables\n\n#### Exporting `just` Variables\n\nAssignments prefixed with the `export` keyword will be exported to recipes as\nenvironment variables:\n\n```just\nexport RUST_BACKTRACE := \"1\"\n\ntest:\n  # will print a stack trace if it crashes\n  cargo test\n```\n\nParameters prefixed with a `$` will be exported as environment variables:\n\n```just\ntest $RUST_BACKTRACE=\"1\":\n  # will print a stack trace if it crashes\n  cargo test\n```\n\nExported variables and parameters are not exported to backticks in the same scope.\n\n```just\nexport WORLD := \"world\"\n# This backtick will fail with \"WORLD: unbound variable\"\nBAR := `echo hello $WORLD`\n```\n\n```just\n# Running `just a foo` will fail with \"A: unbound variable\"\na $A $B=`echo $A`:\n  echo $A $B\n```\n\nWhen [export](#export) is set, all `just` variables are exported as environment\nvariables.\n\n#### Unexporting Environment Variables<sup>1.29.0</sup>\n\nEnvironment variables can be unexported with the `unexport keyword`:\n\n```just\nunexport FOO\n\n@foo:\n  echo $FOO\n```\n\n```\n$ export FOO=bar\n$ just foo\nsh: FOO: unbound variable\n```\n\n#### Getting Environment Variables from the environment\n\nEnvironment variables from the environment are passed automatically to the\nrecipes.\n\n```just\nprint_home_folder:\n  echo \"HOME is: '${HOME}'\"\n```\n\n```console\n$ just\nHOME is '/home/myuser'\n```\n\n#### Setting `just` Variables from Environment Variables\n\nEnvironment variables can be propagated to `just` variables using the `env()` function.\nSee\n[environment-variables](#environment-variables).\n\n### Recipe Parameters\n\nRecipes may have parameters. Here recipe `build` has a parameter called\n`target`:\n\n```just\nbuild target:\n  @echo 'Building {{target}}\u2026'\n  cd {{target}} && make\n```\n\nTo pass arguments on the command line, put them after the recipe name:\n\n```console\n$ just build my-awesome-project\nBuilding my-awesome-project\u2026\ncd my-awesome-project && make\n```\n\nTo pass arguments to a dependency, put the dependency in parentheses along with\nthe arguments:\n\n```just\ndefault: (build \"main\")\n\nbuild target:\n  @echo 'Building {{target}}\u2026'\n  cd {{target}} && make\n```\n\nVariables can also be passed as arguments to dependencies:\n\n```just\ntarget := \"main\"\n\n_build version:\n  @echo 'Building {{version}}\u2026'\n  cd {{version}} && make\n\nbuild: (_build target)\n```\n\nA command's arguments can be passed to dependency by putting the dependency in\nparentheses along with the arguments:\n\n```just\nbuild target:\n  @echo \"Building {{target}}\u2026\"\n\npush target: (build target)\n  @echo 'Pushing {{target}}\u2026'\n```\n\nParameters may have default values:\n\n```just\ndefault := 'all'\n\ntest target tests=default:\n  @echo 'Testing {{target}}:{{tests}}\u2026'\n  ./test --tests {{tests}} {{target}}\n```\n\nParameters with default values may be omitted:\n\n```console\n$ just test server\nTesting server:all\u2026\n./test --tests all server\n```\n\nOr supplied:\n\n```console\n$ just test server unit\nTesting server:unit\u2026\n./test --tests unit server\n```\n\nDefault values may be arbitrary expressions, but expressions containing the\n`+`, `&&`, `||`, or `/` operators must be parenthesized:\n\n```just\narch := \"wasm\"\n\ntest triple=(arch + \"-unknown-unknown\") input=(arch / \"input.dat\"):\n  ./test {{triple}}\n```\n\nThe last parameter of a recipe may be variadic, indicated with either a `+` or\na `*` before the argument name:\n\n```just\nbackup +FILES:\n  scp {{FILES}} me@server.com:\n```\n\nVariadic parameters prefixed with `+` accept _one or more_ arguments and expand\nto a string containing those arguments separated by spaces:\n\n```console\n$ just backup FAQ.md GRAMMAR.md\nscp FAQ.md GRAMMAR.md me@server.com:\nFAQ.md                  100% 1831     1.8KB/s   00:00\nGRAMMAR.md              100% 1666     1.6KB/s   00:00\n```\n\nVariadic parameters prefixed with `*` accept _zero or more_ arguments and\nexpand to a string containing those arguments separated by spaces, or an empty\nstring if no arguments are present:\n\n```just\ncommit MESSAGE *FLAGS:\n  git commit {{FLAGS}} -m \"{{MESSAGE}}\"\n```\n\nVariadic parameters can be assigned default values. These are overridden by\narguments passed on the command line:\n\n```just\ntest +FLAGS='-q':\n  cargo test {{FLAGS}}\n```\n\n`{{\u2026}}` substitutions may need to be quoted if they contain spaces. For\nexample, if you have the following recipe:\n\n```just\nsearch QUERY:\n  lynx https://www.google.com/?q={{QUERY}}\n```\n\nAnd you type:\n\n```console\n$ just search \"cat toupee\"\n```\n\n`just` will run the command `lynx https://www.google.com/?q=cat toupee`, which\nwill get parsed by `sh` as `lynx`, `https://www.google.com/?q=cat`, and\n`toupee`, and not the intended `lynx` and `https://www.google.com/?q=cat toupee`.\n\nYou can fix this by adding quotes:\n\n```just\nsearch QUERY:\n  lynx 'https://www.google.com/?q={{QUERY}}'\n```\n\nParameters prefixed with a `$` will be exported as environment variables:\n\n```just\nfoo $bar:\n  echo $bar\n```\n\n### Dependencies\n\nDependencies run before recipes that depend on them:\n\n```just\na: b\n  @echo A\n\nb:\n  @echo B\n```\n\n```\n$ just a\nB\nA\n```\n\nIn a given invocation of `just`, a recipe with the same arguments will only run\nonce, regardless of how many times it appears in the command-line invocation,\nor how many times it appears as a dependency:\n\n```just\na:\n  @echo A\n\nb: a\n  @echo B\n\nc: a\n  @echo C\n```\n\n```\n$ just a a a a a\nA\n$ just b c\nA\nB\nC\n```\n\nMultiple recipes may depend on a recipe that performs some kind of setup, and\nwhen those recipes run, that setup will only be performed once:\n\n```just\nbuild:\n  cc main.c\n\ntest-foo: build\n  ./a.out --test foo\n\ntest-bar: build\n  ./a.out --test bar\n```\n\n```\n$ just test-foo test-bar\ncc main.c\n./a.out --test foo\n./a.out --test bar\n```\n\nRecipes in a given run are only skipped when they receive the same arguments:\n\n```just\nbuild:\n  cc main.c\n\ntest TEST: build\n  ./a.out --test {{TEST}}\n```\n\n```\n$ just test foo test bar\ncc main.c\n./a.out --test foo\n./a.out --test bar\n```\n\n#### Running Recipes at the End of a Recipe\n\nNormal dependencies of a recipes always run before a recipe starts. That is to\nsay, the dependee always runs before the depender. These dependencies are\ncalled \"prior dependencies\".\n\nA recipe can also have subsequent dependencies, which run immediately after the\nrecipe and are introduced with an `&&`:\n\n```just\na:\n  echo 'A!'\n\nb: a && c d\n  echo 'B!'\n\nc:\n  echo 'C!'\n\nd:\n  echo 'D!'\n```\n\n\u2026running _b_ prints:\n\n```console\n$ just b\necho 'A!'\nA!\necho 'B!'\nB!\necho 'C!'\nC!\necho 'D!'\nD!\n```\n\n#### Running Recipes in the Middle of a Recipe\n\n`just` doesn't support running recipes in the middle of another recipe, but you\ncan call `just` recursively in the middle of a recipe. Given the following\n`justfile`:\n\n```just\na:\n  echo 'A!'\n\nb: a\n  echo 'B start!'\n  just c\n  echo 'B end!'\n\nc:\n  echo 'C!'\n```\n\n\u2026running _b_ prints:\n\n```console\n$ just b\necho 'A!'\nA!\necho 'B start!'\nB start!\necho 'C!'\nC!\necho 'B end!'\nB end!\n```\n\nThis has limitations, since recipe `c` is run with an entirely new invocation\nof `just`: Assignments will be recalculated, dependencies might run twice, and\ncommand line arguments will not be propagated to the child `just` process.\n\n### Shebang Recipes\n\nRecipes that start with `#!` are called shebang recipes, and are executed by\nsaving the recipe body to a file and running it. This lets you write recipes in\ndifferent languages:\n\n```just\npolyglot: python js perl sh ruby nu\n\npython:\n  #!/usr/bin/env python3\n  print('Hello from python!')\n\njs:\n  #!/usr/bin/env node\n  console.log('Greetings from JavaScript!')\n\nperl:\n  #!/usr/bin/env perl\n  print \"Larry Wall says Hi!\\n\";\n\nsh:\n  #!/usr/bin/env sh\n  hello='Yo'\n  echo \"$hello from a shell script!\"\n\nnu:\n  #!/usr/bin/env nu\n  let hello = 'Hola'\n  echo $\"($hello) from a nushell script!\"\n\nruby:\n  #!/usr/bin/env ruby\n  puts \"Hello from ruby!\"\n```\n\n```console\n$ just polyglot\nHello from python!\nGreetings from JavaScript!\nLarry Wall says Hi!\nYo from a shell script!\nHola from a nushell script!\nHello from ruby!\n```\n\nOn Unix-like operating systems, including Linux and MacOS, shebang recipes are\nexecuted by saving the recipe body to a file in a temporary directory, marking\nthe file as executable, and executing it. The OS then parses the shebang line\ninto a command line and invokes it, including the path to the file. For\nexample, if a recipe starts with `#!/usr/bin/env bash`, the final command that\nthe OS runs will be something like `/usr/bin/env bash\n/tmp/PATH_TO_SAVED_RECIPE_BODY`.\n\nShebang line splitting is operating system dependent. When passing a command\nwith arguments, you may need to tell `env` to split them explicitly by using\nthe `-S` flag:\n\n```just\nrun:\n  #!/usr/bin/env -S bash -x\n  ls\n```\n\nWindows does not support shebang lines. On Windows, `just` splits the shebang\nline into a command and arguments, saves the recipe body to a file, and invokes\nthe split command and arguments, adding the path to the saved recipe body as\nthe final argument. For example, on Windows, if a recipe starts with `#! py`,\nthe final command the OS runs will be something like\n`py C:\\Temp\\PATH_TO_SAVED_RECIPE_BODY`.\n\n### Script Recipes\n\nRecipes with a `[script(COMMAND)]`<sup>1.32.0</sup> attribute are run as\nscripts interpreted by `COMMAND`. This avoids some of the issues with shebang\nrecipes, such as the use of `cygpath` on Windows, the need to use\n`/usr/bin/env`, inconsistencies in shebang line splitting across Unix OSs, and\nrequiring a temporary directory from which files can be executed.\n\nRecipes with an empty `[script]` attribute are executed with the value of `set\nscript-interpreter := [\u2026]`<sup>1.33.0</sup>, defaulting to `sh -eu`, and *not*\nthe value of `set shell`.\n\nThe body of the recipe is evaluated, written to disk in the temporary\ndirectory, and run by passing its path as an argument to `COMMAND`.\n\nThe `[script(\u2026)]` attribute is unstable, so you'll need to use `set unstable`,\nset the `JUST_UNSTABLE` environment variable, or pass `--unstable` on the\ncommand line.\n\n### Script and Shebang Recipe Temporary Files\n\nBoth script and shebang recipes write the recipe body to a temporary file for\nexecution. Script recipes execute that file by passing it to a command, while\nshebang recipes execute the file directly. Shebang recipe execution will fail\nif the filesystem containing the temporary file is mounted with `noexec` or is\notherwise non-executable.\n\nThe directory that `just` writes temporary files to may be configured in a\nnumber of ways, from highest to lowest precedence:\n\n- Globally with the `--tempdir` command-line option or the `JUST_TEMPDIR`\n  environment variable<sup>1.41.0</sup>.\n\n- On a per-module basis with the `tempdir` setting.\n\n- Globally on Linux with the `XDG_RUNTIME_DIR` environment variable.\n\n- Falling back to the directory returned by\n  [std::env::temp_dir](https://doc.rust-lang.org/std/env/fn.temp_dir.html).\n\n### Python Recipes with `uv`\n\n[`uv`](https://github.com/astral-sh/uv) is an excellent cross-platform python\nproject manager, written in Rust.\n\nUsing the `[script]` attribute and `script-interpreter` setting, `just` can\neasily be configured to run Python recipes with `uv`:\n\n```just\nset unstable\n\nset script-interpreter := ['uv', 'run', '--script']\n\n[script]\nhello:\n  print(\"Hello from Python!\")\n\n[script]\ngoodbye:\n  # /// script\n  # requires-python = \">=3.11\"\n  # dependencies=[\"sh\"]\n  # ///\n  import sh\n  print(sh.echo(\"Goodbye from Python!\"), end='')\n```\n\nOf course, a shebang also works:\n\n```just\nhello:\n  #!/usr/bin/env -S uv run --script\n  print(\"Hello from Python!\")\n```\n\n\n### Safer Bash Shebang Recipes\n\nIf you're writing a `bash` shebang recipe, consider adding `set -euxo\npipefail`:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  set -euxo pipefail\n  hello='Yo'\n  echo \"$hello from Bash!\"\n```\n\nIt isn't strictly necessary, but `set -euxo pipefail` turns on a few useful\nfeatures that make `bash` shebang recipes behave more like normal, linewise\n`just` recipe:\n\n- `set -e` makes `bash` exit if a command fails.\n\n- `set -u` makes `bash` exit if a variable is undefined.\n\n- `set -x` makes `bash` print each script line before it's run.\n\n- `set -o pipefail` makes `bash` exit if a command in a pipeline fails. This is\n  `bash`-specific, so isn't turned on in normal linewise `just` recipes.\n\nTogether, these avoid a lot of shell scripting gotchas.\n\n#### Shebang Recipe Execution on Windows\n\nOn Windows, shebang interpreter paths containing a `/` are translated from\nUnix-style paths to Windows-style paths using `cygpath`, a utility that ships\nwith [Cygwin](http://www.cygwin.com).\n\nFor example, to execute this recipe on Windows:\n\n```just\necho:\n  #!/bin/sh\n  echo \"Hello!\"\n```\n\nThe interpreter path `/bin/sh` will be translated to a Windows-style path using\n`cygpath` before being executed.\n\nIf the interpreter path does not contain a `/` it will be executed without\nbeing translated. This is useful if `cygpath` is not available, or you wish to\npass a Windows-style path to the interpreter.\n\n### Setting Variables in a Recipe\n\nRecipe lines are interpreted by the shell, not `just`, so it's not possible to\nset `just` variables in the middle of a recipe:\n\n```justfile\nfoo:\n  x := \"hello\" # This doesn't work!\n  echo {{x}}\n```\n\nIt is possible to use shell variables, but there's another problem. Every\nrecipe line is run by a new shell instance, so variables set in one line won't\nbe set in the next:\n\n```just\nfoo:\n  x=hello && echo $x # This works!\n  y=bye\n  echo $y            # This doesn't, `y` is undefined here!\n```\n\nThe best way to work around this is to use a shebang recipe. Shebang recipe\nbodies are extracted and run as scripts, so a single shell instance will run\nthe whole thing:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  set -euxo pipefail\n  x=hello\n  echo $x\n```\n\n### Sharing Environment Variables Between Recipes\n\nEach line of each recipe is executed by a fresh shell, so it is not possible to\nshare environment variables between recipes.\n\n#### Using Python Virtual Environments\n\nSome tools, like [Python's venv](https://docs.python.org/3/library/venv.html),\nrequire loading environment variables in order to work, making them challenging\nto use with `just`. As a workaround, you can execute the virtual environment\nbinaries directly:\n\n```just\nvenv:\n  [ -d foo ] || python3 -m venv foo\n\nrun: venv\n  ./foo/bin/python3 main.py\n```\n\n### Changing the Working Directory in a Recipe\n\nEach recipe line is executed by a new shell, so if you change the working\ndirectory on one line, it won't have an effect on later lines:\n\n```just\nfoo:\n  pwd    # This `pwd` will print the same directory\u2026\n  cd bar\n  pwd    # \u2026as this `pwd`!\n```\n\nThere are a couple ways around this. One is to call `cd` on the same line as\nthe command you want to run:\n\n```just\nfoo:\n  cd bar && pwd\n```\n\nThe other is to use a shebang recipe. Shebang recipe bodies are extracted and\nrun as scripts, so a single shell instance will run the whole thing, and thus a\n`cd` on one line will affect later lines, just like a shell script:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  set -euxo pipefail\n  cd bar\n  pwd\n```\n\n### Indentation\n\nRecipe lines can be indented with spaces or tabs, but not a mix of both. All of\na recipe's lines must have the same type of indentation, but different recipes\nin the same `justfile` may use different indentation.\n\nEach recipe must be indented at least one level from the `recipe-name` but\nafter that may be further indented.\n\nHere's a justfile with a recipe indented with spaces, represented as `\u00b7`, and\ntabs, represented as `\u2192`.\n\n```justfile\nset windows-shell := [\"pwsh\", \"-NoLogo\", \"-NoProfileLoadTime\", \"-Command\"]\n\nset ignore-comments\n\nlist-space directory:\n\u00b7\u00b7#!pwsh\n\u00b7\u00b7foreach ($item in $(Get-ChildItem {{directory}} )) {\n\u00b7\u00b7\u00b7\u00b7echo $item.Name\n\u00b7\u00b7}\n\u00b7\u00b7echo \"\"\n\n# indentation nesting works even when newlines are escaped\nlist-tab directory:\n\u2192 @foreach ($item in $(Get-ChildItem {{directory}} )) { \\\n\u2192 \u2192 echo $item.Name \\\n\u2192 }\n\u2192 @echo \"\"\n```\n\n```pwsh\nPS > just list-space ~\nDesktop\nDocuments\nDownloads\n\nPS > just list-tab ~\nDesktop\nDocuments\nDownloads\n```\n\n### Multi-Line Constructs\n\nRecipes without an initial shebang are evaluated and run line-by-line, which\nmeans that multi-line constructs probably won't do what you want.\n\nFor example, with the following `justfile`:\n\n```justfile\nconditional:\n  if true; then\n    echo 'True!'\n  fi\n```\n\nThe extra leading whitespace before the second line of the `conditional` recipe\nwill produce a parse error:\n\n```console\n$ just conditional\nerror: Recipe line has extra leading whitespace\n  |\n3 |         echo 'True!'\n  |     ^^^^^^^^^^^^^^^^\n```\n\nTo work around this, you can write conditionals on one line, escape newlines\nwith slashes, or add a shebang to your recipe. Some examples of multi-line\nconstructs are provided for reference.\n\n#### `if` statements\n\n```just\nconditional:\n  if true; then echo 'True!'; fi\n```\n\n```just\nconditional:\n  if true; then \\\n    echo 'True!'; \\\n  fi\n```\n\n```just\nconditional:\n  #!/usr/bin/env sh\n  if true; then\n    echo 'True!'\n  fi\n```\n\n#### `for` loops\n\n```just\nfor:\n  for file in `ls .`; do echo $file; done\n```\n\n```just\nfor:\n  for file in `ls .`; do \\\n    echo $file; \\\n  done\n```\n\n```just\nfor:\n  #!/usr/bin/env sh\n  for file in `ls .`; do\n    echo $file\n  done\n```\n\n#### `while` loops\n\n```just\nwhile:\n  while `server-is-dead`; do ping -c 1 server; done\n```\n\n```just\nwhile:\n  while `server-is-dead`; do \\\n    ping -c 1 server; \\\n  done\n```\n\n```just\nwhile:\n  #!/usr/bin/env sh\n  while `server-is-dead`; do\n    ping -c 1 server\n  done\n```\n\n#### Outside Recipe Bodies\n\nParenthesized expressions can span multiple lines:\n\n```just\nabc := ('a' +\n        'b'\n         + 'c')\n\nabc2 := (\n  'a' +\n  'b' +\n  'c'\n)\n\nfoo param=('foo'\n      + 'bar'\n    ):\n  echo {{param}}\n\nbar: (foo\n        'Foo'\n     )\n  echo 'Bar!'\n```\n\nLines ending with a backslash continue on to the next line as if the lines were\njoined by whitespace<sup>1.15.0</sup>:\n\n```just\na := 'foo' + \\\n     'bar'\n\nfoo param1 \\\n  param2='foo' \\\n  *varparam='': dep1 \\\n                (dep2 'foo')\n  echo {{param1}} {{param2}} {{varparam}}\n\ndep1: \\\n    # this comment is not part of the recipe body\n  echo 'dep1'\n\ndep2 \\\n  param:\n    echo 'Dependency with parameter {{param}}'\n```\n\nBackslash line continuations can also be used in interpolations. The line\nfollowing the backslash must be indented.\n\n```just\nrecipe:\n  echo '{{ \\\n  \"This interpolation \" + \\\n    \"has a lot of text.\" \\\n  }}'\n  echo 'back to recipe body'\n```\n\n### Command-line Options\n\n`just` supports a number of useful command-line options for listing, dumping,\nand debugging recipes and variables:\n\n```console\n$ just --list\nAvailable recipes:\n  js\n  perl\n  polyglot\n  python\n  ruby\n$ just --show perl\nperl:\n  #!/usr/bin/env perl\n  print \"Larry Wall says Hi!\\n\";\n$ just --show polyglot\npolyglot: python js perl sh ruby\n```\n\n#### Setting Command-line Options with Environment Variables\n\nSome command-line options can be set with environment variables\n\nFor example, unstable features can be enabled either with the `--unstable`\nflag:\n\n```console\n$ just --unstable\n```\n\nOr by setting the `JUST_UNSTABLE` environment variable:\n\n```console\n$ export JUST_UNSTABLE=1\n$ just\n```\n\nSince environment variables are inherited by child processes, command-line\noptions set with environment variables are inherited by recursive invocations\nof `just`, where as command line options set with arguments are not.\n\nConsult `just --help` for which options can be set with environment variables.\n\n### Private Recipes\n\nRecipes and aliases whose name starts with a `_` are omitted from `just --list`:\n\n```just\ntest: _test-helper\n  ./bin/test\n\n_test-helper:\n  ./bin/super-secret-test-helper-stuff\n```\n\n```console\n$ just --list\nAvailable recipes:\n    test\n```\n\nAnd from `just --summary`:\n\n```console\n$ just --summary\ntest\n```\n\nThe `[private]` attribute<sup>1.10.0</sup> may also be used to hide recipes or\naliases without needing to change the name:\n\n```just\n[private]\nfoo:\n\n[private]\nalias b := bar\n\nbar:\n```\n\n```console\n$ just --list\nAvailable recipes:\n    bar\n```\n\nThis is useful for helper recipes which are only meant to be used as\ndependencies of other recipes.\n\n### Quiet Recipes\n\nA recipe name may be prefixed with `@` to invert the meaning of `@` before each\nline:\n\n```just\n@quiet:\n  echo hello\n  echo goodbye\n  @# all done!\n```\n\nNow only the lines starting with `@` will be echoed:\n\n```console\n$ just quiet\nhello\ngoodbye\n# all done!\n```\n\nAll recipes in a Justfile can be made quiet with `set quiet`:\n\n```just\nset quiet\n\nfoo:\n  echo \"This is quiet\"\n\n@foo2:\n  echo \"This is also quiet\"\n```\n\nThe `[no-quiet]` attribute overrides this setting:\n\n```just\nset quiet\n\nfoo:\n  echo \"This is quiet\"\n\n[no-quiet]\nfoo2:\n  echo \"This is not quiet\"\n```\n\nShebang recipes are quiet by default:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  echo 'Foo!'\n```\n\n```console\n$ just foo\nFoo!\n```\n\nAdding `@` to a shebang recipe name makes `just` print the recipe before\nexecuting it:\n\n```just\n@bar:\n  #!/usr/bin/env bash\n  echo 'Bar!'\n```\n\n```console\n$ just bar\n#!/usr/bin/env bash\necho 'Bar!'\nBar!\n```\n\n`just` normally prints error messages when a recipe line fails. These error\nmessages can be suppressed using the `[no-exit-message]`<sup>1.7.0</sup>\nattribute. You may find this especially useful with a recipe that wraps a tool:\n\n```just\ngit *args:\n    @git {{args}}\n```\n\n```console\n$ just git status\nfatal: not a git repository (or any of the parent directories): .git\nerror: Recipe `git` failed on line 2 with exit code 128\n```\n\nAdd the attribute to suppress the exit error message when the tool exits with a\nnon-zero code:\n\n```just\n[no-exit-message]\ngit *args:\n    @git {{args}}\n```\n\n```console\n$ just git status\nfatal: not a git repository (or any of the parent directories): .git\n```\n\n### Selecting Recipes to Run With an Interactive Chooser\n\nThe `--choose` subcommand makes `just` invoke a chooser to select which recipes\nto run. Choosers should read lines containing recipe names from standard input\nand print one or more of those names separated by spaces to standard output.\n\nBecause there is currently no way to run a recipe that requires arguments with\n`--choose`, such recipes will not be given to the chooser. Private recipes and\naliases are also skipped.\n\nThe chooser can be overridden with the `--chooser` flag. If `--chooser` is not\ngiven, then `just` first checks if `$JUST_CHOOSER` is set. If it isn't, then\nthe chooser defaults to `fzf`, a popular fuzzy finder.\n\nArguments can be included in the chooser, i.e. `fzf --exact`.\n\nThe chooser is invoked in the same way as recipe lines. For example, if the\nchooser is `fzf`, it will be invoked with `sh -cu 'fzf'`, and if the shell, or\nthe shell arguments are overridden, the chooser invocation will respect those\noverrides.\n\nIf you'd like `just` to default to selecting recipes with a chooser, you can\nuse this as your default recipe:\n\n```just\ndefault:\n  @just --choose\n```\n\n### Invoking `justfile`s in Other Directories\n\nIf the first argument passed to `just` contains a `/`, then the following\noccurs:\n\n1.  The argument is split at the last `/`.\n\n2.  The part before the last `/` is treated as a directory. `just` will start\n    its search for the `justfile` there, instead of in the current directory.\n\n3.  The part after the last slash is treated as a normal argument, or ignored\n    if it is empty.\n\nThis may seem a little strange, but it's useful if you wish to run a command in\na `justfile` that is in a subdirectory.\n\nFor example, if you are in a directory which contains a subdirectory named\n`foo`, which contains a `justfile` with the recipe `build`, which is also the\ndefault recipe, the following are all equivalent:\n\n```console\n$ (cd foo && just build)\n$ just foo/build\n$ just foo/\n```\n\nAdditional recipes after the first are sought in the same `justfile`. For\nexample, the following are both equivalent:\n\n```console\n$ just foo/a b\n$ (cd foo && just a b)\n```\n\nAnd will both invoke recipes `a` and `b` in `foo/justfile`.\n\n### Imports\n\nOne `justfile` can include the contents of another using `import` statements.\n\nIf you have the following `justfile`:\n\n```justfile\nimport 'foo/bar.just'\n\na: b\n  @echo A\n```\n\nAnd the following text in `foo/bar.just`:\n\n```just\nb:\n  @echo B\n```\n\n`foo/bar.just` will be included in `justfile` and recipe `b` will be defined:\n\n```console\n$ just b\nB\n$ just a\nB\nA\n```\n\nThe `import` path can be absolute or relative to the location of the justfile\ncontaining it. A leading `~/` in the import path is replaced with the current\nusers home directory.\n\nJustfiles are insensitive to order, so included files can reference variables\nand recipes defined after the `import` statement.\n\nImported files can themselves contain `import`s, which are processed\nrecursively.\n\n`allow-duplicate-recipes` and `allow-duplicate-variables` allow duplicate\nrecipes and variables, respectively, to override each other, instead of\nproducing an error.\n\nWithin a module, later definitions override earlier definitions:\n\n```just\nset allow-duplicate-recipes\n\nfoo:\n\nfoo:\n  echo 'yes'\n```\n\nWhen `import`s are involved, things unfortunately get much more complicated and\nhard to explain.\n\nShallower definitions always override deeper definitions, so recipes at the top\nlevel will override recipes in imports, and recipes in an import will override\nrecipes in an import which itself imports those recipes.\n\nWhen two duplicate definitions are imported and are at the same depth, the one\nfrom the earlier import will override the one from the later import.\n\nThis is because `just` uses a stack when processing imports, pushing imports\nonto the stack in source-order, and always processing the top of the stack\nnext, so earlier imports are actually handled later by the compiler.\n\nThis is definitely a bug, but since `just` has very strong backwards\ncompatibility guarantees and we take enormous pains not to break anyone's\n`justfile`, we have created issue #2540 to discuss whether or not we can\nactually fix it.\n\nImports may be made optional by putting a `?` after the `import` keyword:\n\n```just\nimport? 'foo/bar.just'\n```\n\nImporting the same source file multiple times is not an error<sup>1.37.0</sup>.\nThis allows importing multiple justfiles, for example `foo.just` and\n`bar.just`, which both import a third justfile containing shared recipes, for\nexample `baz.just`, without the duplicate import of `baz.just` being an error:\n\n```justfile\n# justfile\nimport 'foo.just'\nimport 'bar.just'\n```\n\n```justfile\n# foo.just\nimport 'baz.just'\nfoo: baz\n```\n\n```justfile\n# bar.just\nimport 'baz.just'\nbar: baz\n```\n\n```just\n# baz\nbaz:\n```\n\n### Modules<sup>1.19.0</sup>\n\nA `justfile` can declare modules using `mod` statements.\n\n`mod` statements were stabilized in `just`<sup>1.31.0</sup>. In earlier\nversions, you'll need to use the `--unstable` flag, `set unstable`, or set the\n`JUST_UNSTABLE` environment variable to use them.\n\nIf you have the following `justfile`:\n\n```justfile\nmod bar\n\na:\n  @echo A\n```\n\nAnd the following text in `bar.just`:\n\n```just\nb:\n  @echo B\n```\n\n`bar.just` will be included in `justfile` as a submodule. Recipes, aliases, and\nvariables defined in one submodule cannot be used in another, and each module\nuses its own settings.\n\nRecipes in submodules can be invoked as subcommands:\n\n```console\n$ just bar b\nB\n```\n\nOr with path syntax:\n\n```console\n$ just bar::b\nB\n```\n\nIf a module is named `foo`, just will search for the module file in `foo.just`,\n`foo/mod.just`, `foo/justfile`, and `foo/.justfile`. In the latter two cases,\nthe module file may have any capitalization.\n\nModule statements may be of the form:\n\n```justfile\nmod foo 'PATH'\n```\n\nWhich loads the module's source file from `PATH`, instead of from the usual\nlocations. A leading `~/` in `PATH` is replaced with the current user's home\ndirectory. `PATH` may point to the module source file itself, or to a directory\ncontaining the module source file with the name `mod.just`, `justfile`, or\n`.justfile`. In the latter two cases, the module file may have any\ncapitalization.\n\nEnvironment files are only loaded for the root justfile, and loaded environment\nvariables are available in submodules. Settings in submodules that affect\nenvironment file loading are ignored.\n\nRecipes in submodules without the `[no-cd]` attribute run with the working\ndirectory set to the directory containing the submodule source file.\n\n`justfile()` and `justfile_directory()` always return the path to the root\njustfile and the directory that contains it, even when called from submodule\nrecipes.\n\nModules may be made optional by putting a `?` after the `mod` keyword:\n\n```just\nmod? foo\n```\n\nMissing source files for optional modules do not produce an error.\n\nOptional modules with no source file do not conflict, so you can have multiple\nmod statements with the same name, but with different source file paths, as\nlong as at most one source file exists:\n\n```just\nmod? foo 'bar.just'\nmod? foo 'baz.just'\n```\n\nModules may be given doc comments which appear in `--list`\noutput<sup>1.30.0</sup>:\n\n```justfile\n# foo is a great module!\nmod foo\n```\n\n```console\n$ just --list\nAvailable recipes:\n    foo ... # foo is a great module!\n```\n\nModules are still missing a lot of features, for example, the ability to refer\nto variables in other modules. See the [module improvement tracking\nissue](https://github.com/casey/just/issues/2252) for more information.\n\n### Hiding `justfile`s\n\n`just` looks for `justfile`s named `justfile` and `.justfile`, which can be\nused to keep a `justfile` hidden.\n\n### Just Scripts\n\nBy adding a shebang line to the top of a `justfile` and making it executable,\n`just` can be used as an interpreter for scripts:\n\n```console\n$ cat > script <<EOF\n#!/usr/bin/env just --justfile\n\nfoo:\n  echo foo\nEOF\n$ chmod +x script\n$ ./script foo\necho foo\nfoo\n```\n\nWhen a script with a shebang is executed, the system supplies the path to the\nscript as an argument to the command in the shebang. So, with a shebang of\n`#!/usr/bin/env just --justfile`, the command will be `/usr/bin/env just --justfile PATH_TO_SCRIPT`.\n\nWith the above shebang, `just` will change its working directory to the\nlocation of the script. If you'd rather leave the working directory unchanged,\nuse `#!/usr/bin/env just --working-directory . --justfile`.\n\nNote: Shebang line splitting is not consistent across operating systems. The\nprevious examples have only been tested on macOS. On Linux, you may need to\npass the `-S` flag to `env`:\n\n```just\n#!/usr/bin/env -S just --justfile\n\ndefault:\n  echo foo\n```\n\n### Formatting and dumping `justfile`s\n\nEach `justfile` has a canonical formatting with respect to whitespace and\nnewlines.\n\nYou can overwrite the current justfile with a canonically-formatted version\nusing the currently-unstable `--fmt` flag:\n\n```console\n$ cat justfile\n# A lot of blank lines\n\n\n\n\n\nsome-recipe:\n  echo \"foo\"\n$ just --fmt --unstable\n$ cat justfile\n# A lot of blank lines\n\nsome-recipe:\n    echo \"foo\"\n```\n\nInvoking `just --fmt --check --unstable` runs `--fmt` in check mode. Instead of\noverwriting the `justfile`, `just` will exit with an exit code of 0 if it is\nformatted correctly, and will exit with 1 and print a diff if it is not.\n\nYou can use the `--dump` command to output a formatted version of the\n`justfile` to stdout:\n\n```console\n$ just --dump > formatted-justfile\n```\n\nThe `--dump` command can be used with `--dump-format json` to print a JSON\nrepresentation of a `justfile`.\n\n### Fallback to parent `justfile`s\n\nIf a recipe is not found in a `justfile` and the `fallback` setting is set,\n`just` will look for `justfile`s in the parent directory and up, until it\nreaches the root directory. `just` will stop after it reaches a `justfile` in\nwhich the `fallback` setting is `false` or unset.\n\nAs an example, suppose the current directory contains this `justfile`:\n\n```just\nset fallback\nfoo:\n  echo foo\n```\n\nAnd the parent directory contains this `justfile`:\n\n```just\nbar:\n  echo bar\n```\n\n```console\n$ just bar\nTrying ../justfile\necho bar\nbar\n```\n\n### Avoiding Argument Splitting\n\nGiven this `justfile`:\n\n```just\nfoo argument:\n  touch {{argument}}\n```\n\nThe following command will create two files, `some` and `argument.txt`:\n\n```console\n$ just foo \"some argument.txt\"\n```\n\nThe user's shell will parse `\"some argument.txt\"` as a single argument, but\nwhen `just` replaces `touch {{argument}}` with `touch some argument.txt`, the\nquotes are not preserved, and `touch` will receive two arguments.\n\nThere are a few ways to avoid this: quoting, positional arguments, and exported\narguments.\n\n#### Quoting\n\nQuotes can be added around the `{{argument}}` interpolation:\n\n```just\nfoo argument:\n  touch '{{argument}}'\n```\n\nThis preserves `just`'s ability to catch variable name typos before running,\nfor example if you were to write `{{argument}}`, but will not do what you want\nif the value of `argument` contains single quotes.\n\n#### Positional Arguments\n\nThe `positional-arguments` setting causes all arguments to be passed as\npositional arguments, allowing them to be accessed with `$1`, `$2`, \u2026, and\n`$@`, which can be then double-quoted to avoid further splitting by the shell:\n\n```just\nset positional-arguments\n\nfoo argument:\n  touch \"$1\"\n```\n\nThis defeats `just`'s ability to catch typos, for example if you type `$2`\ninstead of `$1`, but works for all possible values of `argument`, including\nthose with double quotes.\n\n#### Exported Arguments\n\nAll arguments are exported when the `export` setting is set:\n\n```just\nset export\n\nfoo argument:\n  touch \"$argument\"\n```\n\nOr individual arguments may be exported by prefixing them with `$`:\n\n```just\nfoo $argument:\n  touch \"$argument\"\n```\n\nThis defeats `just`'s ability to catch typos, for example if you type\n`$argument`, but works for all possible values of `argument`, including those\nwith double quotes.\n\n### Configuring the Shell\n\nThere are a number of ways to configure the shell for linewise recipes, which\nare the default when a recipe does not start with a `#!` shebang. Their\nprecedence, from highest to lowest, is:\n\n1. The `--shell` and `--shell-arg` command line options. Passing either of\n   these will cause `just` to ignore any settings in the current justfile.\n2. `set windows-shell := [...]`\n3. `set windows-powershell` (deprecated)\n4. `set shell := [...]`\n\nSince `set windows-shell` has higher precedence than `set shell`, you can use\n`set windows-shell` to pick a shell on Windows, and `set shell` to pick a shell\nfor all other platforms.\n\n### Timestamps\n\n`just` can print timestamps before each recipe commands:\n\n```just\nrecipe:\n  echo one\n  sleep 2\n  echo two\n```\n\n```\n$ just --timestamp recipe\n[07:28:46] echo one\none\n[07:28:46] sleep 2\n[07:28:48] echo two\ntwo\n```\n\nBy default, timestamps are formatted as `HH:MM:SS`. The format can be changed\nwith `--timestamp-format`:\n\n```\n$ just --timestamp recipe --timestamp-format '%H:%M:%S%.3f %Z'\n[07:32:11:.349 UTC] echo one\none\n[07:32:11:.350 UTC] sleep 2\n[07:32:13:.352 UTC] echo two\ntwo\n```\n\nThe argument to `--timestamp-format` is a `strftime`-style format string, see\nthe\n[`chrono` library docs](https://docs.rs/chrono/latest/chrono/format/strftime/index.html)\nfor details.\n\n### Signal Handling\n\n[Signals](https://en.wikipedia.org/wiki/Signal_(IPC)) are messsages sent to\nrunning programs to trigger specific behavior. For example, `SIGINT` is sent to\nall processes in the terminal forground process group when `CTRL-C` is pressed.\n\n`just` tries to exit when requested by a signal, but it also tries to avoid\nleaving behind running child proccesses, two goals which are somewhat in\nconflict.\n\nIf `just` exits leaving behind child processes, the user will have no recourse\nbut to `ps aux | grep` for the children and manually `kill` them, a tedious\nendevour.\n\n#### Fatal Signals\n\n`SIGHUP`, `SIGINT`, and `SIGQUIT` are generated when the user closes the\nterminal, types `ctrl-c`, or types `ctrl-\\`, respectively, and are sent to all\nprocesses in the foreground process group.\n\n`SIGTERM` is the default signal sent by the `kill` command, and is delivered\nonly to its intended victim.\n\nWhen a child process is not running, `just` will exit immediately on receipt of\nany of the above signals.\n\nWhen a child process *is* running, `just` will wait until it terminates, to\navoid leaving it behind.\n\nAdditionally, on receipt of `SIGTERM`, `just` will forward `SIGTERM` to any\nrunning children<sup>1.41.0</sup>, since unlike other fatal signals, `SIGTERM`,\nwas likely sent to `just` alone.\n\nRegardless of whether a child process terminates successfully after `just`\nreceives a fatal signal, `just` halts execution.\n\n#### `SIGINFO`\n\n`SIGINFO` is sent to all processes in the foreground process group when the\nuser types `ctrl-t` on\n[BSD](https://en.wikipedia.org/wiki/Berkeley_Software_Distribution)-derived\noperating systems, including MacOS, but not Linux.\n\n`just` responds by printing a list of all child process IDs and\ncommands<sup>1.41.0</sup>.\n\n#### Windows\n\nOn Windows, `just` behaves as if it had received `SIGINT` when the user types\n`ctrl-c`. Other signals are unsupported.\n\nChangelog\n---------\n\nA changelog for the latest release is available in\n[CHANGELOG.md](https://raw.githubusercontent.com/casey/just/master/CHANGELOG.md).\nChangelogs for previous releases are available on\n[the releases page](https://github.com/casey/just/releases). `just --changelog`\ncan also be used to make a `just` binary print its changelog.\n\nMiscellanea\n-----------\n\n### Re-running recipes when files change\n\n[`watchexec`](https://github.com/mattgreen/watchexec) can re-run any command\nwhen files change.\n\nTo re-run the recipe `foo` when any file changes:\n\n```console\nwatchexec just foo\n```\n\nSee `watchexec --help` for more info, including how to specify which files\nshould be watched for changes.\n\n### Running tasks in parallel\n\nGNU parallel can be used to run tasks concurrently:\n\n```just\nparallel:\n  #!/usr/bin/env -S parallel --shebang --ungroup --jobs {{ num_cpus() }}\n  echo task 1 start; sleep 3; echo task 1 done\n  echo task 2 start; sleep 3; echo task 2 done\n  echo task 3 start; sleep 3; echo task 3 done\n  echo task 4 start; sleep 3; echo task 4 done\n```\n\n### Shell Alias\n\nFor lightning-fast command running, put `alias j=just` in your shell's\nconfiguration file.\n\nIn `bash`, the aliased command may not keep the shell completion functionality\ndescribed in the next section. Add the following line to your `.bashrc` to use\nthe same completion function as `just` for your aliased command:\n\n```console\ncomplete -F _just -o bashdefault -o default j\n```\n\n### Shell Completion Scripts\n\nShell completion scripts for Bash, Elvish, Fish, Nushell, PowerShell, and Zsh\nare available [release archives](https://github.com/casey/just/releases).\n\nThe `just` binary can also generate the same completion scripts at runtime\nusing `just --completions SHELL`:\n\n```console\n$ just --completions zsh > just.zsh\n```\n\nPlease refer to your shell's documentation for how to install them.\n\n*macOS Note:* Recent versions of macOS use zsh as the default shell. If you use\nHomebrew to install `just`, it will automatically install the most recent copy\nof the zsh completion script in the Homebrew zsh directory, which the built-in\nversion of zsh doesn't know about by default. It's best to use this copy of the\nscript if possible, since it will be updated whenever you update `just` via\nHomebrew. Also, many other Homebrew packages use the same location for\ncompletion scripts, and the built-in zsh doesn't know about those either. To\ntake advantage of `just` completion in zsh in this scenario, you can set\n`fpath` to the Homebrew location before calling `compinit`. Note also that Oh\nMy Zsh runs `compinit` by default. So your `.zshrc` file could look like this:\n\n```zsh\n# Init Homebrew, which adds environment variables\neval \"$(brew shellenv)\"\n\nfpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)\n\n# Then choose one of these options:\n# 1. If you're using Oh My Zsh, you can initialize it here\n# source $ZSH/oh-my-zsh.sh\n\n# 2. Otherwise, run compinit yourself\n# autoload -U compinit\n# compinit\n```\n\n### Man Page\n\n`just` can print its own man page with `just --man`. Man pages are written in\n[`roff`](https://en.wikipedia.org/wiki/Roff_%28software%29), a venerable markup\nlanguage and one of the first practical applications of Unix. If you have\n[`groff`](https://www.gnu.org/software/groff/) installed you can view the man\npage with  `just --man | groff -mandoc -Tascii | less`.\n\n### Grammar\n\nA non-normative grammar of `justfile`s can be found in\n[GRAMMAR.md](https://github.com/casey/just/blob/master/GRAMMAR.md).\n\n### just.sh\n\nBefore `just` was a fancy Rust program it was a tiny shell script that called\n`make`. You can find the old version in\n[contrib/just.sh](https://github.com/casey/just/blob/master/contrib/just.sh).\n\n### Global and User `justfile`s\n\nIf you want some recipes to be available everywhere, you have a few options.\n\n#### Global Justfile\n\n`just --global-justfile`, or `just -g` for short, searches the following paths,\nin-order, for a justfile:\n\n- `$XDG_CONFIG_HOME/just/justfile`\n- `$HOME/.config/just/justfile`\n- `$HOME/justfile`\n- `$HOME/.justfile`\n\nYou can put recipes that are used across many projects in a global justfile to\neasily invoke them from any directory.\n\n#### User justfile tips\n\nYou can also adopt some of the following workflows. These tips assume you've\ncreated a `justfile` at `~/.user.justfile`, but you can put this `justfile`\nat any convenient path on your system.\n\n##### Recipe Aliases\n\nIf you want to call the recipes in `~/.user.justfile` by name, and don't mind\ncreating an alias for every recipe, add the following to your shell's\ninitialization script:\n\n```console\nfor recipe in `just --justfile ~/.user.justfile --summary`; do\n  alias $recipe=\"just --justfile ~/.user.justfile --working-directory . $recipe\"\ndone\n```\n\nNow, if you have a recipe called `foo` in `~/.user.justfile`, you can just type\n`foo` at the command line to run it.\n\nIt took me way too long to realize that you could create recipe aliases like\nthis. Notwithstanding my tardiness, I am very pleased to bring you this major\nadvance in `justfile` technology.\n\n##### Forwarding Alias\n\nIf you'd rather not create aliases for every recipe, you can create a single alias:\n\n```console\nalias .j='just --justfile ~/.user.justfile --working-directory .'\n```\n\nNow, if you have a recipe called `foo` in `~/.user.justfile`, you can just type\n`.j foo` at the command line to run it.\n\nI'm pretty sure that nobody actually uses this feature, but it's there.\n\n\u00af\\\\\\_(\u30c4)\\_/\u00af\n\n##### Customization\n\nYou can customize the above aliases with additional options. For example, if\nyou'd prefer to have the recipes in your `justfile` run in your home directory,\ninstead of the current directory:\n\n```console\nalias .j='just --justfile ~/.user.justfile --working-directory ~'\n```\n\n### Node.js `package.json` Script Compatibility\n\nThe following export statement gives `just` recipes access to local Node module\nbinaries, and makes `just` recipe commands behave more like `script` entries in\nNode.js `package.json` files:\n\n```just\nexport PATH := \"./node_modules/.bin:\" + env_var('PATH')\n```\n\n### Paths on Windows\n\nOn Windows, all functions that return paths, except `invocation_directory()`\nwill return `\\`-separated paths. When not using PowerShell or `cmd.exe` these\npaths should be quoted to prevent the `\\`s from being interpreted as character\nescapes:\n\n```just\nls:\n    echo '{{absolute_path(\".\")}}'\n```\n\n`cygpath.exe` is an executable included in some distributions of Unix userlands\nfor Windows, including [Cygwin](https://www.cygwin.com/) and\n[Git](https://git-scm.com/downloads) for Windows.\n\n`just` uses `cygpath.exe` in two places:\n\nFor backwards compatibility, `invocation_directory()`, uses `cygpath.exe` to\nconvert the invocation directory into a unix-style `/`-separated path. Use\n`invocation_directory_native()` to get the native, Windows-style path. On unix,\n`invocation_directory()` and `invocation_directory_native()` both return the\nsame unix-style path.\n\n`cygpath.exe` is used also used to convert Unix-style shebang lines into\nWindows paths. As an alternative, the `[script]` attribute, currently unstable,\ncan be used, which does not depend on `cygpath.exe`.\n\nIf `cygpath.exe` is available, you can use it to convert between path styles:\n\n```just\nfoo_unix := '/hello/world'\nfoo_windows := shell('cygpath --windows $1', foo_unix)\n\nbar_windows := 'C:\\hello\\world'\nbar_unix := shell('cygpath --unix $1', bar_windows)\n```\n\n### Remote Justfiles\n\nIf you wish to include a `mod` or `import` source file in many `justfiles`\nwithout needing to duplicate it, you can use an optional `mod` or `import`,\nalong with a recipe to fetch the module source:\n\n```just\nimport? 'foo.just'\n\nfetch:\n  curl https://raw.githubusercontent.com/casey/just/master/justfile > foo.just\n```\n\nGiven the above `justfile`, after running `just fetch`, the recipes in\n`foo.just` will be available.\n\n### Printing Complex Strings\n\n`echo` can be used to print strings, but because it processes escape sequences,\nlike `\\n`, and different implementations of `echo` recognize different escape\nsequences, using `printf` is often a better choice.\n\n`printf` takes a C-style format string and any number of arguments, which are\ninterpolated into the format string.\n\nThis can be combined with indented, triple quoted strings to emulate shell\nheredocs.\n\nSubstitution complex strings into recipe bodies with `{\u2026}` can also lead to\ntrouble as it may be split by the shell into multiple arguments depending on\nthe presence of whitespace and quotes. Exporting complex strings as environment\nvariables and referring to them with `\"$NAME\"`, note the double quotes, can\nalso help.\n\nPutting all this together, to print a string verbatim to standard output, with\nall its various escape sequences and quotes undisturbed:\n\n```just\nexport FOO := '''\n  a complicated string with\n  some dis\\tur\\bi\\ng escape sequences\n  and \"quotes\" of 'different' kinds\n'''\n\nbar:\n  printf %s \"$FOO\"\n```\n\n### Alternatives and Prior Art\n\nThere is no shortage of command runners! Some more or less similar alternatives\nto `just` include:\n\n- [make](https://en.wikipedia.org/wiki/Make_(software)): The Unix build tool\n  that inspired `just`. There are a few different modern day descendents of the\n  original `make`, including\n  [FreeBSD Make](https://www.freebsd.org/cgi/man.cgi?make(1)) and\n  [GNU Make](https://www.gnu.org/software/make/).\n- [task](https://github.com/go-task/task): A YAML-based command runner written\n  in Go.\n- [maid](https://github.com/egoist/maid): A Markdown-based command runner\n  written in JavaScript.\n- [microsoft/just](https://github.com/microsoft/just): A JavaScript-based\n  command runner written in JavaScript.\n- [cargo-make](https://github.com/sagiegurari/cargo-make): A command runner for\n  Rust projects.\n- [mmake](https://github.com/tj/mmake): A wrapper around `make` with a number\n  of improvements, including remote includes.\n- [robo](https://github.com/tj/robo): A YAML-based command runner written in\n  Go.\n- [mask](https://github.com/jakedeichert/mask): A Markdown-based command runner\n  written in Rust.\n- [makesure](https://github.com/xonixx/makesure): A simple and portable command\n  runner written in AWK and shell.\n- [haku](https://github.com/VladimirMarkelov/haku): A make-like command runner\n  written in Rust.\n- [mise](https://mise.jdx.dev/): A development environment tool manager written\n  in Rust supporing tasks in TOML files and standalone scripts.\n\nContributing\n------------\n\n`just` welcomes your contributions! `just` is released under the maximally\npermissive\n[CC0](https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt) public\ndomain dedication and fallback license, so your changes must also be released\nunder this license.\n\n### Getting Started\n\n`just` is written in Rust. Use\n[rustup](https://www.rust-lang.org/tools/install) to install a Rust toolchain.\n\n`just` is extensively tested. All new features must be covered by unit or\nintegration tests. Unit tests are under\n[src](https://github.com/casey/just/blob/master/src), live alongside the code\nbeing tested, and test code in isolation. Integration tests are in the [tests\ndirectory](https://github.com/casey/just/blob/master/tests) and test the `just`\nbinary from the outside by invoking `just` on a given `justfile` and set of\ncommand-line arguments, and checking the output.\n\nYou should write whichever type of tests are easiest to write for your feature\nwhile still providing good test coverage.\n\nUnit tests are useful for testing new Rust functions that are used internally\nand as an aid for development. A good example are the unit tests which cover\nthe\n[`unindent()` function](https://github.com/casey/just/blob/master/src/unindent.rs),\nused to unindent triple-quoted strings and backticks. `unindent()` has a bunch\nof tricky edge cases which are easy to exercise with unit tests that call\n`unindent()` directly.\n\nIntegration tests are useful for making sure that the final behavior of the\n`just` binary is correct. `unindent()` is also covered by integration tests\nwhich make sure that evaluating a triple-quoted string produces the correct\nunindented value. However, there are not integration tests for all possible\ncases. These are covered by faster, more concise unit tests that call\n`unindent()` directly.\n\nIntegration tests use the `Test` struct, a builder which allows for easily\ninvoking `just` with a given `justfile`, arguments, and environment variables,\nand checking the program's stdout, stderr, and exit code .\n\n### Contribution Workflow\n\n1. Make sure the feature is wanted. There should be an open issue about the\n   feature with a comment from [@casey](https://github.com/casey) saying that\n   it's a good idea or seems reasonable. If there isn't, open a new issue and\n   ask for feedback.\n\n   There are lots of good features which can't be merged, either because they\n   aren't backwards compatible, have an implementation which would\n   overcomplicate the codebase, or go against `just`'s design philosophy.\n\n2. Settle on the design of the feature. If the feature has multiple possible\n   implementations or syntaxes, make sure to nail down the details in the\n   issue.\n\n3. Clone `just` and start hacking. The best workflow is to have the code you're\n   working on in an editor alongside a job that re-runs tests whenever a file\n   changes. You can run such a job by installing\n   [cargo-watch](https://github.com/watchexec/cargo-watch) with `cargo install\n   cargo-watch` and running `just watch test`.\n\n4. Add a failing test for your feature. Most of the time this will be an\n   integration test which exercises the feature end-to-end. Look for an\n   appropriate file to put the test in in\n   [tests](https://github.com/casey/just/blob/master/tests), or add a new file\n   in [tests](https://github.com/casey/just/blob/master/tests) and add a `mod`\n   statement importing that file in\n   [tests/lib.rs](https://github.com/casey/just/blob/master/tests/lib.rs).\n\n5. Implement the feature.\n\n6. Run `just ci` to make sure that all tests, lints, and checks pass. Requires\n   [mdBook](https://github.com/rust-lang/mdBook) and\n   [mdbook-linkcheck](https://github.com/Michael-F-Bryan/mdbook-linkcheck).\n\n7. Open a PR with the new code that is editable by maintainers. PRs often\n   require rebasing and minor tweaks. If the PR is not editable by maintainers,\n   each rebase and tweak will require a round trip of code review. Your PR may\n   be summarily closed if it is not editable by maintainers.\n\n8. Incorporate feedback.\n\n9. Enjoy the sweet feeling of your PR getting merged!\n\nFeel free to open a draft PR at any time for discussion and feedback.\n\n### Hints\n\nHere are some hints to get you started with specific kinds of new features,\nwhich you can use in addition to the contribution workflow above.\n\n#### Adding a New Attribute\n\n1. Write a new integration test in\n   [tests/attributes.rs](https://github.com/casey/just/blob/master/tests/attributes.rs).\n\n2. Add a new variant to the\n   [`Attribute`](https://github.com/casey/just/blob/master/src/attribute.rs)\n   enum.\n\n3. Implement the functionality of the new attribute.\n\n4. Run `just ci` to make sure that all tests pass.\n\n### Janus\n\n[Janus](https://github.com/casey/janus) is a tool for checking whether a change\nto `just` breaks or changes the interpretation of existing `justfile`s. It\ncollects and analyzes public `justfile`s on GitHub.\n\nBefore merging a particularly large or gruesome change, Janus should be run to\nmake sure that nothing breaks. Don't worry about running Janus yourself, Casey\nwill happily run it for you on changes that need it.\n\n### Minimum Supported Rust Version\n\nThe minimum supported Rust version, or MSRV, is current stable Rust. It may\nbuild on older versions of Rust, but this is not guaranteed.\n\n### New Releases\n\nNew releases of `just` are made frequently so that users quickly get access to\nnew features.\n\nRelease commit messages use the following template:\n\n```\nRelease x.y.z\n\n- Bump version: x.y.z \u2192 x.y.z\n- Update changelog\n- Update changelog contributor credits\n- Update dependencies\n- Update version references in readme\n```\n\nFrequently Asked Questions\n--------------------------\n\n### What are the idiosyncrasies of Make that Just avoids?\n\n`make` has some behaviors which are confusing, complicated, or make it\nunsuitable for use as a general command runner.\n\nOne example is that under some circumstances, `make` won't actually run the\ncommands in a recipe. For example, if you have a file called `test` and the\nfollowing makefile:\n\n```just\ntest:\n  ./test\n```\n\n`make` will refuse to run your tests:\n\n```console\n$ make test\nmake: `test' is up to date.\n```\n\n`make` assumes that the `test` recipe produces a file called `test`. Since this\nfile exists and the recipe has no other dependencies, `make` thinks that it\ndoesn't have anything to do and exits.\n\nTo be fair, this behavior is desirable when using `make` as a build system, but\nnot when using it as a command runner. You can disable this behavior for\nspecific targets using `make`'s built-in\n[`.PHONY` target name](https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html),\nbut the syntax is verbose and can be hard to remember. The explicit list of\nphony targets, written separately from the recipe definitions, also introduces\nthe risk of accidentally defining a new non-phony target. In `just`, all\nrecipes are treated as if they were phony.\n\nOther examples of `make`'s idiosyncrasies include the difference between `=`\nand `:=` in assignments, the confusing error messages that are produced if you\nmess up your makefile, needing `$$` to use environment variables in recipes,\nand incompatibilities between different flavors of `make`.\n\n### What's the relationship between Just and Cargo build scripts?\n\n[`cargo` build scripts](http://doc.crates.io/build-script.html) have a pretty\nspecific use, which is to control how `cargo` builds your Rust project. This\nmight include adding flags to `rustc` invocations, building an external\ndependency, or running some kind of codegen step.\n\n`just`, on the other hand, is for all the other miscellaneous commands you\nmight run as part of development. Things like running tests in different\nconfigurations, linting your code, pushing build artifacts to a server,\nremoving temporary files, and the like.\n\nAlso, although `just` is written in Rust, it can be used regardless of the\nlanguage or build system your project uses.\n\nFurther Ramblings\n-----------------\n\nI personally find it very useful to write a `justfile` for almost every\nproject, big or small.\n\nOn a big project with multiple contributors, it's very useful to have a file\nwith all the commands needed to work on the project close at hand.\n\nThere are probably different commands to test, build, lint, deploy, and the\nlike, and having them all in one place is useful and cuts down on the time you\nhave to spend telling people which commands to run and how to type them.\n\nAnd, with an easy place to put commands, it's likely that you'll come up with\nother useful things which are part of the project's collective wisdom, but\nwhich aren't written down anywhere, like the arcane commands needed for some\npart of your revision control workflow, to install all your project's\ndependencies, or all the random flags you might need to pass to the build\nsystem.\n\nSome ideas for recipes:\n\n- Deploying/publishing the project\n\n- Building in release mode vs debug mode\n\n- Running in debug mode or with logging enabled\n\n- Complex git workflows\n\n- Updating dependencies\n\n- Running different sets of tests, for example fast tests vs slow tests, or\n  running them with verbose output\n\n- Any complex set of commands that you really should write down somewhere, if\n  only to be able to remember them\n\nEven for small, personal projects it's nice to be able to remember commands by\nname instead of ^Reverse searching your shell history, and it's a huge boon to\nbe able to go into an old project written in a random language with a\nmysterious build system and know that all the commands you need to do whatever\nyou need to do are in the `justfile`, and that if you type `just` something\nuseful (or at least interesting!) will probably happen.\n\nFor ideas for recipes, check out\n[this project's `justfile`](https://github.com/casey/just/blob/master/justfile),\nor some of the\n`justfile`s\n[out in the wild](https://github.com/search?q=path%3A**%2Fjustfile&type=code).\n\nAnyways, I think that's about it for this incredibly long-winded README.\n\nI hope you enjoy using `just` and find great success and satisfaction in all\nyour computational endeavors!\n\n\ud83d\ude38\n\n[\ud83d\udd3c Back to the top!](#just)\n",
    "org": "casey",
    "repo": "just",
    "number": 2836,
    "commit": "a3da3cf959a4cf9eba85777c4e5c0a95ad0e0d0b"
}