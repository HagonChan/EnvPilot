{
    "primary_language": "JavaScript",
    "language_guidelines": "# General Guidelines:\n**General Guidelines for JavaScript/Node.js Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details.  \n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `package.json` file. Ensure you have Node.js and npm (or Yarn) installed to manage these dependencies.  \n\n3. **Install Dependencies**  \n   Run the following command to install project dependencies:  \n   ```sh\n   npm install  \n   ```  \n   or, if the project uses Yarn:  \n   ```sh\n   yarn install  \n   ```  \n\n4. **Build the Project**  \n   If the project requires a build step, refer to the `scripts` section in the `package.json` file. Common build commands include:  \n   ```sh\n   npm run build  \n   ```  \n   or  \n   ```sh\n   yarn build  \n   ```  \n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, JSON configuration files) and set them up accordingly. The README or project documentation should provide details on this.  \n\n6. **Run Tests (if available)**  \n   If the project provides tests, it\u2019s a good idea to run them to ensure everything is working correctly. Common test commands include:  \n   ```sh\n   npm test  \n   ```  \n   or  \n   ```sh\n   yarn test  \n   ```  \n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands might include:  \n   ```sh\n   npm start  \n   ```  \n   or  \n   ```sh\n   yarn start  \n   ```  \n\n8. **Troubleshooting**  \n   If you encounter any issues during installation or while running the project, refer to the project\u2019s issue tracker on GitHub or search for similar issues others may have encountered. Checking for error messages in the terminal can also provide clues.  \n\n9. **Code Linting and Formatting**  \n   Use linters and formatters to ensure code quality and consistency. Common tools include ESLint for linting and Prettier for formatting. You can typically run these with:  \n   ```sh\n   npm run lint  \n   npm run format  \n   ```  \n   or  \n   ```sh\n   yarn lint  \n   yarn format  \n   ```  ",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\nname: CI\n\non:\n  push:\n  pull_request:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \u2b07\ufe0f Checkout\n        uses: actions/checkout@v2\n\n      - name: \u2394 Setup node ${{ matrix.node }}\n        uses: actions/setup-node@v2\n        with:\n          cache: npm\n\n      - name: \ud83d\udce5 Download deps\n        run: npm ci\n\n      - name: \ud83e\uddea Run lint\n        run: npm run lint\n\n  build:\n    runs-on: ${{ matrix.os }}\n    needs: lint\n    strategy:\n      fail-fast: false\n      matrix:\n        node:\n          - 12\n          - 14\n          - 16\n          - 17\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        browser:\n          - FirefoxHeadless\n\n    steps:\n      - name: \ud83d\uded1 Cancel Previous Runs\n        uses: styfle/cancel-workflow-action@0.9.1\n        with:\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: \u2b07\ufe0f Checkout\n        uses: actions/checkout@v2\n\n      - name: \u2394 Setup node ${{ matrix.node }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node }}\n          cache: npm\n\n      - name: \ud83d\udce5 Download deps\n        run: npm ci\n\n      - name: Run coverage\n        run: npm test\n\n      - name: Run browser tests\n        run: npm run mocha-browser-test -- --browsers ${{ matrix.browser }}  --timeout 10000\n        env:\n          DISPLAY: :99.0\n\n      - name: Coverage\n        if: matrix.os == 'ubuntu-latest' && matrix.node == '14'\n        run: npm run coverage && npx nyc report --reporter=lcov\n\n      - name: Coveralls\n        if: matrix.os == 'ubuntu-latest' && matrix.node == '14'\n        uses: coverallsapp/github-action@1.1.3\n        with:\n            github-token: ${{ secrets.GITHUB_TOKEN }}\n",
    "readme": "![Async Logo](https://raw.githubusercontent.com/caolan/async/master/logo/async-logo_readme.jpg)\n\n[![Build Status via Travis CI](https://travis-ci.org/caolan/async.svg?branch=master)](https://travis-ci.org/caolan/async)\n[![Build Status via Azure Pipelines](https://dev.azure.com/caolanmcmahon/async/_apis/build/status/caolan.async?branchName=master)](https://dev.azure.com/caolanmcmahon/async/_build/latest?definitionId=1&branchName=master)\n[![NPM version](https://img.shields.io/npm/v/async.svg)](https://www.npmjs.com/package/async)\n[![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master)\n[![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/async/badge?style=rounded)](https://www.jsdelivr.com/package/npm/async)\n\n<!--\n|Linux|Windows|MacOS|\n|-|-|-|\n|[![Linux Build Status](https://dev.azure.com/caolanmcmahon/async/_apis/build/status/caolan.async?branchName=master&jobName=Linux&configuration=Linux%20node_10_x)](https://dev.azure.com/caolanmcmahon/async/_build/latest?definitionId=1&branchName=master) | [![Windows Build Status](https://dev.azure.com/caolanmcmahon/async/_apis/build/status/caolan.async?branchName=master&jobName=Windows&configuration=Windows%20node_10_x)](https://dev.azure.com/caolanmcmahon/async/_build/latest?definitionId=1&branchName=master) | [![MacOS Build Status](https://dev.azure.com/caolanmcmahon/async/_apis/build/status/caolan.async?branchName=master&jobName=OSX&configuration=OSX%20node_10_x)](https://dev.azure.com/caolanmcmahon/async/_build/latest?definitionId=1&branchName=master)| -->\n\nAsync is a utility module which provides straight-forward, powerful functions for working with [asynchronous JavaScript](http://caolan.github.io/async/v3/global.html). Although originally designed for use with [Node.js](https://nodejs.org/) and installable via `npm i async`, it can also be used directly in the browser.  A ESM/MJS version is included in the main `async` package that should automatically be used with compatible bundlers such as Webpack and Rollup.\n\nA pure ESM version of Async is available as [`async-es`](https://www.npmjs.com/package/async-es).\n\nFor Documentation, visit <https://caolan.github.io/async/>\n\n*For Async v1.5.x documentation, go [HERE](https://github.com/caolan/async/blob/v1.5.2/README.md)*\n\n\n```javascript\n// for use with Node-style callbacks...\nvar async = require(\"async\");\n\nvar obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\nvar configs = {};\n\nasync.forEachOf(obj, (value, key, callback) => {\n    fs.readFile(__dirname + value, \"utf8\", (err, data) => {\n        if (err) return callback(err);\n        try {\n            configs[key] = JSON.parse(data);\n        } catch (e) {\n            return callback(e);\n        }\n        callback();\n    });\n}, err => {\n    if (err) console.error(err.message);\n    // configs is now a map of JSON data\n    doSomethingWith(configs);\n});\n```\n\n```javascript\nvar async = require(\"async\");\n\n// ...or ES2017 async functions\nasync.mapLimit(urls, 5, async function(url) {\n    const response = await fetch(url)\n    return response.body\n}, (err, results) => {\n    if (err) throw err\n    // results is now an array of the response bodies\n    console.log(results)\n})\n```\n"
}