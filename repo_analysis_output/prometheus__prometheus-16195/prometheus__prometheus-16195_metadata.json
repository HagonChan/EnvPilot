{
    "primary_language": "Go",
    "language_guidelines": "# General Guidelines:\n\n**General Guidelines for Go Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Go version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `go.mod` file. Ensure you have the required Go version installed. Check the `go` directive in `go.mod` for version requirements.\n\n3. **Go Installation**  \n   Ensure you have Go installed. Download from https://golang.org/dl/ if needed. Verify installation:\n\n    ```sh\n    go version\n    ```\n\n4. **Module Management**  \n   If the project uses Go modules (most modern projects do), the `go.mod` file manages dependencies. Download dependencies:\n\n    ```sh\n    go mod download\n    ```\n\n    Tidy up dependencies:\n\n    ```sh\n    go mod tidy\n    ```\n\n5. **Build the Project**  \n   Use Go to build the project:\n\n    ```sh\n    go build\n    ```\n\n    For specific packages:\n\n    ```sh\n    go build ./cmd/package_name\n    ```\n\n    For cross-compilation:\n\n    ```sh\n    GOOS=linux GOARCH=amd64 go build\n    ```\n\n6. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, YAML/JSON config files) and set them up accordingly. Some projects may use environment variables for configuration.\n\n7. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    go test ./...\n    ```\n\n    For verbose output:\n\n    ```sh\n    go test -v ./...\n    ```\n\n    For coverage:\n\n    ```sh\n    go test -cover ./...\n    ```\n\n8. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    go run main.go\n    ```\n\n    For specific packages:\n\n    ```sh\n    go run ./cmd/package_name\n    ```\n\n9. **Code Quality**  \n   Use Go's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        go fmt ./...\n        ```\n    - Vet code for potential issues:\n        ```sh\n        go vet ./...\n        ```\n    - Use golint if available:\n        ```sh\n        golint ./...\n        ```\n\n10. **Vendor Dependencies (if used)**  \n    Some projects might use vendored dependencies:\n\n    ```sh\n    go mod vendor\n    ```\n\n11. **Documentation**  \n    Generate documentation:\n\n    ```sh\n    go doc package_name\n    ```\n\n    Or use godoc for local server:\n\n    ```sh\n    godoc -http=:6060\n    ```\n\n12. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check Go's error messages carefully as they are usually descriptive.\n\n13. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n14. **Environment Setup**  \n    Set up Go environment variables if needed:\n    ```sh\n    export GOPATH=$HOME/go\n    export PATH=$PATH:$GOPATH/bin\n    ```\n    Note: GOPATH is less important with Go modules but may still be needed for some legacy projects.\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: ci.yml\nContent:\n---\nname: CI\non:\n  pull_request:\n  push:\n\njobs:\n  test_go:\n    name: Go tests\n    runs-on: ubuntu-latest\n    container:\n      # Whenever the Go version is updated here, .promu.yml\n      # should also be updated.\n      image: quay.io/prometheus/golang-builder:1.23-base\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - uses: ./.github/promci/actions/setup_environment\n        with:\n          enable_npm: true\n      - run: make GOOPTS=--tags=stringlabels GO_ONLY=1 SKIP_GOLANGCI_LINT=1\n      - run: go test --tags=stringlabels ./tsdb/ -test.tsdb-isolation=false\n      - run: make -C documentation/examples/remote_storage\n      - run: make -C documentation/examples\n\n  test_go_more:\n    name: More Go tests\n    runs-on: ubuntu-latest\n    container:\n      image: quay.io/prometheus/golang-builder:1.23-base\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - uses: ./.github/promci/actions/setup_environment\n      - run: go test --tags=dedupelabels ./...\n      - run: GOARCH=386 go test ./...\n      - uses: ./.github/promci/actions/check_proto\n        with:\n          version: \"3.15.8\"\n\n  test_go_oldest:\n    name: Go tests with previous Go version\n    runs-on: ubuntu-latest\n    env:\n      # Enforce the Go version.\n      GOTOOLCHAIN: local\n    container:\n      # The go version in this image should be N-1 wrt test_go.\n      image: quay.io/prometheus/golang-builder:1.23-base\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - run: make build\n      # Don't run NPM build; don't run race-detector.\n      - run: make test GO_ONLY=1 test-flags=\"\"\n\n  test_ui:\n    name: UI tests\n    runs-on: ubuntu-latest\n    # Whenever the Go version is updated here, .promu.yml\n    # should also be updated.\n    container:\n      image: quay.io/prometheus/golang-builder:1.23-base\n\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - uses: ./.github/promci/actions/setup_environment\n        with:\n          enable_go: false\n          enable_npm: true\n      - run: make assets-tarball\n      - run: make ui-lint\n      - run: make ui-test\n      - uses: ./.github/promci/actions/save_artifacts\n        with:\n          directory: .tarballs\n\n  test_windows:\n    name: Go tests on Windows\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0\n        with:\n          go-version: 1.24.x\n      - run: |\n          $TestTargets = go list ./... | Where-Object { $_ -NotMatch \"(github.com/prometheus/prometheus/config|github.com/prometheus/prometheus/web)\"}\n          go test $TestTargets -vet=off -v\n        shell: powershell\n\n  test_mixins:\n    name: Mixins tests\n    runs-on: ubuntu-latest\n    # Whenever the Go version is updated here, .promu.yml\n    # should also be updated.\n    container:\n      image: quay.io/prometheus/golang-builder:1.23-base\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - run: go install ./cmd/promtool/.\n      - run: go install github.com/google/go-jsonnet/cmd/jsonnet@latest\n      - run: go install github.com/google/go-jsonnet/cmd/jsonnetfmt@latest\n      - run: go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest\n      - run: make -C documentation/prometheus-mixin clean\n      - run: make -C documentation/prometheus-mixin jb_install\n      - run: make -C documentation/prometheus-mixin\n      - run: git diff --exit-code\n\n  build:\n    name: Build Prometheus for common architectures\n    runs-on: ubuntu-latest\n    if: |\n      !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v2.'))\n      &&\n      !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v3.'))\n      &&\n      !(github.event_name == 'pull_request' && startsWith(github.event.pull_request.base.ref, 'release-'))\n      &&\n      !(github.event_name == 'push' && github.event.ref == 'refs/heads/main')\n    strategy:\n      matrix:\n        thread: [ 0, 1, 2 ]\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - uses: ./.github/promci/actions/build\n        with:\n          promu_opts: \"-p linux/amd64 -p windows/amd64 -p linux/arm64 -p darwin/amd64 -p darwin/arm64 -p linux/386\"\n          parallelism: 3\n          thread: ${{ matrix.thread }}\n  build_all:\n    name: Build Prometheus for all architectures\n    runs-on: ubuntu-latest\n    if: |\n      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v2.'))\n      ||\n      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v3.'))\n      ||\n      (github.event_name == 'pull_request' && startsWith(github.event.pull_request.base.ref, 'release-'))\n      ||\n      (github.event_name == 'push' && github.event.ref == 'refs/heads/main')\n    strategy:\n      matrix:\n        thread: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]\n\n    # Whenever the Go version is updated here, .promu.yml\n    # should also be updated.\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - uses: ./.github/promci/actions/build\n        with:\n          parallelism: 12\n          thread: ${{ matrix.thread }}\n  build_all_status:\n    # This status check aggregates the individual matrix jobs of the \"Build\n    # Prometheus for all architectures\" step into a final status. Fails if a\n    # single matrix job fails, succeeds if all matrix jobs succeed.\n    # See https://github.com/orgs/community/discussions/4324 for why this is\n    # needed\n    name: Report status of build Prometheus for all architectures\n    runs-on: ubuntu-latest\n    needs: [build_all]\n    # The run condition needs to include always(). Otherwise actions\n    # behave unexpected:\n    # only \"needs\" will make the Status Report be skipped if one of the builds fails https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/using-jobs-in-a-workflow#defining-prerequisite-jobs\n    # And skipped is treated as success https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborat[\u2026]n-repositories-with-code-quality-features/about-status-checks\n    # Adding always ensures that the status check is run independently of the\n    # results of Build All\n    if: always() && github.event_name == 'pull_request' && startsWith(github.event.pull_request.base.ref, 'release-')\n    steps:\n      - name: Successful build\n        if: ${{ !(contains(needs.*.result, 'failure')) && !(contains(needs.*.result, 'cancelled')) }}\n        run: exit 0\n      - name: Failing or cancelled build\n        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}\n        run: exit 1\n  check_generated_parser:\n    name: Check generated parser\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: Install Go\n        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0\n        with:\n          cache: false\n          go-version: 1.24.x\n      - name: Run goyacc and check for diff\n        run: make install-goyacc check-generated-parser\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - name: Install Go\n        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0\n        with:\n          go-version: 1.24.x\n      - name: Install snmp_exporter/generator dependencies\n        run: sudo apt-get update && sudo apt-get -y install libsnmp-dev\n        if: github.repository == 'prometheus/snmp_exporter'\n      - name: Lint\n        uses: golangci/golangci-lint-action@2226d7cb06a077cd73e56eedd38eecad18e5d837 # v6.5.0\n        with:\n          args: --verbose\n          # Make sure to sync this with Makefile.common and scripts/golangci-lint.yml.\n          version: v1.64.6\n  fuzzing:\n    uses: ./.github/workflows/fuzzing.yml\n    if: github.event_name == 'pull_request'\n  codeql:\n    uses: ./.github/workflows/codeql-analysis.yml\n\n  publish_main:\n    name: Publish main branch artifacts\n    runs-on: ubuntu-latest\n    needs: [test_ui, test_go, test_go_more, test_go_oldest, test_windows, golangci, codeql, build_all]\n    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - uses: ./.github/promci/actions/publish_main\n        with:\n          docker_hub_login: ${{ secrets.docker_hub_login }}\n          docker_hub_password: ${{ secrets.docker_hub_password }}\n          quay_io_login: ${{ secrets.quay_io_login }}\n          quay_io_password: ${{ secrets.quay_io_password }}\n  publish_release:\n    name: Publish release artefacts\n    runs-on: ubuntu-latest\n    needs: [test_ui, test_go, test_go_more, test_go_oldest, test_windows, golangci, codeql, build_all]\n    if: |\n      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v2.'))\n      ||\n      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v3.'))\n    steps:\n      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - uses: ./.github/promci/actions/publish_release\n        with:\n          docker_hub_login: ${{ secrets.docker_hub_login }}\n          docker_hub_password: ${{ secrets.docker_hub_password }}\n          quay_io_login: ${{ secrets.quay_io_login }}\n          quay_io_password: ${{ secrets.quay_io_password }}\n          github_token: ${{ secrets.PROMBOT_GITHUB_TOKEN }}\n  publish_ui_release:\n    name: Publish UI on npm Registry\n    runs-on: ubuntu-latest\n    needs: [test_ui, codeql]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2\n      - uses: prometheus/promci@c3c93a50d581b928af720f0134b2b2dad32a6c41 # v0.4.6\n      - name: Install nodejs\n        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0\n        with:\n          node-version-file: \"web/ui/.nvmrc\"\n          registry-url: \"https://registry.npmjs.org\"\n      - uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Check libraries version\n        if: |\n          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v2.'))\n          ||\n          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v3.'))\n        run: ./scripts/ui_release.sh --check-package \"$(./scripts/get_module_version.sh ${{ github.ref_name }})\"\n      - name: build\n        run: make assets\n      - name: Copy files before publishing libs\n        run: ./scripts/ui_release.sh --copy\n      - name: Publish dry-run libraries\n        if: |\n          !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v2.'))\n          &&\n          !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v3.'))\n        run: ./scripts/ui_release.sh --publish dry-run\n      - name: Publish libraries\n        if: |\n          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v2.'))\n          ||\n          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v3.'))\n        run: ./scripts/ui_release.sh --publish\n        env:\n          # The setup-node action writes an .npmrc file with this env variable\n          # as the placeholder for the auth token\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n",
    "readme": "<h1 align=\"center\" style=\"border-bottom: none\">\n    <a href=\"https://prometheus.io\" target=\"_blank\"><img alt=\"Prometheus\" src=\"/documentation/images/prometheus-logo.svg\"></a><br>Prometheus\n</h1>\n\n<p align=\"center\">Visit <a href=\"https://prometheus.io\" target=\"_blank\">prometheus.io</a> for the full documentation,\nexamples and guides.</p>\n\n<div align=\"center\">\n\n[![CI](https://github.com/prometheus/prometheus/actions/workflows/ci.yml/badge.svg)](https://github.com/prometheus/prometheus/actions/workflows/ci.yml)\n[![Docker Repository on Quay](https://quay.io/repository/prometheus/prometheus/status)][quay]\n[![Docker Pulls](https://img.shields.io/docker/pulls/prom/prometheus.svg?maxAge=604800)][hub]\n[![Go Report Card](https://goreportcard.com/badge/github.com/prometheus/prometheus)](https://goreportcard.com/report/github.com/prometheus/prometheus)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/486/badge)](https://bestpractices.coreinfrastructure.org/projects/486)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/prometheus/prometheus/badge)](https://securityscorecards.dev/viewer/?uri=github.com/prometheus/prometheus)\n[![CLOMonitor](https://img.shields.io/endpoint?url=https://clomonitor.io/api/projects/cncf/prometheus/badge)](https://clomonitor.io/projects/cncf/prometheus)\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/prometheus/prometheus)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/prometheus.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:prometheus)\n\n</div>\n\nPrometheus, a [Cloud Native Computing Foundation](https://cncf.io/) project, is a systems and service monitoring system. It collects metrics\nfrom configured targets at given intervals, evaluates rule expressions,\ndisplays the results, and can trigger alerts when specified conditions are observed.\n\nThe features that distinguish Prometheus from other metrics and monitoring systems are:\n\n* A **multi-dimensional** data model (time series defined by metric name and set of key/value dimensions)\n* PromQL, a **powerful and flexible query language** to leverage this dimensionality\n* No dependency on distributed storage; **single server nodes are autonomous**\n* An HTTP **pull model** for time series collection\n* **Pushing time series** is supported via an intermediary gateway for batch jobs\n* Targets are discovered via **service discovery** or **static configuration**\n* Multiple modes of **graphing and dashboarding support**\n* Support for hierarchical and horizontal **federation**\n\n## Architecture overview\n\n![Architecture overview](documentation/images/architecture.svg)\n\n## Install\n\nThere are various ways of installing Prometheus.\n\n### Precompiled binaries\n\nPrecompiled binaries for released versions are available in the\n[*download* section](https://prometheus.io/download/)\non [prometheus.io](https://prometheus.io). Using the latest production release binary\nis the recommended way of installing Prometheus.\nSee the [Installing](https://prometheus.io/docs/introduction/install/)\nchapter in the documentation for all the details.\n\n### Docker images\n\nDocker images are available on [Quay.io](https://quay.io/repository/prometheus/prometheus) or [Docker Hub](https://hub.docker.com/r/prom/prometheus/).\n\nYou can launch a Prometheus container for trying it out with\n\n```bash\ndocker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus\n```\n\nPrometheus will now be reachable at <http://localhost:9090/>.\n\n### Building from source\n\nTo build Prometheus from source code, You need:\n\n* Go [version 1.22 or greater](https://golang.org/doc/install).\n* NodeJS [version 22 or greater](https://nodejs.org/).\n* npm [version 8 or greater](https://www.npmjs.com/).\n\nStart by cloning the repository:\n\n```bash\ngit clone https://github.com/prometheus/prometheus.git\ncd prometheus\n```\n\nYou can use the `go` tool to build and install the `prometheus`\nand `promtool` binaries into your `GOPATH`:\n\n```bash\nGO111MODULE=on go install github.com/prometheus/prometheus/cmd/...\nprometheus --config.file=your_config.yml\n```\n\n*However*, when using `go install` to build Prometheus, Prometheus will expect to be able to\nread its web assets from local filesystem directories under `web/ui/static` and\n`web/ui/templates`. In order for these assets to be found, you will have to run Prometheus\nfrom the root of the cloned repository. Note also that these directories do not include the\nReact UI unless it has been built explicitly using `make assets` or `make build`.\n\nAn example of the above configuration file can be found [here.](https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus.yml)\n\nYou can also build using `make build`, which will compile in the web assets so that\nPrometheus can be run from anywhere:\n\n```bash\nmake build\n./prometheus --config.file=your_config.yml\n```\n\nThe Makefile provides several targets:\n\n* *build*: build the `prometheus` and `promtool` binaries (includes building and compiling in web assets)\n* *test*: run the tests\n* *test-short*: run the short tests\n* *format*: format the source code\n* *vet*: check the source code for common errors\n* *assets*: build the React UI\n\n### Service discovery plugins\n\nPrometheus is bundled with many service discovery plugins.\nWhen building Prometheus from source, you can edit the [plugins.yml](./plugins.yml)\nfile to disable some service discoveries. The file is a yaml-formatted list of go\nimport path that will be built into the Prometheus binary.\n\nAfter you have changed the file, you\nneed to run `make build` again.\n\nIf you are using another method to compile Prometheus, `make plugins` will\ngenerate the plugins file accordingly.\n\nIf you add out-of-tree plugins, which we do not endorse at the moment,\nadditional steps might be needed to adjust the `go.mod` and `go.sum` files. As\nalways, be extra careful when loading third party code.\n\n### Building the Docker image\n\nThe `make docker` target is designed for use in our CI system.\nYou can build a docker image locally with the following commands:\n\n```bash\nmake promu\npromu crossbuild -p linux/amd64\nmake npm_licenses\nmake common-docker-amd64\n```\n\n## Using Prometheus as a Go Library\n\n### Remote Write\n\nWe are publishing our Remote Write protobuf independently at\n[buf.build](https://buf.build/prometheus/prometheus/assets).\n\nYou can use that as a library:\n\n```shell\ngo get buf.build/gen/go/prometheus/prometheus/protocolbuffers/go@latest\n```\n\nThis is experimental.\n\n### Prometheus code base\n\nIn order to comply with [go mod](https://go.dev/ref/mod#versions) rules,\nPrometheus release number do not exactly match Go module releases.\n\nFor the\nPrometheus v3.y.z releases, we are publishing equivalent v0.3y.z tags. The y in v0.3y.z is always padded to two digits, with a leading zero if needed.\n\nTherefore, a user that would want to use Prometheus v3.0.0 as a library could do:\n\n```shell\ngo get github.com/prometheus/prometheus@v0.300.0\n```\n\nFor the\nPrometheus v2.y.z releases, we published the equivalent v0.y.z tags.\n\nTherefore, a user that would want to use Prometheus v2.35.0 as a library could do:\n\n```shell\ngo get github.com/prometheus/prometheus@v0.35.0\n```\n\nThis solution makes it clear that we might break our internal Go APIs between\nminor user-facing releases, as [breaking changes are allowed in major version\nzero](https://semver.org/#spec-item-4).\n\n## React UI Development\n\nFor more information on building, running, and developing on the React-based UI, see the React app's [README.md](web/ui/README.md).\n\n## More information\n\n* Godoc documentation is available via [pkg.go.dev](https://pkg.go.dev/github.com/prometheus/prometheus). Due to peculiarities of Go Modules, v3.y.z will be displayed as v0.3y.z (the y in v0.3y.z is always padded to two digits, with a leading zero if needed), while v2.y.z will be displayed as v0.y.z.\n* See the [Community page](https://prometheus.io/community) for how to reach the Prometheus developers and users on various communication channels.\n\n## Contributing\n\nRefer to [CONTRIBUTING.md](https://github.com/prometheus/prometheus/blob/main/CONTRIBUTING.md)\n\n## License\n\nApache License 2.0, see [LICENSE](https://github.com/prometheus/prometheus/blob/main/LICENSE).\n\n[hub]: https://hub.docker.com/r/prom/prometheus/\n[quay]: https://quay.io/repository/prometheus/prometheus\n"
}