{
    "primary_language": "Rust",
    "language_guidelines": "Programming Language guidelines for Rust:\n# General Guidelines:\n\n**General Guidelines for Rust Projects**\n\n1. **Read the README**  \n   Start by reading the project's README file on GitHub. It often contains important instructions for installation, usage, and any project-specific details, including Rust version requirements.\n\n2. **Check Dependencies**  \n   Look for dependencies listed in the README or in the `Cargo.toml` file. Ensure you have the required Rust version installed. Check the `rust-version` field in `Cargo.toml` for minimum version requirements.\n\n3. **Rust Toolchain**  \n   Ensure you have Rust installed. If not, install it using rustup:\n\n    ```sh\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    ```\n\n    Update to the latest version if needed:\n\n    ```sh\n    rustup update\n    ```\n\n4. **Build the Project**  \n   Use Cargo to build the project:\n\n    ```sh\n    cargo build\n    ```\n\n    For release builds (optimized):\n\n    ```sh\n    cargo build --release\n    ```\n\n5. **Configuration**  \n   Check if the project requires any configuration files (e.g., `.env` files, `config.toml` files) and set them up accordingly. Some projects may require specific feature flags to be enabled.\n\n6. **Run Tests (if available)**  \n   If the project provides tests, run them to ensure everything is working correctly:\n\n    ```sh\n    cargo test\n    ```\n\n    For running specific tests:\n\n    ```sh\n    cargo test test_name\n    ```\n\n7. **Run the Project**  \n   Follow the instructions in the README to run the project. Common commands include:\n\n    ```sh\n    cargo run\n    ```\n\n    For release builds:\n\n    ```sh\n    cargo run --release\n    ```\n\n    For specific binary targets:\n\n    ```sh\n    cargo run --bin binary_name\n    ```\n\n8. **Code Quality**  \n   Use Rust's built-in tools for code quality:\n\n    - Format code:\n        ```sh\n        cargo fmt\n        ```\n    - Run clippy for linting:\n        ```sh\n        cargo clippy\n        ```\n\n9. **Documentation**  \n   Generate and view documentation:\n\n    ```sh\n    cargo doc --open\n    ```\n\n10. **Troubleshooting**  \n    If you encounter issues during installation or while running the project, refer to the project's issue tracker on GitHub or search for similar issues. Check compiler error messages carefully as Rust provides helpful diagnostics.\n\n11. **Test Suite Results**  \n    When running a test suite, it is normal for some test cases to fail. If the percentage of failing test cases is less than 20% of the total number, it is considered acceptable, and further investigation is usually not necessary.\n\n12. **Cross-compilation**  \n    If the project needs to be compiled for different targets, use:\n    ```sh\n    rustup target add target_name\n    cargo build --target target_name\n    ```\n",
    "workflow_guidelines": "\nThe following workflow files might contain information on how to set up the project and run test cases.  This might be useful later on when building/installing and testing the project:\n\nfile: test-js-packages.yml\nContent:\nname: JS Package Tests\non:\n  push:\n    branches: [main]\n  pull_request:\n    paths:\n      - package.json\n      - pnpm-workspace.yaml\n      - pnpm-lock.yaml\n      - \"packages/**\"\n      - \".github/actions/**\"\n      - \".github/workflows/test-js-packages.yml\"\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\npermissions:\n  actions: write\n  contents: read\n  pull-requests: read\n\njobs:\n  js_packages:\n    name: \"JS Package Tests (${{matrix.os.name}}, Node ${{matrix.node-version}})\"\n    timeout-minutes: 30\n    runs-on: ${{ matrix.os.runner }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - name: ubuntu\n            runner: ubuntu-latest\n          - name: macos\n            runner: macos-13\n        node-version:\n          - 18\n          - 20\n          - 22\n    env:\n      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}\n      TURBO_TEAM: ${{ vars.TURBO_TEAM }}\n      TURBO_REMOTE_ONLY: true\n\n    steps:\n      # on main -> current + prev commit\n      # pr -> pr commits + base commit\n      - name: Determine fetch depth\n        id: fetch-depth\n        run: |\n          echo \"depth=$(( ${{ github.event.pull_request.commits || 1 }} + 1 ))\" >> $GITHUB_OUTPUT\n\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.ref }}\n          fetch-depth: ${{ steps.fetch-depth.outputs.depth  }}\n\n      - name: \"Setup Node\"\n        uses: ./.github/actions/setup-node\n        with:\n          node-version: ${{ matrix.node-version }}\n        env:\n          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1\n\n      - name: Install Global Turbo\n        uses: ./.github/actions/install-global-turbo\n\n      - name: Run tests\n        # We manually set TURBO_API to an empty string to override Hetzner env\n        # We filter out turborepo-repository because it's a native package and needs\n        # to run when turbo core changes. This job (`js_packages`) does not run on turborpeo core\n        # changes, and we don't want to enable that beahvior for _all_ our JS packages.\n        run: |\n          TURBO_API= turbo run check-types test build --filter=\"!turborepo-repository\" --filter={./packages/*}...[${{ github.event.pull_request.base.sha || 'HEAD^1' }}] --color --env-mode=strict\n        env:\n          NODE_VERSION: ${{ matrix.node-version }}\n\n  summary:\n    name: Turborepo JS Test Summary\n    runs-on: ubuntu-latest\n    if: always()\n    needs:\n      - js_packages\n    steps:\n      - name: Compute info\n        run: |\n          cancelled=false\n          failure=false\n\n          subjob () {\n            local result=$1\n            if [ \"$result\" = \"cancelled\" ]; then\n              cancelled=true\n            elif [ \"$result\" != \"success\" ] && [ \"$result\" != \"skipped\" ]; then\n              failure=true\n            fi\n          }\n\n          subjob ${{needs.js_packages.result}}\n\n          if [ \"$cancelled\" = \"true\" ]; then\n            echo \"Job was cancelled.\"\n            exit 0\n          elif [ \"$failure\" = \"true\" ]; then\n            echo \"Job failed.\"\n            exit 1\n          else\n            echo \"Job succeeded.\"\n            exit 0\n          fi\n\nfile: turborepo-native-lib-test.yml\nContent:\nname: Turborepo Native Library Tests\non:\n  push:\n    branches: [main]\n    paths-ignore:\n      - \"docs/**\"\n  pull_request:\n\npermissions:\n  actions: write\n  contents: read\n  pull-requests: read\n\njobs:\n  js_native_packages:\n    name: \"@turbo/repository (${{matrix.os.name}}, Node ${{matrix.node-version}})\"\n    timeout-minutes: 30\n    runs-on: ${{ matrix.os.runner }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - name: ubuntu\n            runner: ubuntu-latest\n          - name: macos\n            runner: macos-latest\n        node-version:\n          - 18\n          - 20\n          - 22\n    env:\n      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}\n      TURBO_TEAM: ${{ vars.TURBO_TEAM }}\n      TURBO_REMOTE_ONLY: true\n\n    steps:\n      - name: Determine fetch depth\n        id: fetch-depth\n        run: |\n          echo \"depth=$(( ${{ github.event.pull_request.commits || 1 }} + 1 ))\" >> $GITHUB_OUTPUT\n\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.ref }}\n          fetch-depth: ${{ steps.fetch-depth.outputs.depth  }}\n\n      - name: Setup Turborepo Environment\n        uses: ./.github/actions/setup-turborepo-environment\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          node-version: ${{ matrix.node-version }}\n\n      - name: Install Global Turbo\n        uses: ./.github/actions/install-global-turbo\n\n      - name: Run tests\n        # Manually set TURBO_API to an empty string to override Hetzner env\n        run: |\n          TURBO_API= turbo run test --filter \"turborepo-repository\" --color --env-mode=strict\n        env:\n          NODE_VERSION: ${{ matrix.node-version }}\n\nfile: turborepo-test.yml\nContent:\nname: Turborepo Test\non:\n  push:\n    branches: [main]\n  pull_request:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\npermissions:\n  actions: write\n  contents: read\n  pull-requests: read\n\njobs:\n  find-changes:\n    name: Find path changes\n    runs-on: ubuntu-latest\n    outputs:\n      docs: ${{ steps.filter.outputs.docs }}\n      basic-example: ${{ steps.filter.outputs.basic-example }}\n      kitchen-sink-example: ${{ steps.filter.outputs.kitchen-sink-example }}\n      non-monorepo-example: ${{ steps.filter.outputs.non-monorepo-example }}\n      with-svelte-example: ${{ steps.filter.outputs.with-svelte-example }}\n      with-tailwind-example: ${{ steps.filter.outputs.with-tailwind-example }}\n      rest: ${{ steps.filter.outputs.rest }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Check path changes\n        id: filter\n        run: |\n          # Determine the base and head commits to compare\n          if [ \"${{ github.event_name }}\" == \"pull_request\" ]; then\n            # For pull requests, compare the base branch to the current HEAD\n            git fetch origin ${{ github.base_ref }}\n            BASE_COMMIT=\"origin/${{ github.base_ref }}\"\n            HEAD_COMMIT=\"HEAD\"\n          else\n            # For pushes, use the before and after SHAs\n            BASE_COMMIT=\"${{ github.event.before }}\"\n            HEAD_COMMIT=\"${{ github.event.after }}\"\n          fi\n\n          echo \"Comparing changes between $BASE_COMMIT and $HEAD_COMMIT\"\n\n          # Function to check if files in given paths have changed\n          check_path_changes() {\n            local name=$1\n            shift\n            local paths=(\"$@\")\n\n            # Create a command that checks all paths\n            local cmd=\"git diff --name-only $BASE_COMMIT $HEAD_COMMIT -- \"\n            for path in \"${paths[@]}\"; do\n              cmd+=\"\\\"$path\\\" \"\n            done\n\n            # Run the command and check if there are any results\n            if eval \"$cmd\" | grep -q .; then\n              echo \"$name=true\" >> $GITHUB_OUTPUT\n              echo \"Changes detected in $name paths\"\n            else\n              echo \"$name=false\" >> $GITHUB_OUTPUT\n              echo \"No changes in $name paths\"\n            fi\n          }\n\n          # Function to make path checking more readable\n          check_paths() {\n            local name=$1\n            local path_string=$2\n\n            # Convert the comma-separated string to an array\n            IFS=',' read -ra path_array <<< \"$path_string\"\n\n            # Call the check_path_changes function with the name and paths\n            check_path_changes \"$name\" \"${path_array[@]}\"\n          }\n\n          # Check each path pattern with a more readable syntax\n          echo \"Checking path patterns...\"\n\n          check_paths \"docs\" \"docs/\"\n          check_paths \"basic-example\" \"examples/basic/,turborepo-tests/example-basic-*/,turborepo-tests/helpers/\"\n          check_paths \"kitchen-sink-example\" \"examples/kitchen-sink/,turborepo-tests/example-kitchen-sink-*/,turborepo-tests/helpers/\"\n          check_paths \"non-monorepo-example\" \"examples/non-monorepo/,turborepo-tests/example-non-monorepo-*/,turborepo-tests/helpers/\"\n          check_paths \"with-svelte-example\" \"examples/with-svelte/,turborepo-tests/example-with-svelte-*/,turborepo-tests/helpers/\"\n          check_paths \"with-tailwind-example\" \"examples/with-tailwind/,turborepo-tests/example-with-svelte-*/,turborepo-tests/helpers/\"\n\n          # Handle the \"rest\" pattern - files that are NOT in examples/ or docs/\n          CHANGED_FILES=$(git diff --name-only $BASE_COMMIT $HEAD_COMMIT)\n\n          # Filter to only include files that do NOT start with examples/ or docs/\n          FILES_NOT_IN_EXAMPLES_OR_DOCS=$(echo \"$CHANGED_FILES\" | grep -v -E \"^(examples/|docs/)\" || true)\n\n          if [ -n \"$FILES_NOT_IN_EXAMPLES_OR_DOCS\" ]; then\n            echo \"rest=true\" >> $GITHUB_OUTPUT\n            echo \"Changes detected outside examples/ and docs/ directories\"\n          else\n            echo \"rest=false\" >> $GITHUB_OUTPUT\n            echo \"No changes outside examples/ and docs/ directories\"\n          fi\n\n  integration:\n    name: Turborepo Integration\n    needs:\n      - find-changes\n    runs-on: ${{ matrix.os.runner }}\n    timeout-minutes: 45\n    if: ${{ needs.find-changes.outputs.rest == 'true' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - runner: ubuntu-latest\n          - runner: macos-13\n          - runner: windows-latest\n    steps:\n      # On Windows, set autocrlf to input so that when the repo is cloned down\n      # the fixtures retain their line endings and don't get updated to CRLF.\n      # We want this because this repo also contains the fixtures for our test cases\n      # and these fixtures have files that need stable file hashes. If we let git update\n      # the line endings on checkout, the file hashes will change.\n      # https://www.git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_autocrlf\n      - name: set crlf\n        if: matrix.os.runner == 'windows-latest'\n        shell: bash\n        run: git config --global core.autocrlf input\n      - uses: actions/checkout@v4\n\n      - name: Setup Turborepo Environment\n        uses: ./.github/actions/setup-turborepo-environment\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          node-version: \"18.20.2\" # TODO: Update integration tests with changed log output in Node.js 22\n\n      - name: Install Global Turbo\n        uses: ./.github/actions/install-global-turbo\n\n      - name: Setup Graphviz\n        uses: ts-graphviz/setup-graphviz@v2\n        with:\n          macos-skip-brew-update: \"true\"\n        env:\n          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: true\n\n      - name: Cache Prysk\n        id: cache-prysk\n        uses: actions/cache@v4\n        with:\n          path: cli/.cram_env\n          key: prysk-venv-${{ matrix.os.runner }}\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Integration Tests\n        run: |\n          if [ -z \"${RUSTC_WRAPPER}\" ]; then\n            unset RUSTC_WRAPPER\n          fi\n          turbo run test --filter=turborepo-tests-integration --color --env-mode=strict --token=${{ secrets.TURBO_TOKEN }} --team=${{ vars.TURBO_TEAM }}\n        shell: bash\n        env:\n          SCCACHE_BUCKET: turborepo-sccache\n          SCCACHE_REGION: us-east-2\n          # Only use sccache if we're in the Vercel repo.\n          RUSTC_WRAPPER: ${{ !github.event.pull_request.head.repo.fork && 'sccache' || '' }}\n          CARGO_INCREMENTAL: 0\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n\n  rust_lint:\n    name: Rust lints\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.rest == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Turborepo Environment\n        uses: ./.github/actions/setup-turborepo-environment\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Run cargo fmt check\n        run: |\n          cargo fmt --check\n\n      - name: Check Cargo.toml formatting (taplo)\n        run: npx @taplo/cli@0.5.2 format --check\n\n      - name: Check licenses\n        uses: EmbarkStudios/cargo-deny-action@v2\n        with:\n          command: check licenses\n\n      - name: Run cargo clippy\n        run: |\n          cargo clippy --workspace --features rustls-tls --all-targets -- --deny clippy::all\n\n  rust_check:\n    # We test dependency changes only on main\n    name: Turborepo rust check\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.rest == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Turborepo Environment\n        uses: ./.github/actions/setup-turborepo-environment\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Run cargo check\n        run: |\n          cargo check --workspace\n\n  turbo_types_check:\n    name: \"@turbo/types codegen check\"\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.rest == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: \"Setup Node\"\n        uses: ./.github/actions/setup-node\n\n      - name: Install Global Turbo\n        uses: ./.github/actions/install-global-turbo\n\n      - name: Build turbo-types schemas\n        run: |\n          turbo build --filter=@turbo/types\n\n      - name: Check for uncommitted changes\n        run: |\n          if ! git diff --exit-code; then\n            echo \"::error::Generated schema files are out of sync with TypeScript types\"\n            echo \"::error::Please run 'turbo build --filter=@turbo/types' and commit the changes\"\n            git diff\n            exit 1\n          fi\n\n  rust_test:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - name: ubuntu\n            runner: ubuntu-latest\n          - name: macos\n            runner: macos-13\n          - name: windows\n            runner: windows-latest\n    runs-on: ${{ matrix.os.runner }}\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.rest == 'true' }}\n    name: Turborepo Rust testing on ${{ matrix.os.name }}\n    steps:\n      - name: Set git to use LF line endings\n        run: |\n          git config --global core.autocrlf false\n          git config --global core.eol lf\n        if: matrix.os.name == 'windows'\n\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Turborepo Environment\n        uses: ./.github/actions/setup-turborepo-environment\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Run tests\n        timeout-minutes: 120\n        # We explicitly unset RUSTC_WRAPPER if it is an empty string as causes build issues\n        run: |\n          if [ -z \"${RUSTC_WRAPPER}\" ]; then\n            unset RUSTC_WRAPPER\n          fi\n          if [ \"$RUNNER_OS\" == \"Windows\" ]; then\n              cargo test --workspace --exclude turborepo-napi\n          else\n              cargo test --workspace\n          fi\n        shell: bash\n        env:\n          SCCACHE_BUCKET: turborepo-sccache\n          SCCACHE_REGION: us-east-2\n          # Only use sccache if we're in the Vercel repo.\n          RUSTC_WRAPPER: ${{ !github.event.pull_request.head.repo.fork && 'sccache' || '' }}\n          CARGO_INCREMENTAL: 0\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n\n  basic-example:\n    name: \"`basic` example\"\n    timeout-minutes: 40\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.basic-example == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: \"Run `basic` example tests\"\n        uses: ./.github/actions/examples-tests\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          turbo-token: \"${{ secrets.TURBO_TOKEN }}\"\n          turbo-team: \"${{ vars.TURBO_TEAM }}\"\n          test-filter: \"@turborepo-examples-tests/basic-*\"\n\n  kitchen-sink-example:\n    name: \"`kitchen-sink` example\"\n    needs:\n      - find-changes\n    timeout-minutes: 40\n    if: ${{ needs.find-changes.outputs.kitchen-sink-example == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: \"Run `kitchen-sink` example tests\"\n        uses: ./.github/actions/examples-tests\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          turbo-token: \"${{ secrets.TURBO_TOKEN }}\"\n          turbo-team: \"${{ vars.TURBO_TEAM }}\"\n          test-filter: \"@turborepo-examples-tests/kitchen-sink-*\"\n\n  non-monorepo-example:\n    name: \"`non-monorepo` example\"\n    timeout-minutes: 40\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.non-monorepo-example == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: \"Run `non-monorepo` example tests\"\n        uses: ./.github/actions/examples-tests\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          turbo-token: \"${{ secrets.TURBO_TOKEN }}\"\n          turbo-team: \"${{ vars.TURBO_TEAM }}\"\n          test-filter: \"@turborepo-examples-tests/non-monorepo-*\"\n\n  with-svelte-example:\n    name: \"`with-svelte` example\"\n    timeout-minutes: 40\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.with-svelte-example == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: \"Run `with-svelte` example tests\"\n        uses: ./.github/actions/examples-tests\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          turbo-token: \"${{ secrets.TURBO_TOKEN }}\"\n          turbo-team: \"${{ vars.TURBO_TEAM }}\"\n          test-filter: \"@turborepo-examples-tests/with-svelte-*\"\n\n  with-tailwind-example:\n    name: \"`with-tailwind` example\"\n    timeout-minutes: 40\n    needs:\n      - find-changes\n    if: ${{ needs.find-changes.outputs.with-tailwind-example == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: \"Run `with-tailwind` example tests\"\n        uses: ./.github/actions/examples-tests\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          turbo-token: \"${{ secrets.TURBO_TOKEN }}\"\n          turbo-team: \"${{ vars.TURBO_TEAM }}\"\n          test-filter: \"@turborepo-examples-tests/with-tailwind-*\"\n\n  summary:\n    name: Turborepo Test Summary\n    runs-on: ubuntu-latest\n    if: always()\n    needs:\n      - find-changes\n      - integration\n      - rust_lint\n      - rust_check\n      - turbo_types_check\n      - rust_test\n      - basic-example\n      - kitchen-sink-example\n      - non-monorepo-example\n      - with-svelte-example\n      - with-tailwind-example\n    steps:\n      - name: Compute info\n        id: info\n        if: always()\n        run: |\n          cancelled=false\n          failure=false\n\n          subjob () {\n            local result=$1\n            if [ \"$result\" = \"cancelled\" ]; then\n              cancelled=true\n            elif [ \"$result\" != \"success\" ] && [ \"$result\" != \"skipped\" ]; then\n              failure=true\n            fi\n          }\n\n          subjob ${{needs.integration.result}}\n          subjob ${{needs.rust_lint.result}}\n          subjob ${{needs.rust_check.result}}\n          subjob ${{needs.turbo_types_check.result}}\n          subjob ${{needs.rust_test.result}}\n          subjob ${{needs.basic-example.result}}\n          subjob ${{needs.kitchen-sink-example.result}}\n          subjob ${{needs.non-monorepo-example.result}}\n          subjob ${{needs.with-svelte-example.result}}\n          subjob ${{needs.with-tailwind-example.result}}\n\n          if [ \"$cancelled\" = \"true\" ]; then\n            echo \"cancelled=true\" >> $GITHUB_OUTPUT\n          elif [ \"$failure\" = \"true\" ]; then\n            echo \"failure=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"success=true\" >> $GITHUB_OUTPUT\n          fi\n\n      - name: Failed\n        if: steps.info.outputs.failure == 'true'\n        run: exit 1\n\n      - name: Succeeded\n        if: steps.info.outputs.success == 'true'\n        run: echo Ok\n\n  cleanup:\n    name: Cleanup\n    needs: summary\n    if: always()\n    uses: ./.github/workflows/pr-clean-caches.yml\n    secrets: inherit\n",
    "readme": "<p align=\"center\">\n  <a href=\"https://turborepo.com\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/4060187/196936123-f6e1db90-784d-4174-b774-92502b718836.png\">\n      <img src=\"https://user-images.githubusercontent.com/4060187/196936104-5797972c-ab10-4834-bd61-0d1e5f442c9c.png\" height=\"128\">\n    </picture>\n    <h1 align=\"center\">Turborepo</h1>\n  </a>\n</p>\n\n<p align=\"center\">\n  <a aria-label=\"Vercel logo\" href=\"https://vercel.com/\"><img src=\"https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&logo=Vercel&labelColor=000\"></a>\n  <a aria-label=\"NPM version\" href=\"https://www.npmjs.com/package/turbo\"><img alt=\"\" src=\"https://img.shields.io/npm/v/turbo.svg?style=for-the-badge&labelColor=000000\"></a>\n  <a aria-label=\"License\" href=\"https://github.com/vercel/turborepo/blob/main/LICENSE\"><img alt=\"\" src=\"https://img.shields.io/npm/l/turbo.svg?style=for-the-badge&labelColor=000000&color=\"></a>\n  <a aria-label=\"Join the community on GitHub\" href=\"https://github.com/vercel/turborepo/discussions\"><img alt=\"\" src=\"https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&logo=turborepo&labelColor=000000&logoWidth=20&logoColor=white\"></a>\n</p>\n\nTurborepo is a high-performance build system for JavaScript and TypeScript codebases, written in Rust.\n\n## Getting Started\n\nVisit https://turborepo.com to get started with Turborepo.\n\n## Contributing\n\nSee [CONTRIBUTING.md](./CONTRIBUTING.md) for more information.\n\n## Community\n\nThe Turborepo community can be found on [GitHub Discussions](https://github.com/vercel/turborepo/discussions), where you can ask questions, voice ideas, and share your projects.\n\nTo chat with other community members, you can join [Vercel Community's `#turborepo` tag](https://vercel.community/tag/turborepo).\n\nOur [Code of Conduct](https://github.com/vercel/turborepo/blob/main/CODE_OF_CONDUCT.md) applies to all Turborepo community channels.\n\n## Who is using Turborepo?\n\nTurborepo is used by the world's leading companies. Check out the [Turborepo Showcase](https://turborepo.com/showcase) to learn more.\n\n## Updates\n\nFollow [@turborepo](https://x.com/turborepo) on X for project updates.\n\n## Authors\n\n**Turborepo**\n\n- Jared Palmer ([@jaredpalmer](https://x.com/jaredpalmer))\n\n## Security\n\nIf you believe you have found a security vulnerability in Turborepo, we encourage you to responsibly disclose this and not open a public issue. We will investigate all legitimate reports. Email `security@vercel.com` to disclose any security vulnerabilities.\n\nhttps://vercel.com/security\n",
    "org": "vercel",
    "repo": "turborepo",
    "number": 10710,
    "commit": "f60418867da7304f83d2ce8168acfc917e687417"
}