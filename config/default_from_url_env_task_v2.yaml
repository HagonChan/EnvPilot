agent:
    templates:
        system_template: |-
            SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.

            In addition to typical bash commands, you can also use specific commands to help you navigate and edit files.
            To call a command, you need to invoke it with a function call/tool call. 

            RESPONSE FORMAT:
            Your shell prompt is formatted as follows:
            (Open file: <path>)
            (Current directory: <cwd>)
            bash-$

            First, you should _always_ include a general thought about what you're going to do next.
            Then, for every response, you must include exactly _ONE_ tool call/function call.

            Remember, you should always include a _SINGLE_ tool call/function call and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
            If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first tool call, and then after receiving a response you'll be able to issue the second .
            Note that the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.
        instance_template: |-
            We are currently configuring the environment for the repository. Your task is to configure the environment and installs this project (on an Ubuntu Linux machine) from source code and runs test cases.

            {{repo_related_info}}

            {{cross_repo_knowledge}}

            TASK TIPS:
            1. It is prohibited to directly install this repository using dependency package management tools. For example, if current repository is Django, directly running pip install Django is strictly prohibited.
            2. **PRIORITY ORDER for environment configuration discovery:**
              a) **First, check CI/CD configuration files** (.github/workflows/*.yml, .github/workflows/*.yaml, .gitlab-ci.yml, .circleci/config.yml, azure-pipelines.yml, Jenkinsfile, etc.) - these often contain the most reliable setup steps and test commands
              b) If no CI/CD files exist or they're insufficient, check dependency/environment files (requirements.txt, setup.py, pyproject.toml, package.json, Gemfile, Cargo.toml, etc.)
              c) Then examine README files (README.md, README.rst, etc.) for setup instructions
              d) Look for other configuration files (Makefile, tox.ini, environment.yml, etc.)
            3. Always start by browsing the repository directory structure, with particular focus on the priority order above.
            4. The choice of test framework should be determined by the repository's contents and CI/CD configurations.
            5. It is strictly prohibited to modify the test cases in the code repository.
            6. Do not create a new Dockerfile for environment isolation.
            7. Commands can be run without sudo as the current session already has root privileges.
            8. Based on the characteristics of the repository, it is possible to determine whether environment setup and test execution need to be performed within a virtual environment.
            9. It may be necessary to install the repository from source before you can run code.
            10. If you encounter package installation failures, try updating your local package index.
            11. **Pay special attention to CI/CD matrix configurations** - they often test multiple Python/Node.js/etc. versions and can guide your environment setup.

            GENERAL TIPS:
            1. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!
            2. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.
            3. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current open file.
            4. When using the edit command, always quote both search and replace arguments to avoid argument parsing failures.

            INSTRUCTIONS:
            Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.
            Remember, YOU SHOULD ALWAYS INCLUDE EXACTLY ONE TOOL CALL/FUNCTION CALL PER RESPONSE.
            When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.
            Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with the python command.
        next_step_template: |-
            {{observation}}
            (Open file: {{open_file}})
            (Current directory: {{working_dir}})
            bash-$
        next_step_no_output_template: |-
            Your command ran successfully and did not produce any output.
            (Open file: {{open_file}})
            (Current directory: {{working_dir}})
            bash-$
        success_reflection_template: |-
            You are an expert code assistant who just successfully repaired a software project in an automated programming session. Your task now is to reflect on this successful task and summarize key takeaways for future similar tasks.

            CONTEXT:
            Below is the full interaction history during the session, including commands issued, file edits, and observations returned. Use this history to extract useful insights.

            ----------------
            {{session_history}}
            ----------------

            PLEASE WRITE A REFLECTION INCLUDING:
            1. **Problem Summary**:
              - What was the main problem or failure mode encountered?

            2. **Critical Fix Steps**:
              - List 2-5 concrete steps that were essential to achieving success.
              - For each step, describe what the agent did and why it was effective.

            3. **Heuristics or General Patterns**:
              - Are there any general rules or repeatable strategies that could help in future repairs?

            4. **Environment or Tooling Insights** (if applicable):
              - Any key observations about the build system, environment configuration, or command-line tools that helped?

            Here is the traj:
    tools:
        env_variables:
            WINDOW: 100
            OVERLAP: 2
        bundles:
            - path: tools/registry
            - path: tools/defaults
            - path: tools/search
            - path: tools/edit_replace
            - path: tools/submits/stage3_2/submit
        enable_bash_tool: true
        parse_function:
            type: function_calling
        execution_timeout: 32400
        install_timeout: 3600
    history_processors:
        - type: last_n_observations
          n: 5
